<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="661.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="96924"><g><title>binary_to_types`cwe_checker_lib::analysis::graph::GraphBuilder::add_block (10 samples, 0.01%)</title><rect x="0.0041%" y="453" width="0.0103%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="10"/><text x="0.2541%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::graph::get_program_cfg (25 samples, 0.03%)</title><rect x="0.0000%" y="469" width="0.0258%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="25"/><text x="0.2500%" y="479.50"></text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::graph_from_project (26 samples, 0.03%)</title><rect x="0.0000%" y="485" width="0.0268%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="26"/><text x="0.2500%" y="495.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (64 samples, 0.07%)</title><rect x="0.0898%" y="421" width="0.0660%" height="15" fill="rgb(248,212,6)" fg:x="87" fg:w="64"/><text x="0.3398%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (52 samples, 0.05%)</title><rect x="0.1558%" y="421" width="0.0537%" height="15" fill="rgb(208,68,35)" fg:x="151" fg:w="52"/><text x="0.4058%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (32 samples, 0.03%)</title><rect x="0.1764%" y="405" width="0.0330%" height="15" fill="rgb(232,128,0)" fg:x="171" fg:w="32"/><text x="0.4264%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (22 samples, 0.02%)</title><rect x="0.1867%" y="389" width="0.0227%" height="15" fill="rgb(207,160,47)" fg:x="181" fg:w="22"/><text x="0.4367%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (15 samples, 0.02%)</title><rect x="0.3487%" y="389" width="0.0155%" height="15" fill="rgb(228,23,34)" fg:x="338" fg:w="15"/><text x="0.5987%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (66 samples, 0.07%)</title><rect x="0.3642%" y="389" width="0.0681%" height="15" fill="rgb(218,30,26)" fg:x="353" fg:w="66"/><text x="0.6142%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (23 samples, 0.02%)</title><rect x="0.4323%" y="389" width="0.0237%" height="15" fill="rgb(220,122,19)" fg:x="419" fg:w="23"/><text x="0.6823%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (13 samples, 0.01%)</title><rect x="0.4560%" y="389" width="0.0134%" height="15" fill="rgb(250,228,42)" fg:x="442" fg:w="13"/><text x="0.7060%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (30 samples, 0.03%)</title><rect x="0.4694%" y="389" width="0.0310%" height="15" fill="rgb(240,193,28)" fg:x="455" fg:w="30"/><text x="0.7194%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.02%)</title><rect x="0.4839%" y="373" width="0.0165%" height="15" fill="rgb(216,20,37)" fg:x="469" fg:w="16"/><text x="0.7339%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (287 samples, 0.30%)</title><rect x="0.2249%" y="405" width="0.2961%" height="15" fill="rgb(206,188,39)" fg:x="218" fg:w="287"/><text x="0.4749%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (20 samples, 0.02%)</title><rect x="0.5004%" y="389" width="0.0206%" height="15" fill="rgb(217,207,13)" fg:x="485" fg:w="20"/><text x="0.7504%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.01%)</title><rect x="0.5086%" y="373" width="0.0124%" height="15" fill="rgb(231,73,38)" fg:x="493" fg:w="12"/><text x="0.7586%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (303 samples, 0.31%)</title><rect x="0.2094%" y="421" width="0.3126%" height="15" fill="rgb(225,20,46)" fg:x="203" fg:w="303"/><text x="0.4594%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (16 samples, 0.02%)</title><rect x="0.5334%" y="421" width="0.0165%" height="15" fill="rgb(210,31,41)" fg:x="517" fg:w="16"/><text x="0.7834%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (474 samples, 0.49%)</title><rect x="0.0619%" y="437" width="0.4890%" height="15" fill="rgb(221,200,47)" fg:x="60" fg:w="474"/><text x="0.3119%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (71 samples, 0.07%)</title><rect x="0.5788%" y="421" width="0.0733%" height="15" fill="rgb(226,26,5)" fg:x="561" fg:w="71"/><text x="0.8288%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (70 samples, 0.07%)</title><rect x="0.5798%" y="405" width="0.0722%" height="15" fill="rgb(249,33,26)" fg:x="562" fg:w="70"/><text x="0.8298%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (50 samples, 0.05%)</title><rect x="0.6005%" y="389" width="0.0516%" height="15" fill="rgb(235,183,28)" fg:x="582" fg:w="50"/><text x="0.8505%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`madvise (49 samples, 0.05%)</title><rect x="0.6015%" y="373" width="0.0506%" height="15" fill="rgb(221,5,38)" fg:x="583" fg:w="49"/><text x="0.8515%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (96 samples, 0.10%)</title><rect x="0.5540%" y="437" width="0.0990%" height="15" fill="rgb(247,18,42)" fg:x="537" fg:w="96"/><text x="0.8040%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (28 samples, 0.03%)</title><rect x="0.6541%" y="437" width="0.0289%" height="15" fill="rgb(241,131,45)" fg:x="634" fg:w="28"/><text x="0.9041%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.02%)</title><rect x="0.6675%" y="421" width="0.0155%" height="15" fill="rgb(249,31,29)" fg:x="647" fg:w="15"/><text x="0.9175%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (34 samples, 0.04%)</title><rect x="0.6975%" y="405" width="0.0351%" height="15" fill="rgb(225,111,53)" fg:x="676" fg:w="34"/><text x="0.9475%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (34 samples, 0.04%)</title><rect x="0.6975%" y="389" width="0.0351%" height="15" fill="rgb(238,160,17)" fg:x="676" fg:w="34"/><text x="0.9475%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (81 samples, 0.08%)</title><rect x="0.6830%" y="437" width="0.0836%" height="15" fill="rgb(214,148,48)" fg:x="662" fg:w="81"/><text x="0.9330%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (77 samples, 0.08%)</title><rect x="0.6871%" y="421" width="0.0794%" height="15" fill="rgb(232,36,49)" fg:x="666" fg:w="77"/><text x="0.9371%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (30 samples, 0.03%)</title><rect x="0.7356%" y="405" width="0.0310%" height="15" fill="rgb(209,103,24)" fg:x="713" fg:w="30"/><text x="0.9856%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.03%)</title><rect x="0.7356%" y="389" width="0.0310%" height="15" fill="rgb(229,88,8)" fg:x="713" fg:w="30"/><text x="0.9856%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.01%)</title><rect x="0.7738%" y="437" width="0.0103%" height="15" fill="rgb(213,181,19)" fg:x="750" fg:w="10"/><text x="1.0238%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (735 samples, 0.76%)</title><rect x="0.0279%" y="453" width="0.7583%" height="15" fill="rgb(254,191,54)" fg:x="27" fg:w="735"/><text x="0.2779%" y="463.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::intermediate_representation::def::Def&gt;&gt;&gt; (15 samples, 0.02%)</title><rect x="0.7903%" y="373" width="0.0155%" height="15" fill="rgb(241,83,37)" fg:x="766" fg:w="15"/><text x="1.0403%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (19 samples, 0.02%)</title><rect x="0.8140%" y="373" width="0.0196%" height="15" fill="rgb(233,36,39)" fg:x="789" fg:w="19"/><text x="1.0640%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.02%)</title><rect x="0.8140%" y="357" width="0.0196%" height="15" fill="rgb(226,3,54)" fg:x="789" fg:w="19"/><text x="1.0640%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (10 samples, 0.01%)</title><rect x="0.8233%" y="341" width="0.0103%" height="15" fill="rgb(245,192,40)" fg:x="798" fg:w="10"/><text x="1.0733%" y="351.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::intermediate_representation::blk::Blk&gt;&gt; (45 samples, 0.05%)</title><rect x="0.7893%" y="389" width="0.0464%" height="15" fill="rgb(238,167,29)" fg:x="765" fg:w="45"/><text x="1.0393%" y="399.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::project::Project&gt; (52 samples, 0.05%)</title><rect x="0.7872%" y="453" width="0.0537%" height="15" fill="rgb(232,182,51)" fg:x="763" fg:w="52"/><text x="1.0372%" y="463.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::program::Program&gt; (51 samples, 0.05%)</title><rect x="0.7882%" y="437" width="0.0526%" height="15" fill="rgb(231,60,39)" fg:x="764" fg:w="51"/><text x="1.0382%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.05%)</title><rect x="0.7882%" y="421" width="0.0526%" height="15" fill="rgb(208,69,12)" fg:x="764" fg:w="51"/><text x="1.0382%" y="431.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::sub::Sub&gt; (51 samples, 0.05%)</title><rect x="0.7882%" y="405" width="0.0526%" height="15" fill="rgb(235,93,37)" fg:x="764" fg:w="51"/><text x="1.0382%" y="415.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (794 samples, 0.82%)</title><rect x="0.0279%" y="469" width="0.8192%" height="15" fill="rgb(213,116,39)" fg:x="27" fg:w="794"/><text x="0.2779%" y="479.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::pointer_inference::PointerInference::compute (25 samples, 0.03%)</title><rect x="0.8574%" y="437" width="0.0258%" height="15" fill="rgb(222,207,29)" fg:x="831" fg:w="25"/><text x="1.1074%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::compute_with_max_steps (25 samples, 0.03%)</title><rect x="0.8574%" y="421" width="0.0258%" height="15" fill="rgb(206,96,30)" fg:x="831" fg:w="25"/><text x="1.1074%" y="431.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::pointer_inference::context::trait_impls::_&lt;impl cwe_checker_lib::analysis::forward_interprocedural_fixpoint::Context for cwe_checker_lib::analysis::pointer_inference::context::Context&gt;::update_def (16 samples, 0.02%)</title><rect x="0.8667%" y="405" width="0.0165%" height="15" fill="rgb(218,138,4)" fg:x="840" fg:w="16"/><text x="1.1167%" y="415.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::forward_interprocedural_fixpoint::create_computation_with_alternate_worklist_order (11 samples, 0.01%)</title><rect x="0.8832%" y="421" width="0.0113%" height="15" fill="rgb(250,191,14)" fg:x="856" fg:w="11"/><text x="1.1332%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::node_context::points_to::run_analysis (49 samples, 0.05%)</title><rect x="0.8502%" y="469" width="0.0506%" height="15" fill="rgb(239,60,40)" fg:x="824" fg:w="49"/><text x="1.1002%" y="479.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::pointer_inference::run (49 samples, 0.05%)</title><rect x="0.8502%" y="453" width="0.0506%" height="15" fill="rgb(206,27,48)" fg:x="824" fg:w="49"/><text x="1.1002%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::pointer_inference::PointerInference::new (17 samples, 0.02%)</title><rect x="0.8832%" y="437" width="0.0175%" height="15" fill="rgb(225,35,8)" fg:x="856" fg:w="17"/><text x="1.1332%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.01%)</title><rect x="0.9110%" y="357" width="0.0113%" height="15" fill="rgb(250,213,24)" fg:x="883" fg:w="11"/><text x="1.1610%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="0.9090%" y="373" width="0.0144%" height="15" fill="rgb(247,123,22)" fg:x="881" fg:w="14"/><text x="1.1590%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (36 samples, 0.04%)</title><rect x="0.9038%" y="453" width="0.0371%" height="15" fill="rgb(231,138,38)" fg:x="876" fg:w="36"/><text x="1.1538%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (36 samples, 0.04%)</title><rect x="0.9038%" y="437" width="0.0371%" height="15" fill="rgb(231,145,46)" fg:x="876" fg:w="36"/><text x="1.1538%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (36 samples, 0.04%)</title><rect x="0.9038%" y="421" width="0.0371%" height="15" fill="rgb(251,118,11)" fg:x="876" fg:w="36"/><text x="1.1538%" y="431.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;T&gt; as core::clone::Clone&gt;::clone (36 samples, 0.04%)</title><rect x="0.9038%" y="405" width="0.0371%" height="15" fill="rgb(217,147,25)" fg:x="876" fg:w="36"/><text x="1.1538%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (36 samples, 0.04%)</title><rect x="0.9038%" y="389" width="0.0371%" height="15" fill="rgb(247,81,37)" fg:x="876" fg:w="36"/><text x="1.1538%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (25 samples, 0.03%)</title><rect x="0.9492%" y="373" width="0.0258%" height="15" fill="rgb(209,12,38)" fg:x="920" fg:w="25"/><text x="1.1992%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (27 samples, 0.03%)</title><rect x="0.9492%" y="405" width="0.0279%" height="15" fill="rgb(227,1,9)" fg:x="920" fg:w="27"/><text x="1.1992%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (27 samples, 0.03%)</title><rect x="0.9492%" y="389" width="0.0279%" height="15" fill="rgb(248,47,43)" fg:x="920" fg:w="27"/><text x="1.1992%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.02%)</title><rect x="0.9812%" y="405" width="0.0165%" height="15" fill="rgb(221,10,30)" fg:x="951" fg:w="16"/><text x="1.2312%" y="415.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.01%)</title><rect x="1.0080%" y="373" width="0.0103%" height="15" fill="rgb(210,229,1)" fg:x="977" fg:w="10"/><text x="1.2580%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23 samples, 0.02%)</title><rect x="1.0049%" y="389" width="0.0237%" height="15" fill="rgb(222,148,37)" fg:x="974" fg:w="23"/><text x="1.2549%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (11 samples, 0.01%)</title><rect x="1.0286%" y="389" width="0.0113%" height="15" fill="rgb(234,67,33)" fg:x="997" fg:w="11"/><text x="1.2786%" y="399.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::analysis::reaching_definitions::TermSet as cwe_checker_lib::abstract_domain::AbstractDomain&gt;::merge (50 samples, 0.05%)</title><rect x="1.0018%" y="405" width="0.0516%" height="15" fill="rgb(247,98,35)" fg:x="971" fg:w="50"/><text x="1.2518%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (10 samples, 0.01%)</title><rect x="1.0668%" y="405" width="0.0103%" height="15" fill="rgb(247,138,52)" fg:x="1034" fg:w="10"/><text x="1.3168%" y="415.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as cwe_checker_lib::abstract_domain::AbstractDomain&gt;::merge (130 samples, 0.13%)</title><rect x="0.9461%" y="421" width="0.1341%" height="15" fill="rgb(213,79,30)" fg:x="917" fg:w="130"/><text x="1.1961%" y="431.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (38 samples, 0.04%)</title><rect x="1.1019%" y="373" width="0.0392%" height="15" fill="rgb(246,177,23)" fg:x="1068" fg:w="38"/><text x="1.3519%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (28 samples, 0.03%)</title><rect x="1.1411%" y="373" width="0.0289%" height="15" fill="rgb(230,62,27)" fg:x="1106" fg:w="28"/><text x="1.3911%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (12 samples, 0.01%)</title><rect x="1.1576%" y="357" width="0.0124%" height="15" fill="rgb(216,154,8)" fg:x="1122" fg:w="12"/><text x="1.4076%" y="367.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (38 samples, 0.04%)</title><rect x="1.1875%" y="357" width="0.0392%" height="15" fill="rgb(244,35,45)" fg:x="1151" fg:w="38"/><text x="1.4375%" y="367.50"></text></g><g><title>binary_to_types`alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (26 samples, 0.03%)</title><rect x="1.2267%" y="357" width="0.0268%" height="15" fill="rgb(251,115,12)" fg:x="1189" fg:w="26"/><text x="1.4767%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.01%)</title><rect x="1.2422%" y="341" width="0.0113%" height="15" fill="rgb(240,54,50)" fg:x="1204" fg:w="11"/><text x="1.4922%" y="351.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (115 samples, 0.12%)</title><rect x="1.1731%" y="373" width="0.1186%" height="15" fill="rgb(233,84,52)" fg:x="1137" fg:w="115"/><text x="1.4231%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (37 samples, 0.04%)</title><rect x="1.2536%" y="357" width="0.0382%" height="15" fill="rgb(207,117,47)" fg:x="1215" fg:w="37"/><text x="1.5036%" y="367.50"></text></g><g><title>binary_to_types`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 0.02%)</title><rect x="1.2917%" y="373" width="0.0165%" height="15" fill="rgb(249,43,39)" fg:x="1252" fg:w="16"/><text x="1.5417%" y="383.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (273 samples, 0.28%)</title><rect x="1.0823%" y="389" width="0.2817%" height="15" fill="rgb(209,38,44)" fg:x="1049" fg:w="273"/><text x="1.3323%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (54 samples, 0.06%)</title><rect x="1.3082%" y="373" width="0.0557%" height="15" fill="rgb(236,212,23)" fg:x="1268" fg:w="54"/><text x="1.5582%" y="383.50"></text></g><g><title>binary_to_types`core::cmp::PartialOrd::le (279 samples, 0.29%)</title><rect x="1.0813%" y="421" width="0.2879%" height="15" fill="rgb(242,79,21)" fg:x="1048" fg:w="279"/><text x="1.3313%" y="431.50"></text></g><g><title>binary_to_types`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (278 samples, 0.29%)</title><rect x="1.0823%" y="405" width="0.2868%" height="15" fill="rgb(211,96,35)" fg:x="1049" fg:w="278"/><text x="1.3323%" y="415.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::forward_interprocedural_fixpoint::GeneralizedContext&lt;T&gt; as cwe_checker_lib::analysis::fixpoint::Context&gt;::merge (413 samples, 0.43%)</title><rect x="0.9461%" y="453" width="0.4261%" height="15" fill="rgb(253,215,40)" fg:x="917" fg:w="413"/><text x="1.1961%" y="463.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::analysis::reaching_definitions::Context as cwe_checker_lib::analysis::forward_interprocedural_fixpoint::Context&gt;::merge (413 samples, 0.43%)</title><rect x="0.9461%" y="437" width="0.4261%" height="15" fill="rgb(211,81,21)" fg:x="917" fg:w="413"/><text x="1.1961%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (11 samples, 0.01%)</title><rect x="1.3794%" y="357" width="0.0113%" height="15" fill="rgb(208,190,38)" fg:x="1337" fg:w="11"/><text x="1.6294%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (18 samples, 0.02%)</title><rect x="1.3763%" y="373" width="0.0186%" height="15" fill="rgb(235,213,38)" fg:x="1334" fg:w="18"/><text x="1.6263%" y="383.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as core::ops::deref::DerefMut&gt;::deref_mut (21 samples, 0.02%)</title><rect x="1.3753%" y="421" width="0.0217%" height="15" fill="rgb(237,122,38)" fg:x="1333" fg:w="21"/><text x="1.6253%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (21 samples, 0.02%)</title><rect x="1.3753%" y="405" width="0.0217%" height="15" fill="rgb(244,218,35)" fg:x="1333" fg:w="21"/><text x="1.6253%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (21 samples, 0.02%)</title><rect x="1.3753%" y="389" width="0.0217%" height="15" fill="rgb(240,68,47)" fg:x="1333" fg:w="21"/><text x="1.6253%" y="399.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::analysis::reaching_definitions::Context as cwe_checker_lib::analysis::forward_interprocedural_fixpoint::Context&gt;::update_call_stub (23 samples, 0.02%)</title><rect x="1.3743%" y="437" width="0.0237%" height="15" fill="rgb(210,16,53)" fg:x="1332" fg:w="23"/><text x="1.6243%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.01%)</title><rect x="1.4682%" y="373" width="0.0144%" height="15" fill="rgb(235,124,12)" fg:x="1423" fg:w="14"/><text x="1.7182%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (12 samples, 0.01%)</title><rect x="1.4702%" y="357" width="0.0124%" height="15" fill="rgb(224,169,11)" fg:x="1425" fg:w="12"/><text x="1.7202%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (52 samples, 0.05%)</title><rect x="1.4300%" y="389" width="0.0537%" height="15" fill="rgb(250,166,2)" fg:x="1386" fg:w="52"/><text x="1.6800%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (38 samples, 0.04%)</title><rect x="1.5352%" y="357" width="0.0392%" height="15" fill="rgb(242,216,29)" fg:x="1488" fg:w="38"/><text x="1.7852%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (114 samples, 0.12%)</title><rect x="1.4836%" y="389" width="0.1176%" height="15" fill="rgb(230,116,27)" fg:x="1438" fg:w="114"/><text x="1.7336%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (96 samples, 0.10%)</title><rect x="1.5022%" y="373" width="0.0990%" height="15" fill="rgb(228,99,48)" fg:x="1456" fg:w="96"/><text x="1.7522%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (26 samples, 0.03%)</title><rect x="1.5744%" y="357" width="0.0268%" height="15" fill="rgb(253,11,6)" fg:x="1526" fg:w="26"/><text x="1.8244%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.01%)</title><rect x="1.6054%" y="389" width="0.0103%" height="15" fill="rgb(247,143,39)" fg:x="1556" fg:w="10"/><text x="1.8554%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (218 samples, 0.22%)</title><rect x="1.4104%" y="405" width="0.2249%" height="15" fill="rgb(236,97,10)" fg:x="1367" fg:w="218"/><text x="1.6604%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.02%)</title><rect x="1.6580%" y="389" width="0.0165%" height="15" fill="rgb(233,208,19)" fg:x="1607" fg:w="16"/><text x="1.9080%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.02%)</title><rect x="1.6580%" y="373" width="0.0165%" height="15" fill="rgb(216,164,2)" fg:x="1607" fg:w="16"/><text x="1.9080%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (35 samples, 0.04%)</title><rect x="1.6394%" y="405" width="0.0361%" height="15" fill="rgb(220,129,5)" fg:x="1589" fg:w="35"/><text x="1.8894%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (43 samples, 0.04%)</title><rect x="1.6797%" y="405" width="0.0444%" height="15" fill="rgb(242,17,10)" fg:x="1628" fg:w="43"/><text x="1.9297%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.02%)</title><rect x="1.7086%" y="389" width="0.0155%" height="15" fill="rgb(242,107,0)" fg:x="1656" fg:w="15"/><text x="1.9586%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.01%)</title><rect x="1.7354%" y="405" width="0.0124%" height="15" fill="rgb(251,28,31)" fg:x="1682" fg:w="12"/><text x="1.9854%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (338 samples, 0.35%)</title><rect x="1.4021%" y="421" width="0.3487%" height="15" fill="rgb(233,223,10)" fg:x="1359" fg:w="338"/><text x="1.6521%" y="431.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (357 samples, 0.37%)</title><rect x="1.4021%" y="437" width="0.3683%" height="15" fill="rgb(215,21,27)" fg:x="1359" fg:w="357"/><text x="1.6521%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (29 samples, 0.03%)</title><rect x="1.9376%" y="293" width="0.0299%" height="15" fill="rgb(232,23,21)" fg:x="1878" fg:w="29"/><text x="2.1876%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (95 samples, 0.10%)</title><rect x="1.9201%" y="325" width="0.0980%" height="15" fill="rgb(244,5,23)" fg:x="1861" fg:w="95"/><text x="2.1701%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (93 samples, 0.10%)</title><rect x="1.9221%" y="309" width="0.0960%" height="15" fill="rgb(226,81,46)" fg:x="1863" fg:w="93"/><text x="2.1721%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (49 samples, 0.05%)</title><rect x="1.9675%" y="293" width="0.0506%" height="15" fill="rgb(247,70,30)" fg:x="1907" fg:w="49"/><text x="2.2175%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (116 samples, 0.12%)</title><rect x="1.9015%" y="341" width="0.1197%" height="15" fill="rgb(212,68,19)" fg:x="1843" fg:w="116"/><text x="2.1515%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (173 samples, 0.18%)</title><rect x="1.8458%" y="357" width="0.1785%" height="15" fill="rgb(240,187,13)" fg:x="1789" fg:w="173"/><text x="2.0958%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.02%)</title><rect x="2.0511%" y="309" width="0.0248%" height="15" fill="rgb(223,113,26)" fg:x="1988" fg:w="24"/><text x="2.3011%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (52 samples, 0.05%)</title><rect x="2.0274%" y="341" width="0.0537%" height="15" fill="rgb(206,192,2)" fg:x="1965" fg:w="52"/><text x="2.2774%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (36 samples, 0.04%)</title><rect x="2.0439%" y="325" width="0.0371%" height="15" fill="rgb(241,108,4)" fg:x="1981" fg:w="36"/><text x="2.2939%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (59 samples, 0.06%)</title><rect x="2.0243%" y="357" width="0.0609%" height="15" fill="rgb(247,173,49)" fg:x="1962" fg:w="59"/><text x="2.2743%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.02%)</title><rect x="2.1078%" y="309" width="0.0155%" height="15" fill="rgb(224,114,35)" fg:x="2043" fg:w="15"/><text x="2.3578%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (40 samples, 0.04%)</title><rect x="2.1037%" y="341" width="0.0413%" height="15" fill="rgb(245,159,27)" fg:x="2039" fg:w="40"/><text x="2.3537%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (37 samples, 0.04%)</title><rect x="2.1068%" y="325" width="0.0382%" height="15" fill="rgb(245,172,44)" fg:x="2042" fg:w="37"/><text x="2.3568%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (21 samples, 0.02%)</title><rect x="2.1233%" y="309" width="0.0217%" height="15" fill="rgb(236,23,11)" fg:x="2058" fg:w="21"/><text x="2.3733%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.05%)</title><rect x="2.0934%" y="357" width="0.0526%" height="15" fill="rgb(205,117,38)" fg:x="2029" fg:w="51"/><text x="2.3434%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (377 samples, 0.39%)</title><rect x="1.7921%" y="373" width="0.3890%" height="15" fill="rgb(237,72,25)" fg:x="1737" fg:w="377"/><text x="2.0421%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (31 samples, 0.03%)</title><rect x="2.1491%" y="357" width="0.0320%" height="15" fill="rgb(244,70,9)" fg:x="2083" fg:w="31"/><text x="2.3991%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.01%)</title><rect x="2.1852%" y="357" width="0.0103%" height="15" fill="rgb(217,125,39)" fg:x="2118" fg:w="10"/><text x="2.4352%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 0.02%)</title><rect x="2.1811%" y="373" width="0.0155%" height="15" fill="rgb(235,36,10)" fg:x="2114" fg:w="15"/><text x="2.4311%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (414 samples, 0.43%)</title><rect x="1.7839%" y="389" width="0.4271%" height="15" fill="rgb(251,123,47)" fg:x="1729" fg:w="414"/><text x="2.0339%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (424 samples, 0.44%)</title><rect x="1.7808%" y="405" width="0.4375%" height="15" fill="rgb(221,13,13)" fg:x="1726" fg:w="424"/><text x="2.0308%" y="415.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as core::ops::deref::DerefMut&gt;::deref_mut (429 samples, 0.44%)</title><rect x="1.7777%" y="421" width="0.4426%" height="15" fill="rgb(238,131,9)" fg:x="1723" fg:w="429"/><text x="2.0277%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::analysis::reaching_definitions::apply_def (444 samples, 0.46%)</title><rect x="1.7705%" y="437" width="0.4581%" height="15" fill="rgb(211,50,8)" fg:x="1716" fg:w="444"/><text x="2.0205%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (19 samples, 0.02%)</title><rect x="2.2389%" y="373" width="0.0196%" height="15" fill="rgb(245,182,24)" fg:x="2170" fg:w="19"/><text x="2.4889%" y="383.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as core::ops::deref::DerefMut&gt;::deref_mut (23 samples, 0.02%)</title><rect x="2.2389%" y="421" width="0.0237%" height="15" fill="rgb(242,14,37)" fg:x="2170" fg:w="23"/><text x="2.4889%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (23 samples, 0.02%)</title><rect x="2.2389%" y="405" width="0.0237%" height="15" fill="rgb(246,228,12)" fg:x="2170" fg:w="23"/><text x="2.4889%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (23 samples, 0.02%)</title><rect x="2.2389%" y="389" width="0.0237%" height="15" fill="rgb(213,55,15)" fg:x="2170" fg:w="23"/><text x="2.4889%" y="399.50"></text></g><g><title>binary_to_types`binary_type_inference::analysis::reaching_definitions::apply_return (43 samples, 0.04%)</title><rect x="2.2286%" y="437" width="0.0444%" height="15" fill="rgb(209,9,3)" fg:x="2160" fg:w="43"/><text x="2.4786%" y="447.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::forward_interprocedural_fixpoint::GeneralizedContext&lt;T&gt; as cwe_checker_lib::analysis::fixpoint::Context&gt;::update_edge (883 samples, 0.91%)</title><rect x="1.3722%" y="453" width="0.9110%" height="15" fill="rgb(230,59,30)" fg:x="1330" fg:w="883"/><text x="1.6222%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (80 samples, 0.08%)</title><rect x="2.5339%" y="325" width="0.0825%" height="15" fill="rgb(209,121,21)" fg:x="2456" fg:w="80"/><text x="2.7839%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (107 samples, 0.11%)</title><rect x="2.5164%" y="357" width="0.1104%" height="15" fill="rgb(220,109,13)" fg:x="2439" fg:w="107"/><text x="2.7664%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (102 samples, 0.11%)</title><rect x="2.5216%" y="341" width="0.1052%" height="15" fill="rgb(232,18,1)" fg:x="2444" fg:w="102"/><text x="2.7716%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.01%)</title><rect x="2.6165%" y="325" width="0.0103%" height="15" fill="rgb(215,41,42)" fg:x="2536" fg:w="10"/><text x="2.8665%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (116 samples, 0.12%)</title><rect x="2.5133%" y="373" width="0.1197%" height="15" fill="rgb(224,123,36)" fg:x="2436" fg:w="116"/><text x="2.7633%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (248 samples, 0.26%)</title><rect x="2.3864%" y="389" width="0.2559%" height="15" fill="rgb(240,125,3)" fg:x="2313" fg:w="248"/><text x="2.6364%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.01%)</title><rect x="2.6505%" y="357" width="0.0113%" height="15" fill="rgb(205,98,50)" fg:x="2569" fg:w="11"/><text x="2.9005%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (26 samples, 0.03%)</title><rect x="2.6691%" y="341" width="0.0268%" height="15" fill="rgb(205,185,37)" fg:x="2587" fg:w="26"/><text x="2.9191%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (61 samples, 0.06%)</title><rect x="2.6423%" y="389" width="0.0629%" height="15" fill="rgb(238,207,15)" fg:x="2561" fg:w="61"/><text x="2.8923%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (60 samples, 0.06%)</title><rect x="2.6433%" y="373" width="0.0619%" height="15" fill="rgb(213,199,42)" fg:x="2562" fg:w="60"/><text x="2.8933%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (42 samples, 0.04%)</title><rect x="2.6619%" y="357" width="0.0433%" height="15" fill="rgb(235,201,11)" fg:x="2580" fg:w="42"/><text x="2.9119%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.03%)</title><rect x="2.7135%" y="373" width="0.0258%" height="15" fill="rgb(207,46,11)" fg:x="2630" fg:w="25"/><text x="2.9635%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.02%)</title><rect x="2.7166%" y="357" width="0.0227%" height="15" fill="rgb(241,35,35)" fg:x="2633" fg:w="22"/><text x="2.9666%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.01%)</title><rect x="2.7279%" y="341" width="0.0113%" height="15" fill="rgb(243,32,47)" fg:x="2644" fg:w="11"/><text x="2.9779%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.03%)</title><rect x="2.7104%" y="389" width="0.0299%" height="15" fill="rgb(247,202,23)" fg:x="2627" fg:w="29"/><text x="2.9604%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (432 samples, 0.45%)</title><rect x="2.3193%" y="405" width="0.4457%" height="15" fill="rgb(219,102,11)" fg:x="2248" fg:w="432"/><text x="2.5693%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.02%)</title><rect x="2.7424%" y="389" width="0.0227%" height="15" fill="rgb(243,110,44)" fg:x="2658" fg:w="22"/><text x="2.9924%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (476 samples, 0.49%)</title><rect x="2.2905%" y="421" width="0.4911%" height="15" fill="rgb(222,74,54)" fg:x="2220" fg:w="476"/><text x="2.5405%" y="431.50"></text></g><g><title>binary_to_types`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (487 samples, 0.50%)</title><rect x="2.2832%" y="453" width="0.5025%" height="15" fill="rgb(216,99,12)" fg:x="2213" fg:w="487"/><text x="2.5332%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (486 samples, 0.50%)</title><rect x="2.2843%" y="437" width="0.5014%" height="15" fill="rgb(226,22,26)" fg:x="2214" fg:w="486"/><text x="2.5343%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.03%)</title><rect x="2.8218%" y="389" width="0.0279%" height="15" fill="rgb(217,163,10)" fg:x="2735" fg:w="27"/><text x="3.0718%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.02%)</title><rect x="2.8331%" y="373" width="0.0165%" height="15" fill="rgb(213,25,53)" fg:x="2746" fg:w="16"/><text x="3.0831%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (57 samples, 0.06%)</title><rect x="2.9095%" y="357" width="0.0588%" height="15" fill="rgb(252,105,26)" fg:x="2820" fg:w="57"/><text x="3.1595%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (18 samples, 0.02%)</title><rect x="2.9683%" y="357" width="0.0186%" height="15" fill="rgb(220,39,43)" fg:x="2877" fg:w="18"/><text x="3.2183%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (134 samples, 0.14%)</title><rect x="2.8672%" y="373" width="0.1383%" height="15" fill="rgb(229,68,48)" fg:x="2779" fg:w="134"/><text x="3.1172%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (152 samples, 0.16%)</title><rect x="2.8497%" y="389" width="0.1568%" height="15" fill="rgb(252,8,32)" fg:x="2762" fg:w="152"/><text x="3.0997%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (230 samples, 0.24%)</title><rect x="2.7960%" y="405" width="0.2373%" height="15" fill="rgb(223,20,43)" fg:x="2710" fg:w="230"/><text x="3.0460%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.01%)</title><rect x="3.0209%" y="389" width="0.0124%" height="15" fill="rgb(229,81,49)" fg:x="2928" fg:w="12"/><text x="3.2709%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.02%)</title><rect x="3.0385%" y="389" width="0.0206%" height="15" fill="rgb(236,28,36)" fg:x="2945" fg:w="20"/><text x="3.2885%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 0.02%)</title><rect x="3.0405%" y="373" width="0.0186%" height="15" fill="rgb(249,185,26)" fg:x="2947" fg:w="18"/><text x="3.2905%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (25 samples, 0.03%)</title><rect x="3.0343%" y="405" width="0.0258%" height="15" fill="rgb(249,174,33)" fg:x="2941" fg:w="25"/><text x="3.2843%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.02%)</title><rect x="3.0612%" y="405" width="0.0227%" height="15" fill="rgb(233,201,37)" fg:x="2967" fg:w="22"/><text x="3.3112%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.01%)</title><rect x="3.0839%" y="405" width="0.0124%" height="15" fill="rgb(221,78,26)" fg:x="2989" fg:w="12"/><text x="3.3339%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.01%)</title><rect x="3.0839%" y="389" width="0.0124%" height="15" fill="rgb(250,127,30)" fg:x="2989" fg:w="12"/><text x="3.3339%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.01%)</title><rect x="3.1014%" y="405" width="0.0113%" height="15" fill="rgb(230,49,44)" fg:x="3006" fg:w="11"/><text x="3.3514%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (319 samples, 0.33%)</title><rect x="2.7867%" y="421" width="0.3291%" height="15" fill="rgb(229,67,23)" fg:x="2701" fg:w="319"/><text x="3.0367%" y="431.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (325 samples, 0.34%)</title><rect x="2.7867%" y="437" width="0.3353%" height="15" fill="rgb(249,83,47)" fg:x="2701" fg:w="325"/><text x="3.0367%" y="447.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (327 samples, 0.34%)</title><rect x="2.7857%" y="453" width="0.3374%" height="15" fill="rgb(215,43,3)" fg:x="2700" fg:w="327"/><text x="3.0357%" y="463.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (14 samples, 0.01%)</title><rect x="3.1272%" y="453" width="0.0144%" height="15" fill="rgb(238,154,13)" fg:x="3031" fg:w="14"/><text x="3.3772%" y="463.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (11 samples, 0.01%)</title><rect x="3.1303%" y="437" width="0.0113%" height="15" fill="rgb(219,56,2)" fg:x="3034" fg:w="11"/><text x="3.3803%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="3.1468%" y="421" width="0.0124%" height="15" fill="rgb(233,0,4)" fg:x="3050" fg:w="12"/><text x="3.3968%" y="431.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (16 samples, 0.02%)</title><rect x="3.1468%" y="453" width="0.0165%" height="15" fill="rgb(235,30,7)" fg:x="3050" fg:w="16"/><text x="3.3968%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.02%)</title><rect x="3.1468%" y="437" width="0.0165%" height="15" fill="rgb(250,79,13)" fg:x="3050" fg:w="16"/><text x="3.3968%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::new (12 samples, 0.01%)</title><rect x="3.1633%" y="453" width="0.0124%" height="15" fill="rgb(211,146,34)" fg:x="3066" fg:w="12"/><text x="3.4133%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.02%)</title><rect x="3.1757%" y="405" width="0.0165%" height="15" fill="rgb(228,22,38)" fg:x="3078" fg:w="16"/><text x="3.4257%" y="415.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::set_node_value (17 samples, 0.02%)</title><rect x="3.1757%" y="453" width="0.0175%" height="15" fill="rgb(235,168,5)" fg:x="3078" fg:w="17"/><text x="3.4257%" y="463.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (17 samples, 0.02%)</title><rect x="3.1757%" y="437" width="0.0175%" height="15" fill="rgb(221,155,16)" fg:x="3078" fg:w="17"/><text x="3.4257%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.02%)</title><rect x="3.1757%" y="421" width="0.0175%" height="15" fill="rgb(215,215,53)" fg:x="3078" fg:w="17"/><text x="3.4257%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::node_context::create_default_context (3,080 samples, 3.18%)</title><rect x="0.0268%" y="485" width="3.1777%" height="15" fill="rgb(223,4,10)" fg:x="26" fg:w="3080"/><text x="0.2768%" y="495.50">bin..</text></g><g><title>binary_to_types`binary_type_inference::node_context::register_map::run_analysis (2,233 samples, 2.30%)</title><rect x="0.9007%" y="469" width="2.3039%" height="15" fill="rgb(234,103,6)" fg:x="873" fg:w="2233"/><text x="1.1507%" y="479.50">b..</text></g><g><title>binary_to_types`cwe_checker_lib::analysis::function_signature::state::State::set_read_flag_for_input_ids_of_expression (13 samples, 0.01%)</title><rect x="3.2242%" y="453" width="0.0134%" height="15" fill="rgb(227,97,0)" fg:x="3125" fg:w="13"/><text x="3.4742%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (12 samples, 0.01%)</title><rect x="3.2448%" y="389" width="0.0124%" height="15" fill="rgb(234,150,53)" fg:x="3145" fg:w="12"/><text x="3.4948%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (30 samples, 0.03%)</title><rect x="3.2376%" y="405" width="0.0310%" height="15" fill="rgb(228,201,54)" fg:x="3138" fg:w="30"/><text x="3.4876%" y="415.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as core::ops::deref::DerefMut&gt;::deref_mut (34 samples, 0.04%)</title><rect x="3.2376%" y="437" width="0.0351%" height="15" fill="rgb(222,22,37)" fg:x="3138" fg:w="34"/><text x="3.4876%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (34 samples, 0.04%)</title><rect x="3.2376%" y="421" width="0.0351%" height="15" fill="rgb(237,53,32)" fg:x="3138" fg:w="34"/><text x="3.4876%" y="431.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::function_signature::state::State::set_register (35 samples, 0.04%)</title><rect x="3.2376%" y="453" width="0.0361%" height="15" fill="rgb(233,25,53)" fg:x="3138" fg:w="35"/><text x="3.4876%" y="463.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::function_signature::context::Context as cwe_checker_lib::analysis::forward_interprocedural_fixpoint::Context&gt;::update_def (58 samples, 0.06%)</title><rect x="3.2149%" y="469" width="0.0598%" height="15" fill="rgb(210,40,34)" fg:x="3116" fg:w="58"/><text x="3.4649%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="3.2923%" y="405" width="0.0134%" height="15" fill="rgb(241,220,44)" fg:x="3191" fg:w="13"/><text x="3.5423%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.03%)</title><rect x="3.2912%" y="421" width="0.0279%" height="15" fill="rgb(235,28,35)" fg:x="3190" fg:w="27"/><text x="3.5412%" y="431.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="3.2861%" y="469" width="0.0340%" height="15" fill="rgb(210,56,17)" fg:x="3185" fg:w="33"/><text x="3.5361%" y="479.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::analysis::function_signature::state::State&gt; (28 samples, 0.03%)</title><rect x="3.2912%" y="453" width="0.0289%" height="15" fill="rgb(224,130,29)" fg:x="3190" fg:w="28"/><text x="3.5412%" y="463.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (28 samples, 0.03%)</title><rect x="3.2912%" y="437" width="0.0289%" height="15" fill="rgb(235,212,8)" fg:x="3190" fg:w="28"/><text x="3.5412%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.01%)</title><rect x="3.3294%" y="421" width="0.0103%" height="15" fill="rgb(223,33,50)" fg:x="3227" fg:w="10"/><text x="3.5794%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="3.3232%" y="437" width="0.0196%" height="15" fill="rgb(219,149,13)" fg:x="3221" fg:w="19"/><text x="3.5732%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.04%)</title><rect x="3.3222%" y="453" width="0.0382%" height="15" fill="rgb(250,156,29)" fg:x="3220" fg:w="37"/><text x="3.5722%" y="463.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (38 samples, 0.04%)</title><rect x="3.3222%" y="469" width="0.0392%" height="15" fill="rgb(216,193,19)" fg:x="3220" fg:w="38"/><text x="3.5722%" y="479.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::function_signature::compute_function_signatures (182 samples, 0.19%)</title><rect x="3.2046%" y="485" width="0.1878%" height="15" fill="rgb(216,135,14)" fg:x="3106" fg:w="182"/><text x="3.4546%" y="495.50"></text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::get_simplified_constraints (3,289 samples, 3.39%)</title><rect x="0.0000%" y="501" width="3.3934%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="3289"/><text x="0.2500%" y="511.50">bin..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (52 samples, 0.05%)</title><rect x="3.5100%" y="389" width="0.0537%" height="15" fill="rgb(233,42,35)" fg:x="3402" fg:w="52"/><text x="3.7600%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (49 samples, 0.05%)</title><rect x="3.5131%" y="373" width="0.0506%" height="15" fill="rgb(231,13,6)" fg:x="3405" fg:w="49"/><text x="3.7631%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (42 samples, 0.04%)</title><rect x="3.5203%" y="357" width="0.0433%" height="15" fill="rgb(207,181,40)" fg:x="3412" fg:w="42"/><text x="3.7703%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (56 samples, 0.06%)</title><rect x="3.5069%" y="405" width="0.0578%" height="15" fill="rgb(254,173,49)" fg:x="3399" fg:w="56"/><text x="3.7569%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (99 samples, 0.10%)</title><rect x="3.4656%" y="421" width="0.1021%" height="15" fill="rgb(221,1,38)" fg:x="3359" fg:w="99"/><text x="3.7156%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="3.5677%" y="421" width="0.0144%" height="15" fill="rgb(206,124,46)" fg:x="3458" fg:w="14"/><text x="3.8177%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.01%)</title><rect x="3.5894%" y="405" width="0.0103%" height="15" fill="rgb(249,21,11)" fg:x="3479" fg:w="10"/><text x="3.8394%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.01%)</title><rect x="3.5863%" y="421" width="0.0144%" height="15" fill="rgb(222,201,40)" fg:x="3476" fg:w="14"/><text x="3.8363%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (166 samples, 0.17%)</title><rect x="3.4367%" y="437" width="0.1713%" height="15" fill="rgb(235,61,29)" fg:x="3331" fg:w="166"/><text x="3.6867%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (190 samples, 0.20%)</title><rect x="3.4212%" y="453" width="0.1960%" height="15" fill="rgb(219,207,3)" fg:x="3316" fg:w="190"/><text x="3.6712%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (216 samples, 0.22%)</title><rect x="3.3975%" y="469" width="0.2229%" height="15" fill="rgb(222,56,46)" fg:x="3293" fg:w="216"/><text x="3.6475%" y="479.50"></text></g><g><title>binary_to_types`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (224 samples, 0.23%)</title><rect x="3.3934%" y="485" width="0.2311%" height="15" fill="rgb(239,76,54)" fg:x="3289" fg:w="224"/><text x="3.6434%" y="495.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (33 samples, 0.03%)</title><rect x="3.6936%" y="437" width="0.0340%" height="15" fill="rgb(231,124,27)" fg:x="3580" fg:w="33"/><text x="3.9436%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (67 samples, 0.07%)</title><rect x="3.7277%" y="437" width="0.0691%" height="15" fill="rgb(249,195,6)" fg:x="3613" fg:w="67"/><text x="3.9777%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (28 samples, 0.03%)</title><rect x="3.7679%" y="421" width="0.0289%" height="15" fill="rgb(237,174,47)" fg:x="3652" fg:w="28"/><text x="4.0179%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (23 samples, 0.02%)</title><rect x="3.7731%" y="405" width="0.0237%" height="15" fill="rgb(206,201,31)" fg:x="3657" fg:w="23"/><text x="4.0231%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.01%)</title><rect x="3.8143%" y="421" width="0.0144%" height="15" fill="rgb(231,57,52)" fg:x="3697" fg:w="14"/><text x="4.0643%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (11 samples, 0.01%)</title><rect x="4.0155%" y="405" width="0.0113%" height="15" fill="rgb(248,177,22)" fg:x="3892" fg:w="11"/><text x="4.2655%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (141 samples, 0.15%)</title><rect x="4.0269%" y="405" width="0.1455%" height="15" fill="rgb(215,211,37)" fg:x="3903" fg:w="141"/><text x="4.2769%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (20 samples, 0.02%)</title><rect x="4.1723%" y="405" width="0.0206%" height="15" fill="rgb(241,128,51)" fg:x="4044" fg:w="20"/><text x="4.4223%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (16 samples, 0.02%)</title><rect x="4.1930%" y="405" width="0.0165%" height="15" fill="rgb(227,165,31)" fg:x="4064" fg:w="16"/><text x="4.4430%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (36 samples, 0.04%)</title><rect x="4.2095%" y="405" width="0.0371%" height="15" fill="rgb(228,167,24)" fg:x="4080" fg:w="36"/><text x="4.4595%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.02%)</title><rect x="4.2281%" y="389" width="0.0186%" height="15" fill="rgb(228,143,12)" fg:x="4098" fg:w="18"/><text x="4.4781%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (414 samples, 0.43%)</title><rect x="3.8288%" y="421" width="0.4271%" height="15" fill="rgb(249,149,8)" fg:x="3711" fg:w="414"/><text x="4.0788%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (450 samples, 0.46%)</title><rect x="3.7968%" y="437" width="0.4643%" height="15" fill="rgb(243,35,44)" fg:x="3680" fg:w="450"/><text x="4.0468%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (12 samples, 0.01%)</title><rect x="4.2796%" y="437" width="0.0124%" height="15" fill="rgb(246,89,9)" fg:x="4148" fg:w="12"/><text x="4.5296%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (617 samples, 0.64%)</title><rect x="3.6637%" y="453" width="0.6366%" height="15" fill="rgb(233,213,13)" fg:x="3551" fg:w="617"/><text x="3.9137%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (86 samples, 0.09%)</title><rect x="4.3385%" y="421" width="0.0887%" height="15" fill="rgb(233,141,41)" fg:x="4205" fg:w="86"/><text x="4.5885%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (47 samples, 0.05%)</title><rect x="4.3787%" y="405" width="0.0485%" height="15" fill="rgb(239,167,4)" fg:x="4244" fg:w="47"/><text x="4.6287%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (44 samples, 0.05%)</title><rect x="4.3818%" y="389" width="0.0454%" height="15" fill="rgb(209,217,16)" fg:x="4247" fg:w="44"/><text x="4.6318%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (88 samples, 0.09%)</title><rect x="4.3374%" y="437" width="0.0908%" height="15" fill="rgb(219,88,35)" fg:x="4204" fg:w="88"/><text x="4.5874%" y="447.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (125 samples, 0.13%)</title><rect x="4.3023%" y="453" width="0.1290%" height="15" fill="rgb(220,193,23)" fg:x="4170" fg:w="125"/><text x="4.5523%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.02%)</title><rect x="4.4623%" y="437" width="0.0186%" height="15" fill="rgb(230,90,52)" fg:x="4325" fg:w="18"/><text x="4.7123%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (44 samples, 0.05%)</title><rect x="4.4365%" y="453" width="0.0454%" height="15" fill="rgb(252,106,19)" fg:x="4300" fg:w="44"/><text x="4.6865%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (28 samples, 0.03%)</title><rect x="4.4891%" y="421" width="0.0289%" height="15" fill="rgb(206,74,20)" fg:x="4351" fg:w="28"/><text x="4.7391%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (28 samples, 0.03%)</title><rect x="4.4891%" y="405" width="0.0289%" height="15" fill="rgb(230,138,44)" fg:x="4351" fg:w="28"/><text x="4.7391%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (77 samples, 0.08%)</title><rect x="4.4819%" y="453" width="0.0794%" height="15" fill="rgb(235,182,43)" fg:x="4344" fg:w="77"/><text x="4.7319%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (73 samples, 0.08%)</title><rect x="4.4860%" y="437" width="0.0753%" height="15" fill="rgb(242,16,51)" fg:x="4348" fg:w="73"/><text x="4.7360%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (35 samples, 0.04%)</title><rect x="4.5252%" y="421" width="0.0361%" height="15" fill="rgb(248,9,4)" fg:x="4386" fg:w="35"/><text x="4.7752%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`madvise (35 samples, 0.04%)</title><rect x="4.5252%" y="405" width="0.0361%" height="15" fill="rgb(210,31,22)" fg:x="4386" fg:w="35"/><text x="4.7752%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.01%)</title><rect x="4.5613%" y="453" width="0.0134%" height="15" fill="rgb(239,54,39)" fg:x="4421" fg:w="13"/><text x="4.8113%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.01%)</title><rect x="4.5747%" y="453" width="0.0124%" height="15" fill="rgb(230,99,41)" fg:x="4434" fg:w="12"/><text x="4.8247%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (938 samples, 0.97%)</title><rect x="3.6245%" y="469" width="0.9678%" height="15" fill="rgb(253,106,12)" fg:x="3513" fg:w="938"/><text x="3.8745%" y="479.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::intermediate_representation::def::Def&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="4.5964%" y="389" width="0.0186%" height="15" fill="rgb(213,46,41)" fg:x="4455" fg:w="18"/><text x="4.8464%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="4.5964%" y="437" width="0.0320%" height="15" fill="rgb(215,133,35)" fg:x="4455" fg:w="31"/><text x="4.8464%" y="447.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::sub::Sub&gt; (31 samples, 0.03%)</title><rect x="4.5964%" y="421" width="0.0320%" height="15" fill="rgb(213,28,5)" fg:x="4455" fg:w="31"/><text x="4.8464%" y="431.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::intermediate_representation::blk::Blk&gt;&gt; (31 samples, 0.03%)</title><rect x="4.5964%" y="405" width="0.0320%" height="15" fill="rgb(215,77,49)" fg:x="4455" fg:w="31"/><text x="4.8464%" y="415.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::project::Project&gt; (32 samples, 0.03%)</title><rect x="4.5964%" y="469" width="0.0330%" height="15" fill="rgb(248,100,22)" fg:x="4455" fg:w="32"/><text x="4.8464%" y="479.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::program::Program&gt; (32 samples, 0.03%)</title><rect x="4.5964%" y="453" width="0.0330%" height="15" fill="rgb(208,67,9)" fg:x="4455" fg:w="32"/><text x="4.8464%" y="463.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (987 samples, 1.02%)</title><rect x="3.6245%" y="485" width="1.0183%" height="15" fill="rgb(219,133,21)" fg:x="3513" fg:w="987"/><text x="3.8745%" y="495.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::graph::GraphBuilder::add_block (11 samples, 0.01%)</title><rect x="4.6490%" y="453" width="0.0113%" height="15" fill="rgb(246,46,29)" fg:x="4506" fg:w="11"/><text x="4.8990%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::graph_from_project (27 samples, 0.03%)</title><rect x="4.6449%" y="485" width="0.0279%" height="15" fill="rgb(246,185,52)" fg:x="4502" fg:w="27"/><text x="4.8949%" y="495.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::graph::get_program_cfg (27 samples, 0.03%)</title><rect x="4.6449%" y="469" width="0.0279%" height="15" fill="rgb(252,136,11)" fg:x="4502" fg:w="27"/><text x="4.8949%" y="479.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::intermediate_representation::expression::Expression as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="4.6954%" y="389" width="0.0113%" height="15" fill="rgb(219,138,53)" fg:x="4551" fg:w="11"/><text x="4.9454%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (31 samples, 0.03%)</title><rect x="4.6789%" y="437" width="0.0320%" height="15" fill="rgb(211,51,23)" fg:x="4535" fg:w="31"/><text x="4.9289%" y="447.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;T&gt; as core::clone::Clone&gt;::clone (30 samples, 0.03%)</title><rect x="4.6800%" y="421" width="0.0310%" height="15" fill="rgb(247,221,28)" fg:x="4536" fg:w="30"/><text x="4.9300%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 0.03%)</title><rect x="4.6820%" y="405" width="0.0289%" height="15" fill="rgb(251,222,45)" fg:x="4538" fg:w="28"/><text x="4.9320%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (36 samples, 0.04%)</title><rect x="4.6789%" y="469" width="0.0371%" height="15" fill="rgb(217,162,53)" fg:x="4535" fg:w="36"/><text x="4.9289%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (36 samples, 0.04%)</title><rect x="4.6789%" y="453" width="0.0371%" height="15" fill="rgb(229,93,14)" fg:x="4535" fg:w="36"/><text x="4.9289%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (19 samples, 0.02%)</title><rect x="4.7254%" y="373" width="0.0196%" height="15" fill="rgb(209,67,49)" fg:x="4580" fg:w="19"/><text x="4.9754%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="4.7450%" y="373" width="0.0113%" height="15" fill="rgb(213,87,29)" fg:x="4599" fg:w="11"/><text x="4.9950%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.01%)</title><rect x="4.7450%" y="357" width="0.0113%" height="15" fill="rgb(205,151,52)" fg:x="4599" fg:w="11"/><text x="4.9950%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (39 samples, 0.04%)</title><rect x="4.7223%" y="389" width="0.0402%" height="15" fill="rgb(253,215,39)" fg:x="4577" fg:w="39"/><text x="4.9723%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (50 samples, 0.05%)</title><rect x="4.7192%" y="405" width="0.0516%" height="15" fill="rgb(221,220,41)" fg:x="4574" fg:w="50"/><text x="4.9692%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (51 samples, 0.05%)</title><rect x="4.7192%" y="421" width="0.0526%" height="15" fill="rgb(218,133,21)" fg:x="4574" fg:w="51"/><text x="4.9692%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="4.7728%" y="421" width="0.0124%" height="15" fill="rgb(221,193,43)" fg:x="4626" fg:w="12"/><text x="5.0228%" y="431.50"></text></g><g><title>binary_to_types`core::option::Option&lt;&amp;T&gt;::cloned (12 samples, 0.01%)</title><rect x="4.7996%" y="389" width="0.0124%" height="15" fill="rgb(240,128,52)" fg:x="4652" fg:w="12"/><text x="5.0496%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="4.7996%" y="373" width="0.0124%" height="15" fill="rgb(253,114,12)" fg:x="4652" fg:w="12"/><text x="5.0496%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 0.02%)</title><rect x="4.7893%" y="405" width="0.0248%" height="15" fill="rgb(215,223,47)" fg:x="4642" fg:w="24"/><text x="5.0393%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.01%)</title><rect x="4.8244%" y="405" width="0.0113%" height="15" fill="rgb(248,225,23)" fg:x="4676" fg:w="11"/><text x="5.0744%" y="415.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::analysis::reaching_definitions::TermSet as cwe_checker_lib::abstract_domain::AbstractDomain&gt;::merge (46 samples, 0.05%)</title><rect x="4.7893%" y="421" width="0.0475%" height="15" fill="rgb(250,108,0)" fg:x="4642" fg:w="46"/><text x="5.0393%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.01%)</title><rect x="4.8543%" y="421" width="0.0113%" height="15" fill="rgb(228,208,7)" fg:x="4705" fg:w="11"/><text x="5.1043%" y="431.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as cwe_checker_lib::abstract_domain::AbstractDomain&gt;::merge (146 samples, 0.15%)</title><rect x="4.7181%" y="437" width="0.1506%" height="15" fill="rgb(244,45,10)" fg:x="4573" fg:w="146"/><text x="4.9681%" y="447.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (28 samples, 0.03%)</title><rect x="4.8873%" y="389" width="0.0289%" height="15" fill="rgb(207,125,25)" fg:x="4737" fg:w="28"/><text x="5.1373%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (23 samples, 0.02%)</title><rect x="4.9162%" y="389" width="0.0237%" height="15" fill="rgb(210,195,18)" fg:x="4765" fg:w="23"/><text x="5.1662%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (36 samples, 0.04%)</title><rect x="4.9503%" y="373" width="0.0371%" height="15" fill="rgb(249,80,12)" fg:x="4798" fg:w="36"/><text x="5.2003%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (25 samples, 0.03%)</title><rect x="4.9874%" y="373" width="0.0258%" height="15" fill="rgb(221,65,9)" fg:x="4834" fg:w="25"/><text x="5.2374%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.01%)</title><rect x="5.0019%" y="357" width="0.0113%" height="15" fill="rgb(235,49,36)" fg:x="4848" fg:w="11"/><text x="5.2519%" y="367.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (112 samples, 0.12%)</title><rect x="4.9420%" y="389" width="0.1156%" height="15" fill="rgb(225,32,20)" fg:x="4790" fg:w="112"/><text x="5.1920%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (43 samples, 0.04%)</title><rect x="5.0132%" y="373" width="0.0444%" height="15" fill="rgb(215,141,46)" fg:x="4859" fg:w="43"/><text x="5.2632%" y="383.50"></text></g><g><title>binary_to_types`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15 samples, 0.02%)</title><rect x="5.0576%" y="389" width="0.0155%" height="15" fill="rgb(250,160,47)" fg:x="4902" fg:w="15"/><text x="5.3076%" y="399.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (239 samples, 0.25%)</title><rect x="4.8688%" y="405" width="0.2466%" height="15" fill="rgb(216,222,40)" fg:x="4719" fg:w="239"/><text x="5.1188%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (40 samples, 0.04%)</title><rect x="5.0741%" y="389" width="0.0413%" height="15" fill="rgb(234,217,39)" fg:x="4918" fg:w="40"/><text x="5.3241%" y="399.50"></text></g><g><title>binary_to_types`core::cmp::PartialOrd::le (249 samples, 0.26%)</title><rect x="4.8688%" y="437" width="0.2569%" height="15" fill="rgb(207,178,40)" fg:x="4719" fg:w="249"/><text x="5.1188%" y="447.50"></text></g><g><title>binary_to_types`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (249 samples, 0.26%)</title><rect x="4.8688%" y="421" width="0.2569%" height="15" fill="rgb(221,136,13)" fg:x="4719" fg:w="249"/><text x="5.1188%" y="431.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::forward_interprocedural_fixpoint::GeneralizedContext&lt;T&gt; as cwe_checker_lib::analysis::fixpoint::Context&gt;::merge (399 samples, 0.41%)</title><rect x="4.7181%" y="469" width="0.4117%" height="15" fill="rgb(249,199,10)" fg:x="4573" fg:w="399"/><text x="4.9681%" y="479.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::analysis::reaching_definitions::Context as cwe_checker_lib::analysis::forward_interprocedural_fixpoint::Context&gt;::merge (399 samples, 0.41%)</title><rect x="4.7181%" y="453" width="0.4117%" height="15" fill="rgb(249,222,13)" fg:x="4573" fg:w="399"/><text x="4.9681%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (12 samples, 0.01%)</title><rect x="5.1339%" y="389" width="0.0124%" height="15" fill="rgb(244,185,38)" fg:x="4976" fg:w="12"/><text x="5.3839%" y="399.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::analysis::reaching_definitions::Context as cwe_checker_lib::analysis::forward_interprocedural_fixpoint::Context&gt;::update_call_stub (16 samples, 0.02%)</title><rect x="5.1319%" y="453" width="0.0165%" height="15" fill="rgb(236,202,9)" fg:x="4974" fg:w="16"/><text x="5.3819%" y="463.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as core::ops::deref::DerefMut&gt;::deref_mut (16 samples, 0.02%)</title><rect x="5.1319%" y="437" width="0.0165%" height="15" fill="rgb(250,229,37)" fg:x="4974" fg:w="16"/><text x="5.3819%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (16 samples, 0.02%)</title><rect x="5.1319%" y="421" width="0.0165%" height="15" fill="rgb(206,174,23)" fg:x="4974" fg:w="16"/><text x="5.3819%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (15 samples, 0.02%)</title><rect x="5.1329%" y="405" width="0.0155%" height="15" fill="rgb(211,33,43)" fg:x="4975" fg:w="15"/><text x="5.3829%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (70 samples, 0.07%)</title><rect x="5.1793%" y="405" width="0.0722%" height="15" fill="rgb(245,58,50)" fg:x="5020" fg:w="70"/><text x="5.4293%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (25 samples, 0.03%)</title><rect x="5.2257%" y="389" width="0.0258%" height="15" fill="rgb(244,68,36)" fg:x="5065" fg:w="25"/><text x="5.4757%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (21 samples, 0.02%)</title><rect x="5.2299%" y="373" width="0.0217%" height="15" fill="rgb(232,229,15)" fg:x="5069" fg:w="21"/><text x="5.4799%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (34 samples, 0.04%)</title><rect x="5.3011%" y="373" width="0.0351%" height="15" fill="rgb(254,30,23)" fg:x="5138" fg:w="34"/><text x="5.5511%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (102 samples, 0.11%)</title><rect x="5.2515%" y="405" width="0.1052%" height="15" fill="rgb(235,160,14)" fg:x="5090" fg:w="102"/><text x="5.5015%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (86 samples, 0.09%)</title><rect x="5.2680%" y="389" width="0.0887%" height="15" fill="rgb(212,155,44)" fg:x="5106" fg:w="86"/><text x="5.5180%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (20 samples, 0.02%)</title><rect x="5.3361%" y="373" width="0.0206%" height="15" fill="rgb(226,2,50)" fg:x="5172" fg:w="20"/><text x="5.5861%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (215 samples, 0.22%)</title><rect x="5.1576%" y="421" width="0.2218%" height="15" fill="rgb(234,177,6)" fg:x="4999" fg:w="215"/><text x="5.4076%" y="431.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (37 samples, 0.04%)</title><rect x="5.3826%" y="421" width="0.0382%" height="15" fill="rgb(217,24,9)" fg:x="5217" fg:w="37"/><text x="5.6326%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 0.02%)</title><rect x="5.4022%" y="405" width="0.0186%" height="15" fill="rgb(220,13,46)" fg:x="5236" fg:w="18"/><text x="5.6522%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.01%)</title><rect x="5.4084%" y="389" width="0.0124%" height="15" fill="rgb(239,221,27)" fg:x="5242" fg:w="12"/><text x="5.6584%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.02%)</title><rect x="5.4445%" y="405" width="0.0155%" height="15" fill="rgb(222,198,25)" fg:x="5277" fg:w="15"/><text x="5.6945%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.04%)</title><rect x="5.4228%" y="421" width="0.0392%" height="15" fill="rgb(211,99,13)" fg:x="5256" fg:w="38"/><text x="5.6728%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.02%)</title><rect x="5.4744%" y="421" width="0.0155%" height="15" fill="rgb(232,111,31)" fg:x="5306" fg:w="15"/><text x="5.7244%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (330 samples, 0.34%)</title><rect x="5.1515%" y="437" width="0.3405%" height="15" fill="rgb(245,82,37)" fg:x="4993" fg:w="330"/><text x="5.4015%" y="447.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (361 samples, 0.37%)</title><rect x="5.1515%" y="453" width="0.3725%" height="15" fill="rgb(227,149,46)" fg:x="4993" fg:w="361"/><text x="5.4015%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (10 samples, 0.01%)</title><rect x="5.6529%" y="357" width="0.0103%" height="15" fill="rgb(218,36,50)" fg:x="5479" fg:w="10"/><text x="5.9029%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (47 samples, 0.05%)</title><rect x="5.7003%" y="309" width="0.0485%" height="15" fill="rgb(226,80,48)" fg:x="5525" fg:w="47"/><text x="5.9503%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (99 samples, 0.10%)</title><rect x="5.6776%" y="341" width="0.1021%" height="15" fill="rgb(238,224,15)" fg:x="5503" fg:w="99"/><text x="5.9276%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (96 samples, 0.10%)</title><rect x="5.6807%" y="325" width="0.0990%" height="15" fill="rgb(241,136,10)" fg:x="5506" fg:w="96"/><text x="5.9307%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (30 samples, 0.03%)</title><rect x="5.7488%" y="309" width="0.0310%" height="15" fill="rgb(208,32,45)" fg:x="5572" fg:w="30"/><text x="5.9988%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (114 samples, 0.12%)</title><rect x="5.6642%" y="357" width="0.1176%" height="15" fill="rgb(207,135,9)" fg:x="5490" fg:w="114"/><text x="5.9142%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (193 samples, 0.20%)</title><rect x="5.5930%" y="373" width="0.1991%" height="15" fill="rgb(206,86,44)" fg:x="5421" fg:w="193"/><text x="5.8430%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.03%)</title><rect x="5.8211%" y="325" width="0.0279%" height="15" fill="rgb(245,177,15)" fg:x="5642" fg:w="27"/><text x="6.0711%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="5.8386%" y="309" width="0.0103%" height="15" fill="rgb(206,64,50)" fg:x="5659" fg:w="10"/><text x="6.0886%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (54 samples, 0.06%)</title><rect x="5.7994%" y="357" width="0.0557%" height="15" fill="rgb(234,36,40)" fg:x="5621" fg:w="54"/><text x="6.0494%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (42 samples, 0.04%)</title><rect x="5.8118%" y="341" width="0.0433%" height="15" fill="rgb(213,64,8)" fg:x="5633" fg:w="42"/><text x="6.0618%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (67 samples, 0.07%)</title><rect x="5.7922%" y="373" width="0.0691%" height="15" fill="rgb(210,75,36)" fg:x="5614" fg:w="67"/><text x="6.0422%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 0.04%)</title><rect x="5.8819%" y="357" width="0.0382%" height="15" fill="rgb(229,88,21)" fg:x="5701" fg:w="37"/><text x="6.1319%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (35 samples, 0.04%)</title><rect x="5.8840%" y="341" width="0.0361%" height="15" fill="rgb(252,204,47)" fg:x="5703" fg:w="35"/><text x="6.1340%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (23 samples, 0.02%)</title><rect x="5.8964%" y="325" width="0.0237%" height="15" fill="rgb(208,77,27)" fg:x="5715" fg:w="23"/><text x="6.1464%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (46 samples, 0.05%)</title><rect x="5.8747%" y="373" width="0.0475%" height="15" fill="rgb(221,76,26)" fg:x="5694" fg:w="46"/><text x="6.1247%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (398 samples, 0.41%)</title><rect x="5.5497%" y="389" width="0.4106%" height="15" fill="rgb(225,139,18)" fg:x="5379" fg:w="398"/><text x="5.7997%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (36 samples, 0.04%)</title><rect x="5.9232%" y="373" width="0.0371%" height="15" fill="rgb(230,137,11)" fg:x="5741" fg:w="36"/><text x="6.1732%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="5.9603%" y="389" width="0.0134%" height="15" fill="rgb(212,28,1)" fg:x="5777" fg:w="13"/><text x="6.2103%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (438 samples, 0.45%)</title><rect x="5.5415%" y="405" width="0.4519%" height="15" fill="rgb(248,164,17)" fg:x="5371" fg:w="438"/><text x="5.7915%" y="415.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as core::ops::deref::DerefMut&gt;::deref_mut (447 samples, 0.46%)</title><rect x="5.5363%" y="437" width="0.4612%" height="15" fill="rgb(222,171,42)" fg:x="5366" fg:w="447"/><text x="5.7863%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (447 samples, 0.46%)</title><rect x="5.5363%" y="421" width="0.4612%" height="15" fill="rgb(243,84,45)" fg:x="5366" fg:w="447"/><text x="5.7863%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::analysis::reaching_definitions::apply_def (468 samples, 0.48%)</title><rect x="5.5239%" y="453" width="0.4829%" height="15" fill="rgb(252,49,23)" fg:x="5354" fg:w="468"/><text x="5.7739%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (13 samples, 0.01%)</title><rect x="6.0212%" y="373" width="0.0134%" height="15" fill="rgb(215,19,7)" fg:x="5836" fg:w="13"/><text x="6.2712%" y="383.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as core::ops::deref::DerefMut&gt;::deref_mut (24 samples, 0.02%)</title><rect x="6.0171%" y="437" width="0.0248%" height="15" fill="rgb(238,81,41)" fg:x="5832" fg:w="24"/><text x="6.2671%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (24 samples, 0.02%)</title><rect x="6.0171%" y="421" width="0.0248%" height="15" fill="rgb(210,199,37)" fg:x="5832" fg:w="24"/><text x="6.2671%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (24 samples, 0.02%)</title><rect x="6.0171%" y="405" width="0.0248%" height="15" fill="rgb(244,192,49)" fg:x="5832" fg:w="24"/><text x="6.2671%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (24 samples, 0.02%)</title><rect x="6.0171%" y="389" width="0.0248%" height="15" fill="rgb(226,211,11)" fg:x="5832" fg:w="24"/><text x="6.2671%" y="399.50"></text></g><g><title>binary_to_types`binary_type_inference::analysis::reaching_definitions::apply_return (56 samples, 0.06%)</title><rect x="6.0068%" y="453" width="0.0578%" height="15" fill="rgb(236,162,54)" fg:x="5822" fg:w="56"/><text x="6.2568%" y="463.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::forward_interprocedural_fixpoint::GeneralizedContext&lt;T&gt; as cwe_checker_lib::analysis::fixpoint::Context&gt;::update_edge (918 samples, 0.95%)</title><rect x="5.1298%" y="469" width="0.9471%" height="15" fill="rgb(220,229,9)" fg:x="4972" fg:w="918"/><text x="5.3798%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (71 samples, 0.07%)</title><rect x="6.4814%" y="341" width="0.0733%" height="15" fill="rgb(250,87,22)" fg:x="6282" fg:w="71"/><text x="6.7314%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (111 samples, 0.11%)</title><rect x="6.4514%" y="373" width="0.1145%" height="15" fill="rgb(239,43,17)" fg:x="6253" fg:w="111"/><text x="6.7014%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (102 samples, 0.11%)</title><rect x="6.4607%" y="357" width="0.1052%" height="15" fill="rgb(231,177,25)" fg:x="6262" fg:w="102"/><text x="6.7107%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (128 samples, 0.13%)</title><rect x="6.4380%" y="389" width="0.1321%" height="15" fill="rgb(219,179,1)" fg:x="6240" fg:w="128"/><text x="6.6880%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (312 samples, 0.32%)</title><rect x="6.2544%" y="405" width="0.3219%" height="15" fill="rgb(238,219,53)" fg:x="6062" fg:w="312"/><text x="6.5044%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (21 samples, 0.02%)</title><rect x="6.6052%" y="357" width="0.0217%" height="15" fill="rgb(232,167,36)" fg:x="6402" fg:w="21"/><text x="6.8552%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (50 samples, 0.05%)</title><rect x="6.5804%" y="389" width="0.0516%" height="15" fill="rgb(244,19,51)" fg:x="6378" fg:w="50"/><text x="6.8304%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (29 samples, 0.03%)</title><rect x="6.6021%" y="373" width="0.0299%" height="15" fill="rgb(224,6,22)" fg:x="6399" fg:w="29"/><text x="6.8521%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (58 samples, 0.06%)</title><rect x="6.5763%" y="405" width="0.0598%" height="15" fill="rgb(224,145,5)" fg:x="6374" fg:w="58"/><text x="6.8263%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (37 samples, 0.04%)</title><rect x="6.6361%" y="405" width="0.0382%" height="15" fill="rgb(234,130,49)" fg:x="6432" fg:w="37"/><text x="6.8861%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32 samples, 0.03%)</title><rect x="6.6413%" y="389" width="0.0330%" height="15" fill="rgb(254,6,2)" fg:x="6437" fg:w="32"/><text x="6.8913%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (29 samples, 0.03%)</title><rect x="6.6444%" y="373" width="0.0299%" height="15" fill="rgb(208,96,46)" fg:x="6440" fg:w="29"/><text x="6.8944%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (19 samples, 0.02%)</title><rect x="6.6547%" y="357" width="0.0196%" height="15" fill="rgb(239,3,39)" fg:x="6450" fg:w="19"/><text x="6.9047%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (541 samples, 0.56%)</title><rect x="6.1450%" y="421" width="0.5582%" height="15" fill="rgb(233,210,1)" fg:x="5956" fg:w="541"/><text x="6.3950%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.03%)</title><rect x="6.6764%" y="405" width="0.0268%" height="15" fill="rgb(244,137,37)" fg:x="6471" fg:w="26"/><text x="6.9264%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="6.7032%" y="421" width="0.0124%" height="15" fill="rgb(240,136,2)" fg:x="6497" fg:w="12"/><text x="6.9532%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (599 samples, 0.62%)</title><rect x="6.1027%" y="437" width="0.6180%" height="15" fill="rgb(239,18,37)" fg:x="5915" fg:w="599"/><text x="6.3527%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (625 samples, 0.64%)</title><rect x="6.0790%" y="453" width="0.6448%" height="15" fill="rgb(218,185,22)" fg:x="5892" fg:w="625"/><text x="6.3290%" y="463.50"></text></g><g><title>binary_to_types`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (630 samples, 0.65%)</title><rect x="6.0769%" y="469" width="0.6500%" height="15" fill="rgb(225,218,4)" fg:x="5890" fg:w="630"/><text x="6.3269%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (42 samples, 0.04%)</title><rect x="6.7527%" y="405" width="0.0433%" height="15" fill="rgb(230,182,32)" fg:x="6545" fg:w="42"/><text x="7.0027%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.02%)</title><rect x="6.7723%" y="389" width="0.0237%" height="15" fill="rgb(242,56,43)" fg:x="6564" fg:w="23"/><text x="7.0223%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (19 samples, 0.02%)</title><rect x="6.7764%" y="373" width="0.0196%" height="15" fill="rgb(233,99,24)" fg:x="6568" fg:w="19"/><text x="7.0264%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (85 samples, 0.09%)</title><rect x="6.8889%" y="373" width="0.0877%" height="15" fill="rgb(234,209,42)" fg:x="6677" fg:w="85"/><text x="7.1389%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (14 samples, 0.01%)</title><rect x="6.9766%" y="373" width="0.0144%" height="15" fill="rgb(227,7,12)" fg:x="6762" fg:w="14"/><text x="7.2266%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (202 samples, 0.21%)</title><rect x="6.7960%" y="405" width="0.2084%" height="15" fill="rgb(245,203,43)" fg:x="6587" fg:w="202"/><text x="7.0460%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (180 samples, 0.19%)</title><rect x="6.8187%" y="389" width="0.1857%" height="15" fill="rgb(238,205,33)" fg:x="6609" fg:w="180"/><text x="7.0687%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (278 samples, 0.29%)</title><rect x="6.7362%" y="421" width="0.2868%" height="15" fill="rgb(231,56,7)" fg:x="6529" fg:w="278"/><text x="6.9862%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.02%)</title><rect x="7.0323%" y="405" width="0.0155%" height="15" fill="rgb(244,186,29)" fg:x="6816" fg:w="15"/><text x="7.2823%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.02%)</title><rect x="7.0323%" y="389" width="0.0155%" height="15" fill="rgb(234,111,31)" fg:x="6816" fg:w="15"/><text x="7.2823%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (22 samples, 0.02%)</title><rect x="7.0261%" y="421" width="0.0227%" height="15" fill="rgb(241,149,10)" fg:x="6810" fg:w="22"/><text x="7.2761%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.02%)</title><rect x="7.0499%" y="421" width="0.0175%" height="15" fill="rgb(249,206,44)" fg:x="6833" fg:w="17"/><text x="7.2999%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.01%)</title><rect x="7.0798%" y="421" width="0.0124%" height="15" fill="rgb(251,153,30)" fg:x="6862" fg:w="12"/><text x="7.3298%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (355 samples, 0.37%)</title><rect x="6.7290%" y="437" width="0.3663%" height="15" fill="rgb(239,152,38)" fg:x="6522" fg:w="355"/><text x="6.9790%" y="447.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (365 samples, 0.38%)</title><rect x="6.7290%" y="453" width="0.3766%" height="15" fill="rgb(249,139,47)" fg:x="6522" fg:w="365"/><text x="6.9790%" y="463.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (368 samples, 0.38%)</title><rect x="6.7269%" y="469" width="0.3797%" height="15" fill="rgb(244,64,35)" fg:x="6520" fg:w="368"/><text x="6.9769%" y="479.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (16 samples, 0.02%)</title><rect x="7.1066%" y="469" width="0.0165%" height="15" fill="rgb(216,46,15)" fg:x="6888" fg:w="16"/><text x="7.3566%" y="479.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (15 samples, 0.02%)</title><rect x="7.1076%" y="453" width="0.0155%" height="15" fill="rgb(250,74,19)" fg:x="6889" fg:w="15"/><text x="7.3576%" y="463.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (15 samples, 0.02%)</title><rect x="7.1314%" y="469" width="0.0155%" height="15" fill="rgb(249,42,33)" fg:x="6912" fg:w="15"/><text x="7.3814%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="7.1314%" y="453" width="0.0155%" height="15" fill="rgb(242,149,17)" fg:x="6912" fg:w="15"/><text x="7.3814%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::new (13 samples, 0.01%)</title><rect x="7.1479%" y="469" width="0.0134%" height="15" fill="rgb(244,29,21)" fg:x="6928" fg:w="13"/><text x="7.3979%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="7.1623%" y="437" width="0.0124%" height="15" fill="rgb(220,130,37)" fg:x="6942" fg:w="12"/><text x="7.4123%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::set_node_value (16 samples, 0.02%)</title><rect x="7.1613%" y="469" width="0.0165%" height="15" fill="rgb(211,67,2)" fg:x="6941" fg:w="16"/><text x="7.4113%" y="479.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (15 samples, 0.02%)</title><rect x="7.1623%" y="453" width="0.0155%" height="15" fill="rgb(235,68,52)" fg:x="6942" fg:w="15"/><text x="7.4123%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (10 samples, 0.01%)</title><rect x="7.1778%" y="469" width="0.0103%" height="15" fill="rgb(246,142,3)" fg:x="6957" fg:w="10"/><text x="7.4278%" y="479.50"></text></g><g><title>binary_to_types`binary_type_inference::node_context::register_map::run_analysis (2,439 samples, 2.52%)</title><rect x="4.6727%" y="485" width="2.5164%" height="15" fill="rgb(241,25,7)" fg:x="4529" fg:w="2439"/><text x="4.9227%" y="495.50">bi..</text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::infer_ctypes (6,970 samples, 7.19%)</title><rect x="0.0000%" y="517" width="7.1912%" height="15" fill="rgb(242,119,39)" fg:x="0" fg:w="6970"/><text x="0.2500%" y="527.50">binary_to_..</text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::recover_additional_shared_returns (3,681 samples, 3.80%)</title><rect x="3.3934%" y="501" width="3.7978%" height="15" fill="rgb(241,98,45)" fg:x="3289" fg:w="3681"/><text x="3.6434%" y="511.50">bina..</text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::parse_lattice_json (10 samples, 0.01%)</title><rect x="7.1953%" y="501" width="0.0103%" height="15" fill="rgb(254,28,30)" fg:x="6974" fg:w="10"/><text x="7.4453%" y="511.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::Expression::replace_input_sub_register (10 samples, 0.01%)</title><rect x="7.2201%" y="437" width="0.0103%" height="15" fill="rgb(241,142,54)" fg:x="6998" fg:w="10"/><text x="7.4701%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::Expression::cast_sub_registers_to_base_register_subpieces (14 samples, 0.01%)</title><rect x="7.2191%" y="453" width="0.0144%" height="15" fill="rgb(222,85,15)" fg:x="6997" fg:w="14"/><text x="7.4691%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::expressions::_&lt;impl core::convert::From&lt;cwe_checker_lib::pcode::expressions::Expression&gt; for cwe_checker_lib::intermediate_representation::expression::Expression&gt;::from (13 samples, 0.01%)</title><rect x="7.2438%" y="277" width="0.0134%" height="15" fill="rgb(210,85,47)" fg:x="7021" fg:w="13"/><text x="7.4938%" y="287.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::Def::into_ir_def (18 samples, 0.02%)</title><rect x="7.2438%" y="293" width="0.0186%" height="15" fill="rgb(224,206,25)" fg:x="7021" fg:w="18"/><text x="7.4938%" y="303.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 0.04%)</title><rect x="7.2376%" y="309" width="0.0361%" height="15" fill="rgb(243,201,19)" fg:x="7015" fg:w="35"/><text x="7.4876%" y="319.50"></text></g><g><title>binary_to_types`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (46 samples, 0.05%)</title><rect x="7.2356%" y="373" width="0.0475%" height="15" fill="rgb(236,59,4)" fg:x="7013" fg:w="46"/><text x="7.4856%" y="383.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (46 samples, 0.05%)</title><rect x="7.2356%" y="357" width="0.0475%" height="15" fill="rgb(254,179,45)" fg:x="7013" fg:w="46"/><text x="7.4856%" y="367.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::Blk::into_ir_blk (45 samples, 0.05%)</title><rect x="7.2366%" y="341" width="0.0464%" height="15" fill="rgb(226,14,10)" fg:x="7014" fg:w="45"/><text x="7.4866%" y="351.50"></text></g><g><title>binary_to_types`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (45 samples, 0.05%)</title><rect x="7.2366%" y="325" width="0.0464%" height="15" fill="rgb(244,27,41)" fg:x="7014" fg:w="45"/><text x="7.4866%" y="335.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::Project::into_ir_project (73 samples, 0.08%)</title><rect x="7.2087%" y="469" width="0.0753%" height="15" fill="rgb(235,35,32)" fg:x="6987" fg:w="73"/><text x="7.4587%" y="479.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::Program::into_ir_program (49 samples, 0.05%)</title><rect x="7.2335%" y="453" width="0.0506%" height="15" fill="rgb(218,68,31)" fg:x="7011" fg:w="49"/><text x="7.4835%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (49 samples, 0.05%)</title><rect x="7.2335%" y="437" width="0.0506%" height="15" fill="rgb(207,120,37)" fg:x="7011" fg:w="49"/><text x="7.4835%" y="447.50"></text></g><g><title>binary_to_types`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (49 samples, 0.05%)</title><rect x="7.2335%" y="421" width="0.0506%" height="15" fill="rgb(227,98,0)" fg:x="7011" fg:w="49"/><text x="7.4835%" y="431.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (49 samples, 0.05%)</title><rect x="7.2335%" y="405" width="0.0506%" height="15" fill="rgb(207,7,3)" fg:x="7011" fg:w="49"/><text x="7.4835%" y="415.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::_&lt;impl cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::pcode::term::Sub&gt;&gt;::into_ir_sub_term (47 samples, 0.05%)</title><rect x="7.2356%" y="389" width="0.0485%" height="15" fill="rgb(206,98,19)" fg:x="7013" fg:w="47"/><text x="7.4856%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="7.2944%" y="453" width="0.0196%" height="15" fill="rgb(217,5,26)" fg:x="7070" fg:w="19"/><text x="7.5444%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="7.2985%" y="437" width="0.0155%" height="15" fill="rgb(235,190,38)" fg:x="7074" fg:w="15"/><text x="7.5485%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.01%)</title><rect x="7.3006%" y="421" width="0.0134%" height="15" fill="rgb(247,86,24)" fg:x="7076" fg:w="13"/><text x="7.5506%" y="431.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::Project::normalize (58 samples, 0.06%)</title><rect x="7.2841%" y="469" width="0.0598%" height="15" fill="rgb(205,101,16)" fg:x="7060" fg:w="58"/><text x="7.5341%" y="479.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (11 samples, 0.01%)</title><rect x="7.3501%" y="373" width="0.0113%" height="15" fill="rgb(246,168,33)" fg:x="7124" fg:w="11"/><text x="7.6001%" y="383.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.01%)</title><rect x="7.3501%" y="357" width="0.0113%" height="15" fill="rgb(231,114,1)" fg:x="7124" fg:w="11"/><text x="7.6001%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`read (11 samples, 0.01%)</title><rect x="7.3501%" y="341" width="0.0113%" height="15" fill="rgb(207,184,53)" fg:x="7124" fg:w="11"/><text x="7.6001%" y="351.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (30 samples, 0.03%)</title><rect x="7.3449%" y="389" width="0.0310%" height="15" fill="rgb(224,95,51)" fg:x="7119" fg:w="30"/><text x="7.5949%" y="399.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="7.3614%" y="373" width="0.0144%" height="15" fill="rgb(212,188,45)" fg:x="7135" fg:w="14"/><text x="7.6114%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`read (14 samples, 0.01%)</title><rect x="7.3614%" y="357" width="0.0144%" height="15" fill="rgb(223,154,38)" fg:x="7135" fg:w="14"/><text x="7.6114%" y="367.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (34 samples, 0.04%)</title><rect x="7.3449%" y="437" width="0.0351%" height="15" fill="rgb(251,22,52)" fg:x="7119" fg:w="34"/><text x="7.5949%" y="447.50"></text></g><g><title>binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (34 samples, 0.04%)</title><rect x="7.3449%" y="421" width="0.0351%" height="15" fill="rgb(229,209,22)" fg:x="7119" fg:w="34"/><text x="7.5949%" y="431.50"></text></g><g><title>binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (34 samples, 0.04%)</title><rect x="7.3449%" y="405" width="0.0351%" height="15" fill="rgb(234,138,34)" fg:x="7119" fg:w="34"/><text x="7.5949%" y="415.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.03%)</title><rect x="7.3955%" y="277" width="0.0268%" height="15" fill="rgb(212,95,11)" fg:x="7168" fg:w="26"/><text x="7.6455%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`read (25 samples, 0.03%)</title><rect x="7.3965%" y="261" width="0.0258%" height="15" fill="rgb(240,179,47)" fg:x="7169" fg:w="25"/><text x="7.6465%" y="271.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.04%)</title><rect x="7.4429%" y="245" width="0.0444%" height="15" fill="rgb(240,163,11)" fg:x="7214" fg:w="43"/><text x="7.6929%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`read (41 samples, 0.04%)</title><rect x="7.4450%" y="229" width="0.0423%" height="15" fill="rgb(236,37,12)" fg:x="7216" fg:w="41"/><text x="7.6950%" y="239.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (97 samples, 0.10%)</title><rect x="7.3914%" y="293" width="0.1001%" height="15" fill="rgb(232,164,16)" fg:x="7164" fg:w="97"/><text x="7.6414%" y="303.50"></text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (65 samples, 0.07%)</title><rect x="7.4244%" y="277" width="0.0671%" height="15" fill="rgb(244,205,15)" fg:x="7196" fg:w="65"/><text x="7.6744%" y="287.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (64 samples, 0.07%)</title><rect x="7.4254%" y="261" width="0.0660%" height="15" fill="rgb(223,117,47)" fg:x="7197" fg:w="64"/><text x="7.6754%" y="271.50"></text></g><g><title>binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (112 samples, 0.12%)</title><rect x="7.3883%" y="325" width="0.1156%" height="15" fill="rgb(244,107,35)" fg:x="7161" fg:w="112"/><text x="7.6383%" y="335.50"></text></g><g><title>binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (112 samples, 0.12%)</title><rect x="7.3883%" y="309" width="0.1156%" height="15" fill="rgb(205,140,8)" fg:x="7161" fg:w="112"/><text x="7.6383%" y="319.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="7.4914%" y="293" width="0.0124%" height="15" fill="rgb(228,84,46)" fg:x="7261" fg:w="12"/><text x="7.7414%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`read (12 samples, 0.01%)</title><rect x="7.4914%" y="277" width="0.0124%" height="15" fill="rgb(254,188,9)" fg:x="7261" fg:w="12"/><text x="7.7414%" y="287.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (115 samples, 0.12%)</title><rect x="7.3883%" y="341" width="0.1186%" height="15" fill="rgb(206,112,54)" fg:x="7161" fg:w="115"/><text x="7.6383%" y="351.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (16 samples, 0.02%)</title><rect x="7.5069%" y="341" width="0.0165%" height="15" fill="rgb(216,84,49)" fg:x="7276" fg:w="16"/><text x="7.7569%" y="351.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (16 samples, 0.02%)</title><rect x="7.5069%" y="325" width="0.0165%" height="15" fill="rgb(214,194,35)" fg:x="7276" fg:w="16"/><text x="7.7569%" y="335.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.02%)</title><rect x="7.5069%" y="309" width="0.0165%" height="15" fill="rgb(249,28,3)" fg:x="7276" fg:w="16"/><text x="7.7569%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`read (16 samples, 0.02%)</title><rect x="7.5069%" y="293" width="0.0165%" height="15" fill="rgb(222,56,52)" fg:x="7276" fg:w="16"/><text x="7.7569%" y="303.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2,456 samples, 2.53%)</title><rect x="7.6421%" y="149" width="2.5339%" height="15" fill="rgb(245,217,50)" fg:x="7407" fg:w="2456"/><text x="7.8921%" y="159.50">bi..</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,442 samples, 2.52%)</title><rect x="7.6565%" y="133" width="2.5195%" height="15" fill="rgb(213,201,24)" fg:x="7421" fg:w="2442"/><text x="7.9065%" y="143.50">bi..</text></g><g><title>libsystem_kernel.dylib`read (2,428 samples, 2.51%)</title><rect x="7.6710%" y="117" width="2.5051%" height="15" fill="rgb(248,116,28)" fg:x="7435" fg:w="2428"/><text x="7.9210%" y="127.50">li..</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (406 samples, 0.42%)</title><rect x="10.1760%" y="149" width="0.4189%" height="15" fill="rgb(219,72,43)" fg:x="9863" fg:w="406"/><text x="10.4260%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (401 samples, 0.41%)</title><rect x="10.1812%" y="133" width="0.4137%" height="15" fill="rgb(209,138,14)" fg:x="9868" fg:w="401"/><text x="10.4312%" y="143.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (2,880 samples, 2.97%)</title><rect x="7.6390%" y="165" width="2.9714%" height="15" fill="rgb(222,18,33)" fg:x="7404" fg:w="2880"/><text x="7.8890%" y="175.50">bin..</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1,736 samples, 1.79%)</title><rect x="10.6620%" y="149" width="1.7911%" height="15" fill="rgb(213,199,7)" fg:x="10334" fg:w="1736"/><text x="10.9120%" y="159.50">b..</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,720 samples, 1.77%)</title><rect x="10.6785%" y="133" width="1.7746%" height="15" fill="rgb(250,110,10)" fg:x="10350" fg:w="1720"/><text x="10.9285%" y="143.50">b..</text></g><g><title>libsystem_kernel.dylib`read (1,713 samples, 1.77%)</title><rect x="10.6857%" y="117" width="1.7674%" height="15" fill="rgb(248,123,6)" fg:x="10357" fg:w="1713"/><text x="10.9357%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (22 samples, 0.02%)</title><rect x="12.4933%" y="133" width="0.0227%" height="15" fill="rgb(206,91,31)" fg:x="12109" fg:w="22"/><text x="12.7433%" y="143.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,018 samples, 9.30%)</title><rect x="12.4562%" y="149" width="9.3042%" height="15" fill="rgb(211,154,13)" fg:x="12073" fg:w="9018"/><text x="12.7062%" y="159.50">binary_to_typ..</text></g><g><title>libsystem_kernel.dylib`read (8,952 samples, 9.24%)</title><rect x="12.5242%" y="133" width="9.2361%" height="15" fill="rgb(225,148,7)" fg:x="12139" fg:w="8952"/><text x="12.7742%" y="143.50">libsystem_ker..</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (609 samples, 0.63%)</title><rect x="21.7707%" y="117" width="0.6283%" height="15" fill="rgb(220,160,43)" fg:x="21101" fg:w="609"/><text x="22.0207%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (603 samples, 0.62%)</title><rect x="21.7769%" y="101" width="0.6221%" height="15" fill="rgb(213,52,39)" fg:x="21107" fg:w="603"/><text x="22.0269%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (601 samples, 0.62%)</title><rect x="21.7789%" y="85" width="0.6201%" height="15" fill="rgb(243,137,7)" fg:x="21109" fg:w="601"/><text x="22.0289%" y="95.50"></text></g><g><title>binary_to_types`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (614 samples, 0.63%)</title><rect x="21.7686%" y="133" width="0.6335%" height="15" fill="rgb(230,79,13)" fg:x="21099" fg:w="614"/><text x="22.0186%" y="143.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::expressions::_::_&lt;impl serde::de::Deserialize for cwe_checker_lib::pcode::expressions::ExpressionType&gt;::deserialize (792 samples, 0.82%)</title><rect x="21.7665%" y="149" width="0.8171%" height="15" fill="rgb(247,105,23)" fg:x="21097" fg:w="792"/><text x="22.0165%" y="159.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (175 samples, 0.18%)</title><rect x="22.4031%" y="133" width="0.1806%" height="15" fill="rgb(223,179,41)" fg:x="21714" fg:w="175"/><text x="22.6531%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (173 samples, 0.18%)</title><rect x="22.4052%" y="117" width="0.1785%" height="15" fill="rgb(218,9,34)" fg:x="21716" fg:w="173"/><text x="22.6552%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (302 samples, 0.31%)</title><rect x="22.6992%" y="101" width="0.3116%" height="15" fill="rgb(222,106,8)" fg:x="22001" fg:w="302"/><text x="22.9492%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (299 samples, 0.31%)</title><rect x="22.7023%" y="85" width="0.3085%" height="15" fill="rgb(211,220,0)" fg:x="22004" fg:w="299"/><text x="22.9523%" y="95.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_bool (836 samples, 0.86%)</title><rect x="22.6951%" y="117" width="0.8625%" height="15" fill="rgb(229,52,16)" fg:x="21997" fg:w="836"/><text x="22.9451%" y="127.50"></text></g><g><title>binary_to_types`serde_json::de::Deserializer&lt;R&gt;::parse_ident (530 samples, 0.55%)</title><rect x="23.0108%" y="101" width="0.5468%" height="15" fill="rgb(212,155,18)" fg:x="22303" fg:w="530"/><text x="23.2608%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (526 samples, 0.54%)</title><rect x="23.0149%" y="85" width="0.5427%" height="15" fill="rgb(242,21,14)" fg:x="22307" fg:w="526"/><text x="23.2649%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (522 samples, 0.54%)</title><rect x="23.0191%" y="69" width="0.5386%" height="15" fill="rgb(222,19,48)" fg:x="22311" fg:w="522"/><text x="23.2691%" y="79.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (325 samples, 0.34%)</title><rect x="23.5628%" y="101" width="0.3353%" height="15" fill="rgb(232,45,27)" fg:x="22838" fg:w="325"/><text x="23.8128%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (324 samples, 0.33%)</title><rect x="23.5638%" y="85" width="0.3343%" height="15" fill="rgb(249,103,42)" fg:x="22839" fg:w="324"/><text x="23.8138%" y="95.50"></text></g><g><title>binary_to_types`serde_json::de::Deserializer&lt;R&gt;::parse_integer (154 samples, 0.16%)</title><rect x="23.8981%" y="101" width="0.1589%" height="15" fill="rgb(246,81,33)" fg:x="23163" fg:w="154"/><text x="24.1481%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (154 samples, 0.16%)</title><rect x="23.8981%" y="85" width="0.1589%" height="15" fill="rgb(252,33,42)" fg:x="23163" fg:w="154"/><text x="24.1481%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (154 samples, 0.16%)</title><rect x="23.8981%" y="69" width="0.1589%" height="15" fill="rgb(209,212,41)" fg:x="23163" fg:w="154"/><text x="24.1481%" y="79.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_u64 (486 samples, 0.50%)</title><rect x="23.5576%" y="117" width="0.5014%" height="15" fill="rgb(207,154,6)" fg:x="22833" fg:w="486"/><text x="23.8076%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (12 samples, 0.01%)</title><rect x="24.0962%" y="85" width="0.0124%" height="15" fill="rgb(223,64,47)" fg:x="23355" fg:w="12"/><text x="24.3462%" y="95.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (3,107 samples, 3.21%)</title><rect x="24.0591%" y="117" width="3.2056%" height="15" fill="rgb(211,161,38)" fg:x="23319" fg:w="3107"/><text x="24.3091%" y="127.50">bin..</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,080 samples, 3.18%)</title><rect x="24.0869%" y="101" width="3.1777%" height="15" fill="rgb(219,138,40)" fg:x="23346" fg:w="3080"/><text x="24.3369%" y="111.50">bin..</text></g><g><title>libsystem_kernel.dylib`read (3,057 samples, 3.15%)</title><rect x="24.1106%" y="85" width="3.1540%" height="15" fill="rgb(241,228,46)" fg:x="23369" fg:w="3057"/><text x="24.3606%" y="95.50">lib..</text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (10 samples, 0.01%)</title><rect x="27.2647%" y="117" width="0.0103%" height="15" fill="rgb(223,209,38)" fg:x="26426" fg:w="10"/><text x="27.5147%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (44 samples, 0.05%)</title><rect x="27.3286%" y="101" width="0.0454%" height="15" fill="rgb(236,164,45)" fg:x="26488" fg:w="44"/><text x="27.5786%" y="111.50"></text></g><g><title>binary_to_types`DYLD-STUB$$read (22 samples, 0.02%)</title><rect x="27.3740%" y="101" width="0.0227%" height="15" fill="rgb(231,15,5)" fg:x="26532" fg:w="22"/><text x="27.6240%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (17,709 samples, 18.27%)</title><rect x="27.2750%" y="117" width="18.2710%" height="15" fill="rgb(252,35,15)" fg:x="26436" fg:w="17709"/><text x="27.5250%" y="127.50">binary_to_types`&lt;std::io::By..</text></g><g><title>libsystem_kernel.dylib`read (17,591 samples, 18.15%)</title><rect x="27.3967%" y="101" width="18.1493%" height="15" fill="rgb(248,181,18)" fg:x="26554" fg:w="17591"/><text x="27.6467%" y="111.50">libsystem_kernel.dylib`read</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1,066 samples, 1.10%)</title><rect x="45.5604%" y="85" width="1.0998%" height="15" fill="rgb(233,39,42)" fg:x="44159" fg:w="1066"/><text x="45.8104%" y="95.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,057 samples, 1.09%)</title><rect x="45.5697%" y="69" width="1.0905%" height="15" fill="rgb(238,110,33)" fg:x="44168" fg:w="1057"/><text x="45.8197%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (1,051 samples, 1.08%)</title><rect x="45.5759%" y="53" width="1.0844%" height="15" fill="rgb(233,195,10)" fg:x="44174" fg:w="1051"/><text x="45.8259%" y="63.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1,076 samples, 1.11%)</title><rect x="45.5584%" y="101" width="1.1101%" height="15" fill="rgb(254,105,3)" fg:x="44157" fg:w="1076"/><text x="45.8084%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (309 samples, 0.32%)</title><rect x="46.6685%" y="101" width="0.3188%" height="15" fill="rgb(221,225,9)" fg:x="45233" fg:w="309"/><text x="46.9185%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (307 samples, 0.32%)</title><rect x="46.6706%" y="85" width="0.3167%" height="15" fill="rgb(224,227,45)" fg:x="45235" fg:w="307"/><text x="46.9206%" y="95.50"></text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (1,391 samples, 1.44%)</title><rect x="45.5532%" y="117" width="1.4351%" height="15" fill="rgb(229,198,43)" fg:x="44152" fg:w="1391"/><text x="45.8032%" y="127.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (23,639 samples, 24.39%)</title><rect x="22.6002%" y="133" width="24.3892%" height="15" fill="rgb(206,209,35)" fg:x="21905" fg:w="23639"/><text x="22.8502%" y="143.50">binary_to_types`&lt;&amp;mut serde_json::de::D..</text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (23,940 samples, 24.70%)</title><rect x="22.5837%" y="149" width="24.6998%" height="15" fill="rgb(245,195,53)" fg:x="21889" fg:w="23940"/><text x="22.8337%" y="159.50">binary_to_types`serde::de::impls::_&lt;imp..</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (280 samples, 0.29%)</title><rect x="46.9946%" y="133" width="0.2889%" height="15" fill="rgb(240,92,26)" fg:x="45549" fg:w="280"/><text x="47.2446%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (265 samples, 0.27%)</title><rect x="47.0100%" y="117" width="0.2734%" height="15" fill="rgb(207,40,23)" fg:x="45564" fg:w="265"/><text x="47.2600%" y="127.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (35,546 samples, 36.67%)</title><rect x="10.6104%" y="165" width="36.6741%" height="15" fill="rgb(223,111,35)" fg:x="10284" fg:w="35546"/><text x="10.8604%" y="175.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as ser..</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1,929 samples, 1.99%)</title><rect x="47.2845%" y="165" width="1.9902%" height="15" fill="rgb(229,147,28)" fg:x="45830" fg:w="1929"/><text x="47.5345%" y="175.50">b..</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,909 samples, 1.97%)</title><rect x="47.3051%" y="149" width="1.9696%" height="15" fill="rgb(211,29,28)" fg:x="45850" fg:w="1909"/><text x="47.5551%" y="159.50">b..</text></g><g><title>libsystem_kernel.dylib`read (1,893 samples, 1.95%)</title><rect x="47.3216%" y="133" width="1.9531%" height="15" fill="rgb(228,72,33)" fg:x="45866" fg:w="1893"/><text x="47.5716%" y="143.50">l..</text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (14 samples, 0.01%)</title><rect x="49.2747%" y="165" width="0.0144%" height="15" fill="rgb(205,214,31)" fg:x="47759" fg:w="14"/><text x="49.5247%" y="175.50"></text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (38 samples, 0.04%)</title><rect x="49.3552%" y="149" width="0.0392%" height="15" fill="rgb(224,111,15)" fg:x="47837" fg:w="38"/><text x="49.6052%" y="159.50"></text></g><g><title>binary_to_types`DYLD-STUB$$read (11 samples, 0.01%)</title><rect x="49.3944%" y="149" width="0.0113%" height="15" fill="rgb(253,21,26)" fg:x="47875" fg:w="11"/><text x="49.6444%" y="159.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,107 samples, 15.59%)</title><rect x="49.2891%" y="165" width="15.5864%" height="15" fill="rgb(245,139,43)" fg:x="47773" fg:w="15107"/><text x="49.5391%" y="175.50">binary_to_types`&lt;std::io..</text></g><g><title>libsystem_kernel.dylib`read (14,994 samples, 15.47%)</title><rect x="49.4057%" y="149" width="15.4699%" height="15" fill="rgb(252,170,7)" fg:x="47886" fg:w="14994"/><text x="49.6557%" y="159.50">libsystem_kernel.dylib`r..</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (82 samples, 0.08%)</title><rect x="64.8869%" y="133" width="0.0846%" height="15" fill="rgb(231,118,14)" fg:x="62891" fg:w="82"/><text x="65.1369%" y="143.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (82 samples, 0.08%)</title><rect x="64.8869%" y="117" width="0.0846%" height="15" fill="rgb(238,83,0)" fg:x="62891" fg:w="82"/><text x="65.1369%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (82 samples, 0.08%)</title><rect x="64.8869%" y="101" width="0.0846%" height="15" fill="rgb(221,39,39)" fg:x="62891" fg:w="82"/><text x="65.1369%" y="111.50"></text></g><g><title>binary_to_types`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (83 samples, 0.09%)</title><rect x="64.8869%" y="149" width="0.0856%" height="15" fill="rgb(222,119,46)" fg:x="62891" fg:w="83"/><text x="65.1369%" y="159.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::_::_&lt;impl serde::de::Deserialize for cwe_checker_lib::pcode::term::JmpType&gt;::deserialize (113 samples, 0.12%)</title><rect x="64.8869%" y="165" width="0.1166%" height="15" fill="rgb(222,165,49)" fg:x="62891" fg:w="113"/><text x="65.1369%" y="175.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.03%)</title><rect x="64.9726%" y="149" width="0.0310%" height="15" fill="rgb(219,113,52)" fg:x="62974" fg:w="30"/><text x="65.2226%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (30 samples, 0.03%)</title><rect x="64.9726%" y="133" width="0.0310%" height="15" fill="rgb(214,7,15)" fg:x="62974" fg:w="30"/><text x="65.2226%" y="143.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (10 samples, 0.01%)</title><rect x="65.0118%" y="149" width="0.0103%" height="15" fill="rgb(235,32,4)" fg:x="63012" fg:w="10"/><text x="65.2618%" y="159.50"></text></g><g><title>binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (10 samples, 0.01%)</title><rect x="65.0118%" y="133" width="0.0103%" height="15" fill="rgb(238,90,54)" fg:x="63012" fg:w="10"/><text x="65.2618%" y="143.50"></text></g><g><title>binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (10 samples, 0.01%)</title><rect x="65.0118%" y="117" width="0.0103%" height="15" fill="rgb(213,208,19)" fg:x="63012" fg:w="10"/><text x="65.2618%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 0.14%)</title><rect x="65.0726%" y="117" width="0.1413%" height="15" fill="rgb(233,156,4)" fg:x="63071" fg:w="137"/><text x="65.3226%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (136 samples, 0.14%)</title><rect x="65.0737%" y="101" width="0.1403%" height="15" fill="rgb(207,194,5)" fg:x="63072" fg:w="136"/><text x="65.3237%" y="111.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_bool (393 samples, 0.41%)</title><rect x="65.0706%" y="133" width="0.4055%" height="15" fill="rgb(206,111,30)" fg:x="63069" fg:w="393"/><text x="65.3206%" y="143.50"></text></g><g><title>binary_to_types`serde_json::de::Deserializer&lt;R&gt;::parse_ident (254 samples, 0.26%)</title><rect x="65.2140%" y="117" width="0.2621%" height="15" fill="rgb(243,70,54)" fg:x="63208" fg:w="254"/><text x="65.4640%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (252 samples, 0.26%)</title><rect x="65.2160%" y="101" width="0.2600%" height="15" fill="rgb(242,28,8)" fg:x="63210" fg:w="252"/><text x="65.4660%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (252 samples, 0.26%)</title><rect x="65.2160%" y="85" width="0.2600%" height="15" fill="rgb(219,106,18)" fg:x="63210" fg:w="252"/><text x="65.4660%" y="95.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (155 samples, 0.16%)</title><rect x="65.4812%" y="117" width="0.1599%" height="15" fill="rgb(244,222,10)" fg:x="63467" fg:w="155"/><text x="65.7312%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (154 samples, 0.16%)</title><rect x="65.4822%" y="101" width="0.1589%" height="15" fill="rgb(236,179,52)" fg:x="63468" fg:w="154"/><text x="65.7322%" y="111.50"></text></g><g><title>binary_to_types`serde_json::de::Deserializer&lt;R&gt;::parse_integer (89 samples, 0.09%)</title><rect x="65.6411%" y="117" width="0.0918%" height="15" fill="rgb(213,23,39)" fg:x="63622" fg:w="89"/><text x="65.8911%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 0.09%)</title><rect x="65.6422%" y="101" width="0.0908%" height="15" fill="rgb(238,48,10)" fg:x="63623" fg:w="88"/><text x="65.8922%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (87 samples, 0.09%)</title><rect x="65.6432%" y="85" width="0.0898%" height="15" fill="rgb(251,196,23)" fg:x="63624" fg:w="87"/><text x="65.8932%" y="95.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_u64 (250 samples, 0.26%)</title><rect x="65.4760%" y="133" width="0.2579%" height="15" fill="rgb(250,152,24)" fg:x="63462" fg:w="250"/><text x="65.7260%" y="143.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1,665 samples, 1.72%)</title><rect x="65.7340%" y="133" width="1.7178%" height="15" fill="rgb(209,150,17)" fg:x="63712" fg:w="1665"/><text x="65.9840%" y="143.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,652 samples, 1.70%)</title><rect x="65.7474%" y="117" width="1.7044%" height="15" fill="rgb(234,202,34)" fg:x="63725" fg:w="1652"/><text x="65.9974%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (1,647 samples, 1.70%)</title><rect x="65.7525%" y="101" width="1.6993%" height="15" fill="rgb(253,148,53)" fg:x="63730" fg:w="1647"/><text x="66.0025%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (21 samples, 0.02%)</title><rect x="67.4869%" y="117" width="0.0217%" height="15" fill="rgb(218,129,16)" fg:x="65411" fg:w="21"/><text x="67.7369%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,976 samples, 9.26%)</title><rect x="67.4549%" y="133" width="9.2609%" height="15" fill="rgb(216,85,19)" fg:x="65380" fg:w="8976"/><text x="67.7049%" y="143.50">binary_to_typ..</text></g><g><title>libsystem_kernel.dylib`read (8,917 samples, 9.20%)</title><rect x="67.5158%" y="117" width="9.2000%" height="15" fill="rgb(235,228,7)" fg:x="65439" fg:w="8917"/><text x="67.7658%" y="127.50">libsystem_ker..</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (432 samples, 0.45%)</title><rect x="76.7261%" y="101" width="0.4457%" height="15" fill="rgb(245,175,0)" fg:x="74366" fg:w="432"/><text x="76.9761%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (428 samples, 0.44%)</title><rect x="76.7302%" y="85" width="0.4416%" height="15" fill="rgb(208,168,36)" fg:x="74370" fg:w="428"/><text x="76.9802%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (425 samples, 0.44%)</title><rect x="76.7333%" y="69" width="0.4385%" height="15" fill="rgb(246,171,24)" fg:x="74373" fg:w="425"/><text x="76.9833%" y="79.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (437 samples, 0.45%)</title><rect x="76.7261%" y="117" width="0.4509%" height="15" fill="rgb(215,142,24)" fg:x="74366" fg:w="437"/><text x="76.9761%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (158 samples, 0.16%)</title><rect x="77.1770%" y="117" width="0.1630%" height="15" fill="rgb(250,187,7)" fg:x="74803" fg:w="158"/><text x="77.4270%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (155 samples, 0.16%)</title><rect x="77.1801%" y="101" width="0.1599%" height="15" fill="rgb(228,66,33)" fg:x="74806" fg:w="155"/><text x="77.4301%" y="111.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (188 samples, 0.19%)</title><rect x="77.3503%" y="69" width="0.1940%" height="15" fill="rgb(234,215,21)" fg:x="74971" fg:w="188"/><text x="77.6003%" y="79.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (188 samples, 0.19%)</title><rect x="77.3503%" y="53" width="0.1940%" height="15" fill="rgb(222,191,20)" fg:x="74971" fg:w="188"/><text x="77.6003%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (185 samples, 0.19%)</title><rect x="77.3534%" y="37" width="0.1909%" height="15" fill="rgb(245,79,54)" fg:x="74974" fg:w="185"/><text x="77.6034%" y="47.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.04%)</title><rect x="77.5443%" y="69" width="0.0392%" height="15" fill="rgb(240,10,37)" fg:x="75159" fg:w="38"/><text x="77.7943%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (38 samples, 0.04%)</title><rect x="77.5443%" y="53" width="0.0392%" height="15" fill="rgb(214,192,32)" fg:x="75159" fg:w="38"/><text x="77.7943%" y="63.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (228 samples, 0.24%)</title><rect x="77.3503%" y="85" width="0.2352%" height="15" fill="rgb(209,36,54)" fg:x="74971" fg:w="228"/><text x="77.6003%" y="95.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (79 samples, 0.08%)</title><rect x="77.5866%" y="85" width="0.0815%" height="15" fill="rgb(220,10,11)" fg:x="75200" fg:w="79"/><text x="77.8366%" y="95.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.08%)</title><rect x="77.5866%" y="69" width="0.0815%" height="15" fill="rgb(221,106,17)" fg:x="75200" fg:w="79"/><text x="77.8366%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (77 samples, 0.08%)</title><rect x="77.5886%" y="53" width="0.0794%" height="15" fill="rgb(251,142,44)" fg:x="75202" fg:w="77"/><text x="77.8386%" y="63.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (889 samples, 0.92%)</title><rect x="77.6691%" y="85" width="0.9172%" height="15" fill="rgb(238,13,15)" fg:x="75280" fg:w="889"/><text x="77.9191%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (886 samples, 0.91%)</title><rect x="77.6722%" y="69" width="0.9141%" height="15" fill="rgb(208,107,27)" fg:x="75283" fg:w="886"/><text x="77.9222%" y="79.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,207 samples, 1.25%)</title><rect x="77.3431%" y="101" width="1.2453%" height="15" fill="rgb(205,136,37)" fg:x="74964" fg:w="1207"/><text x="77.5931%" y="111.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (57 samples, 0.06%)</title><rect x="78.5915%" y="69" width="0.0588%" height="15" fill="rgb(250,205,27)" fg:x="76174" fg:w="57"/><text x="78.8415%" y="79.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 0.06%)</title><rect x="78.5915%" y="53" width="0.0588%" height="15" fill="rgb(210,80,43)" fg:x="76174" fg:w="57"/><text x="78.8415%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (57 samples, 0.06%)</title><rect x="78.5915%" y="37" width="0.0588%" height="15" fill="rgb(247,160,36)" fg:x="76174" fg:w="57"/><text x="78.8415%" y="47.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (270 samples, 0.28%)</title><rect x="78.6503%" y="69" width="0.2786%" height="15" fill="rgb(234,13,49)" fg:x="76231" fg:w="270"/><text x="78.9003%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (269 samples, 0.28%)</title><rect x="78.6513%" y="53" width="0.2775%" height="15" fill="rgb(234,122,0)" fg:x="76232" fg:w="269"/><text x="78.9013%" y="63.50"></text></g><g><title>binary_to_types`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (333 samples, 0.34%)</title><rect x="78.5884%" y="85" width="0.3436%" height="15" fill="rgb(207,146,38)" fg:x="76171" fg:w="333"/><text x="78.8384%" y="95.50"></text></g><g><title>binary_to_types`&lt;serde_json::de::VariantAccess&lt;R&gt; as serde::de::EnumAccess&gt;::variant_seed (341 samples, 0.35%)</title><rect x="78.5884%" y="101" width="0.3518%" height="15" fill="rgb(207,177,25)" fg:x="76171" fg:w="341"/><text x="78.8384%" y="111.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (13,722 samples, 14.16%)</title><rect x="65.0221%" y="149" width="14.1575%" height="15" fill="rgb(211,178,42)" fg:x="63022" fg:w="13722"/><text x="65.2721%" y="159.50">binary_to_types`&lt;&amp;mut..</text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (2,383 samples, 2.46%)</title><rect x="76.7209%" y="133" width="2.4586%" height="15" fill="rgb(230,69,54)" fg:x="74361" fg:w="2383"/><text x="76.9709%" y="143.50">bi..</text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::_::_&lt;impl serde::de::Deserialize for cwe_checker_lib::pcode::term::Label&gt;::deserialize (1,781 samples, 1.84%)</title><rect x="77.3420%" y="117" width="1.8375%" height="15" fill="rgb(214,135,41)" fg:x="74963" fg:w="1781"/><text x="77.5920%" y="127.50">b..</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (232 samples, 0.24%)</title><rect x="78.9402%" y="101" width="0.2394%" height="15" fill="rgb(237,67,25)" fg:x="76512" fg:w="232"/><text x="79.1902%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (230 samples, 0.24%)</title><rect x="78.9423%" y="85" width="0.2373%" height="15" fill="rgb(222,189,50)" fg:x="76514" fg:w="230"/><text x="79.1923%" y="95.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (185 samples, 0.19%)</title><rect x="79.1837%" y="149" width="0.1909%" height="15" fill="rgb(245,148,34)" fg:x="76748" fg:w="185"/><text x="79.4337%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (173 samples, 0.18%)</title><rect x="79.1961%" y="133" width="0.1785%" height="15" fill="rgb(222,29,6)" fg:x="76760" fg:w="173"/><text x="79.4461%" y="143.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (147 samples, 0.15%)</title><rect x="79.3808%" y="101" width="0.1517%" height="15" fill="rgb(221,189,43)" fg:x="76939" fg:w="147"/><text x="79.6308%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (144 samples, 0.15%)</title><rect x="79.3838%" y="85" width="0.1486%" height="15" fill="rgb(207,36,27)" fg:x="76942" fg:w="144"/><text x="79.6338%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (142 samples, 0.15%)</title><rect x="79.3859%" y="69" width="0.1465%" height="15" fill="rgb(217,90,24)" fg:x="76944" fg:w="142"/><text x="79.6359%" y="79.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.03%)</title><rect x="79.5324%" y="101" width="0.0268%" height="15" fill="rgb(224,66,35)" fg:x="77086" fg:w="26"/><text x="79.7824%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (26 samples, 0.03%)</title><rect x="79.5324%" y="85" width="0.0268%" height="15" fill="rgb(221,13,50)" fg:x="77086" fg:w="26"/><text x="79.7824%" y="95.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (174 samples, 0.18%)</title><rect x="79.3808%" y="117" width="0.1795%" height="15" fill="rgb(236,68,49)" fg:x="76939" fg:w="174"/><text x="79.6308%" y="127.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (92 samples, 0.09%)</title><rect x="79.5644%" y="117" width="0.0949%" height="15" fill="rgb(229,146,28)" fg:x="77117" fg:w="92"/><text x="79.8144%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 0.09%)</title><rect x="79.5654%" y="101" width="0.0939%" height="15" fill="rgb(225,31,38)" fg:x="77118" fg:w="91"/><text x="79.8154%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (90 samples, 0.09%)</title><rect x="79.5665%" y="85" width="0.0929%" height="15" fill="rgb(250,208,3)" fg:x="77119" fg:w="90"/><text x="79.8165%" y="95.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (673 samples, 0.69%)</title><rect x="79.6604%" y="117" width="0.6944%" height="15" fill="rgb(246,54,23)" fg:x="77210" fg:w="673"/><text x="79.9104%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (672 samples, 0.69%)</title><rect x="79.6614%" y="101" width="0.6933%" height="15" fill="rgb(243,76,11)" fg:x="77211" fg:w="672"/><text x="79.9114%" y="111.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (953 samples, 0.98%)</title><rect x="79.3766%" y="133" width="0.9832%" height="15" fill="rgb(245,21,50)" fg:x="76935" fg:w="953"/><text x="79.6266%" y="143.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (46 samples, 0.05%)</title><rect x="80.3609%" y="101" width="0.0475%" height="15" fill="rgb(228,9,43)" fg:x="77889" fg:w="46"/><text x="80.6109%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.05%)</title><rect x="80.3619%" y="85" width="0.0464%" height="15" fill="rgb(208,100,47)" fg:x="77890" fg:w="45"/><text x="80.6119%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (45 samples, 0.05%)</title><rect x="80.3619%" y="69" width="0.0464%" height="15" fill="rgb(232,26,8)" fg:x="77890" fg:w="45"/><text x="80.6119%" y="79.50"></text></g><g><title>binary_to_types`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (245 samples, 0.25%)</title><rect x="80.3599%" y="117" width="0.2528%" height="15" fill="rgb(216,166,38)" fg:x="77888" fg:w="245"/><text x="80.6099%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (198 samples, 0.20%)</title><rect x="80.4084%" y="101" width="0.2043%" height="15" fill="rgb(251,202,51)" fg:x="77935" fg:w="198"/><text x="80.6584%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (197 samples, 0.20%)</title><rect x="80.4094%" y="85" width="0.2033%" height="15" fill="rgb(254,216,34)" fg:x="77936" fg:w="197"/><text x="80.6594%" y="95.50"></text></g><g><title>binary_to_types`&lt;serde_json::de::VariantAccess&lt;R&gt; as serde::de::EnumAccess&gt;::variant_seed (253 samples, 0.26%)</title><rect x="80.3599%" y="133" width="0.2610%" height="15" fill="rgb(251,32,27)" fg:x="77888" fg:w="253"/><text x="80.6099%" y="143.50"></text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (15,335 samples, 15.82%)</title><rect x="65.0035%" y="165" width="15.8217%" height="15" fill="rgb(208,127,28)" fg:x="63004" fg:w="15335"/><text x="65.2535%" y="175.50">binary_to_types`serde::d..</text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::_::_&lt;impl serde::de::Deserialize for cwe_checker_lib::pcode::term::Label&gt;::deserialize (1,406 samples, 1.45%)</title><rect x="79.3746%" y="149" width="1.4506%" height="15" fill="rgb(224,137,22)" fg:x="76933" fg:w="1406"/><text x="79.6246%" y="159.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (198 samples, 0.20%)</title><rect x="80.6209%" y="133" width="0.2043%" height="15" fill="rgb(254,70,32)" fg:x="78141" fg:w="198"/><text x="80.8709%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (196 samples, 0.20%)</title><rect x="80.6230%" y="117" width="0.2022%" height="15" fill="rgb(229,75,37)" fg:x="78143" fg:w="196"/><text x="80.8730%" y="127.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (71,015 samples, 73.27%)</title><rect x="7.5585%" y="181" width="73.2687%" height="15" fill="rgb(252,64,23)" fg:x="7326" fg:w="71015"/><text x="7.8085%" y="191.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (197 samples, 0.20%)</title><rect x="80.8293%" y="181" width="0.2033%" height="15" fill="rgb(232,162,48)" fg:x="78343" fg:w="197"/><text x="81.0793%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (174 samples, 0.18%)</title><rect x="80.8530%" y="165" width="0.1795%" height="15" fill="rgb(246,160,12)" fg:x="78366" fg:w="174"/><text x="81.1030%" y="175.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (867 samples, 0.89%)</title><rect x="81.0687%" y="165" width="0.8945%" height="15" fill="rgb(247,166,0)" fg:x="78575" fg:w="867"/><text x="81.3187%" y="175.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (858 samples, 0.89%)</title><rect x="81.0780%" y="149" width="0.8852%" height="15" fill="rgb(249,219,21)" fg:x="78584" fg:w="858"/><text x="81.3280%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (854 samples, 0.88%)</title><rect x="81.0821%" y="133" width="0.8811%" height="15" fill="rgb(205,209,3)" fg:x="78588" fg:w="854"/><text x="81.3321%" y="143.50"></text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (17 samples, 0.02%)</title><rect x="81.9890%" y="149" width="0.0175%" height="15" fill="rgb(243,44,1)" fg:x="79467" fg:w="17"/><text x="82.2390%" y="159.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,742 samples, 6.96%)</title><rect x="81.9642%" y="165" width="6.9560%" height="15" fill="rgb(206,159,16)" fg:x="79443" fg:w="6742"/><text x="82.2142%" y="175.50">binary_to..</text></g><g><title>libsystem_kernel.dylib`read (6,692 samples, 6.90%)</title><rect x="82.0158%" y="149" width="6.9044%" height="15" fill="rgb(244,77,30)" fg:x="79493" fg:w="6692"/><text x="82.2658%" y="159.50">libsystem..</text></g><g><title>binary_to_types`serde::de::MapAccess::next_key (7,649 samples, 7.89%)</title><rect x="81.0336%" y="181" width="7.8918%" height="15" fill="rgb(218,69,12)" fg:x="78541" fg:w="7649"/><text x="81.2836%" y="191.50">binary_to_t..</text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (78,875 samples, 81.38%)</title><rect x="7.5554%" y="197" width="81.3782%" height="15" fill="rgb(212,87,7)" fg:x="7323" fg:w="78875"/><text x="7.8054%" y="207.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,596 samples, 2.68%)</title><rect x="88.9367%" y="197" width="2.6784%" height="15" fill="rgb(245,114,25)" fg:x="86201" fg:w="2596"/><text x="89.1867%" y="207.50">bi..</text></g><g><title>libsystem_kernel.dylib`read (2,582 samples, 2.66%)</title><rect x="88.9511%" y="181" width="2.6639%" height="15" fill="rgb(210,61,42)" fg:x="86215" fg:w="2582"/><text x="89.2011%" y="191.50">li..</text></g><g><title>binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (81,504 samples, 84.09%)</title><rect x="7.5358%" y="213" width="84.0906%" height="15" fill="rgb(211,52,33)" fg:x="7304" fg:w="81504"/><text x="7.7858%" y="223.50">binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed</text></g><g><title>binary_to_types`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.01%)</title><rect x="91.6285%" y="213" width="0.0103%" height="15" fill="rgb(234,58,33)" fg:x="88810" fg:w="10"/><text x="91.8785%" y="223.50"></text></g><g><title>binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (81,523 samples, 84.11%)</title><rect x="7.5306%" y="229" width="84.1102%" height="15" fill="rgb(220,115,36)" fg:x="7299" fg:w="81523"/><text x="7.7806%" y="239.50">binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::..</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.05%)</title><rect x="91.6429%" y="229" width="0.0537%" height="15" fill="rgb(243,153,54)" fg:x="88824" fg:w="52"/><text x="91.8929%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (52 samples, 0.05%)</title><rect x="91.6429%" y="213" width="0.0537%" height="15" fill="rgb(251,47,18)" fg:x="88824" fg:w="52"/><text x="91.8929%" y="223.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (81,620 samples, 84.21%)</title><rect x="7.5296%" y="245" width="84.2103%" height="15" fill="rgb(242,102,42)" fg:x="7298" fg:w="81620"/><text x="7.7796%" y="255.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq</text></g><g><title>libsystem_platform.dylib`_platform_memmove (40 samples, 0.04%)</title><rect x="91.6987%" y="229" width="0.0413%" height="15" fill="rgb(234,31,38)" fg:x="88878" fg:w="40"/><text x="91.9487%" y="239.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (231 samples, 0.24%)</title><rect x="91.7410%" y="229" width="0.2383%" height="15" fill="rgb(221,117,51)" fg:x="88919" fg:w="231"/><text x="91.9910%" y="239.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (227 samples, 0.23%)</title><rect x="91.7451%" y="213" width="0.2342%" height="15" fill="rgb(212,20,18)" fg:x="88923" fg:w="227"/><text x="91.9951%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`read (226 samples, 0.23%)</title><rect x="91.7461%" y="197" width="0.2332%" height="15" fill="rgb(245,133,36)" fg:x="88924" fg:w="226"/><text x="91.9961%" y="207.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.06%)</title><rect x="91.9793%" y="229" width="0.0598%" height="15" fill="rgb(212,6,19)" fg:x="89150" fg:w="58"/><text x="92.2293%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (58 samples, 0.06%)</title><rect x="91.9793%" y="213" width="0.0598%" height="15" fill="rgb(218,1,36)" fg:x="89150" fg:w="58"/><text x="92.2293%" y="223.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (292 samples, 0.30%)</title><rect x="91.7399%" y="245" width="0.3013%" height="15" fill="rgb(246,84,54)" fg:x="88918" fg:w="292"/><text x="91.9899%" y="255.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (221 samples, 0.23%)</title><rect x="92.0412%" y="245" width="0.2280%" height="15" fill="rgb(242,110,6)" fg:x="89210" fg:w="221"/><text x="92.2912%" y="255.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (218 samples, 0.22%)</title><rect x="92.0443%" y="229" width="0.2249%" height="15" fill="rgb(214,47,5)" fg:x="89213" fg:w="218"/><text x="92.2943%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (216 samples, 0.22%)</title><rect x="92.0463%" y="213" width="0.2229%" height="15" fill="rgb(218,159,25)" fg:x="89215" fg:w="216"/><text x="92.2963%" y="223.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,347 samples, 1.39%)</title><rect x="92.2713%" y="245" width="1.3897%" height="15" fill="rgb(215,211,28)" fg:x="89433" fg:w="1347"/><text x="92.5213%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`read (1,337 samples, 1.38%)</title><rect x="92.2816%" y="229" width="1.3794%" height="15" fill="rgb(238,59,32)" fg:x="89443" fg:w="1337"/><text x="92.5316%" y="239.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (83,490 samples, 86.14%)</title><rect x="7.5245%" y="261" width="86.1397%" height="15" fill="rgb(226,82,3)" fg:x="7293" fg:w="83490"/><text x="7.7745%" y="271.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (41 samples, 0.04%)</title><rect x="93.6641%" y="261" width="0.0423%" height="15" fill="rgb(240,164,32)" fg:x="90783" fg:w="41"/><text x="93.9141%" y="271.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.04%)</title><rect x="93.6641%" y="245" width="0.0423%" height="15" fill="rgb(232,46,7)" fg:x="90783" fg:w="41"/><text x="93.9141%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`read (40 samples, 0.04%)</title><rect x="93.6651%" y="229" width="0.0413%" height="15" fill="rgb(229,129,53)" fg:x="90784" fg:w="40"/><text x="93.9151%" y="239.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (145 samples, 0.15%)</title><rect x="93.7064%" y="261" width="0.1496%" height="15" fill="rgb(234,188,29)" fg:x="90824" fg:w="145"/><text x="93.9564%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`read (142 samples, 0.15%)</title><rect x="93.7095%" y="245" width="0.1465%" height="15" fill="rgb(246,141,4)" fg:x="90827" fg:w="142"/><text x="93.9595%" y="255.50"></text></g><g><title>binary_to_types`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (15 samples, 0.02%)</title><rect x="93.8560%" y="245" width="0.0155%" height="15" fill="rgb(229,23,39)" fg:x="90969" fg:w="15"/><text x="94.1060%" y="255.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (15 samples, 0.02%)</title><rect x="93.8560%" y="229" width="0.0155%" height="15" fill="rgb(206,12,3)" fg:x="90969" fg:w="15"/><text x="94.1060%" y="239.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.02%)</title><rect x="93.8560%" y="213" width="0.0155%" height="15" fill="rgb(252,226,20)" fg:x="90969" fg:w="15"/><text x="94.1060%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`read (15 samples, 0.02%)</title><rect x="93.8560%" y="197" width="0.0155%" height="15" fill="rgb(216,123,35)" fg:x="90969" fg:w="15"/><text x="94.1060%" y="207.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::_::_&lt;impl serde::de::Deserialize for cwe_checker_lib::pcode::term::ArgIntent&gt;::deserialize (20 samples, 0.02%)</title><rect x="93.8560%" y="261" width="0.0206%" height="15" fill="rgb(212,68,40)" fg:x="90969" fg:w="20"/><text x="94.1060%" y="271.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (100 samples, 0.10%)</title><rect x="93.8777%" y="245" width="0.1032%" height="15" fill="rgb(254,125,32)" fg:x="90990" fg:w="100"/><text x="94.1277%" y="255.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (99 samples, 0.10%)</title><rect x="93.8787%" y="229" width="0.1021%" height="15" fill="rgb(253,97,22)" fg:x="90991" fg:w="99"/><text x="94.1287%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (98 samples, 0.10%)</title><rect x="93.8797%" y="213" width="0.1011%" height="15" fill="rgb(241,101,14)" fg:x="90992" fg:w="98"/><text x="94.1297%" y="223.50"></text></g><g><title>binary_to_types`serde::de::MapAccess::next_key (641 samples, 0.66%)</title><rect x="93.8766%" y="261" width="0.6613%" height="15" fill="rgb(238,103,29)" fg:x="90989" fg:w="641"/><text x="94.1266%" y="271.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (539 samples, 0.56%)</title><rect x="93.9819%" y="245" width="0.5561%" height="15" fill="rgb(233,195,47)" fg:x="91091" fg:w="539"/><text x="94.2319%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`read (534 samples, 0.55%)</title><rect x="93.9870%" y="229" width="0.5509%" height="15" fill="rgb(246,218,30)" fg:x="91096" fg:w="534"/><text x="94.2370%" y="239.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (48 samples, 0.05%)</title><rect x="94.5473%" y="229" width="0.0495%" height="15" fill="rgb(219,145,47)" fg:x="91639" fg:w="48"/><text x="94.7973%" y="239.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.05%)</title><rect x="94.5473%" y="213" width="0.0495%" height="15" fill="rgb(243,12,26)" fg:x="91639" fg:w="48"/><text x="94.7973%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`read (46 samples, 0.05%)</title><rect x="94.5493%" y="197" width="0.0475%" height="15" fill="rgb(214,87,16)" fg:x="91641" fg:w="46"/><text x="94.7993%" y="207.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (175 samples, 0.18%)</title><rect x="94.5968%" y="229" width="0.1806%" height="15" fill="rgb(208,99,42)" fg:x="91687" fg:w="175"/><text x="94.8468%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (173 samples, 0.18%)</title><rect x="94.5989%" y="213" width="0.1785%" height="15" fill="rgb(253,99,2)" fg:x="91689" fg:w="173"/><text x="94.8489%" y="223.50"></text></g><g><title>binary_to_types`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (10 samples, 0.01%)</title><rect x="94.7774%" y="213" width="0.0103%" height="15" fill="rgb(220,168,23)" fg:x="91862" fg:w="10"/><text x="95.0274%" y="223.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (10 samples, 0.01%)</title><rect x="94.7774%" y="197" width="0.0103%" height="15" fill="rgb(242,38,24)" fg:x="91862" fg:w="10"/><text x="95.0274%" y="207.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.01%)</title><rect x="94.7774%" y="181" width="0.0103%" height="15" fill="rgb(225,182,9)" fg:x="91862" fg:w="10"/><text x="95.0274%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (10 samples, 0.01%)</title><rect x="94.7774%" y="165" width="0.0103%" height="15" fill="rgb(243,178,37)" fg:x="91862" fg:w="10"/><text x="95.0274%" y="175.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::expressions::_::_&lt;impl serde::de::Deserialize for cwe_checker_lib::pcode::expressions::ExpressionType&gt;::deserialize (13 samples, 0.01%)</title><rect x="94.7774%" y="229" width="0.0134%" height="15" fill="rgb(232,139,19)" fg:x="91862" fg:w="13"/><text x="95.0274%" y="239.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (29 samples, 0.03%)</title><rect x="94.8093%" y="197" width="0.0299%" height="15" fill="rgb(225,201,24)" fg:x="91893" fg:w="29"/><text x="95.0593%" y="207.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.03%)</title><rect x="94.8093%" y="181" width="0.0299%" height="15" fill="rgb(221,47,46)" fg:x="91893" fg:w="29"/><text x="95.0593%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (29 samples, 0.03%)</title><rect x="94.8093%" y="165" width="0.0299%" height="15" fill="rgb(249,23,13)" fg:x="91893" fg:w="29"/><text x="95.0593%" y="175.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (124 samples, 0.13%)</title><rect x="94.8393%" y="197" width="0.1279%" height="15" fill="rgb(219,9,5)" fg:x="91922" fg:w="124"/><text x="95.0893%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (124 samples, 0.13%)</title><rect x="94.8393%" y="181" width="0.1279%" height="15" fill="rgb(254,171,16)" fg:x="91922" fg:w="124"/><text x="95.0893%" y="191.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (166 samples, 0.17%)</title><rect x="94.7970%" y="213" width="0.1713%" height="15" fill="rgb(230,171,20)" fg:x="91881" fg:w="166"/><text x="95.0470%" y="223.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (419 samples, 0.43%)</title><rect x="94.5380%" y="245" width="0.4323%" height="15" fill="rgb(210,71,41)" fg:x="91630" fg:w="419"/><text x="94.7880%" y="255.50"></text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (174 samples, 0.18%)</title><rect x="94.7908%" y="229" width="0.1795%" height="15" fill="rgb(206,173,20)" fg:x="91875" fg:w="174"/><text x="95.0408%" y="239.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (84,763 samples, 87.45%)</title><rect x="7.5234%" y="277" width="87.4531%" height="15" fill="rgb(233,88,34)" fg:x="7292" fg:w="84763"/><text x="7.7734%" y="287.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct</text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (425 samples, 0.44%)</title><rect x="94.5380%" y="261" width="0.4385%" height="15" fill="rgb(223,209,46)" fg:x="91630" fg:w="425"/><text x="94.7880%" y="271.50"></text></g><g><title>binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (85,013 samples, 87.71%)</title><rect x="7.5234%" y="293" width="87.7110%" height="15" fill="rgb(250,43,18)" fg:x="7292" fg:w="85013"/><text x="7.7734%" y="303.50">binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (250 samples, 0.26%)</title><rect x="94.9765%" y="277" width="0.2579%" height="15" fill="rgb(208,13,10)" fg:x="92055" fg:w="250"/><text x="95.2265%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`read (249 samples, 0.26%)</title><rect x="94.9775%" y="261" width="0.2569%" height="15" fill="rgb(212,200,36)" fg:x="92056" fg:w="249"/><text x="95.2275%" y="271.50"></text></g><g><title>binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (85,016 samples, 87.71%)</title><rect x="7.5234%" y="309" width="87.7141%" height="15" fill="rgb(225,90,30)" fg:x="7292" fg:w="85016"/><text x="7.7734%" y="319.50">binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_..</text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (85,021 samples, 87.72%)</title><rect x="7.5234%" y="325" width="87.7192%" height="15" fill="rgb(236,182,39)" fg:x="7292" fg:w="85021"/><text x="7.7734%" y="335.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (40 samples, 0.04%)</title><rect x="95.2427%" y="309" width="0.0413%" height="15" fill="rgb(212,144,35)" fg:x="92313" fg:w="40"/><text x="95.4927%" y="319.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.04%)</title><rect x="95.2427%" y="293" width="0.0413%" height="15" fill="rgb(228,63,44)" fg:x="92313" fg:w="40"/><text x="95.4927%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`read (40 samples, 0.04%)</title><rect x="95.2427%" y="277" width="0.0413%" height="15" fill="rgb(228,109,6)" fg:x="92313" fg:w="40"/><text x="95.4927%" y="287.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (45 samples, 0.05%)</title><rect x="95.2427%" y="325" width="0.0464%" height="15" fill="rgb(238,117,24)" fg:x="92313" fg:w="45"/><text x="95.4927%" y="335.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (35 samples, 0.04%)</title><rect x="95.2891%" y="325" width="0.0361%" height="15" fill="rgb(242,26,26)" fg:x="92358" fg:w="35"/><text x="95.5391%" y="335.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.04%)</title><rect x="95.2891%" y="309" width="0.0361%" height="15" fill="rgb(221,92,48)" fg:x="92358" fg:w="35"/><text x="95.5391%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`read (35 samples, 0.04%)</title><rect x="95.2891%" y="293" width="0.0361%" height="15" fill="rgb(209,209,32)" fg:x="92358" fg:w="35"/><text x="95.5391%" y="303.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.09%)</title><rect x="95.3252%" y="325" width="0.0856%" height="15" fill="rgb(221,70,22)" fg:x="92393" fg:w="83"/><text x="95.5752%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`read (83 samples, 0.09%)</title><rect x="95.3252%" y="309" width="0.0856%" height="15" fill="rgb(248,145,5)" fg:x="92393" fg:w="83"/><text x="95.5752%" y="319.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (85,188 samples, 87.89%)</title><rect x="7.5234%" y="341" width="87.8915%" height="15" fill="rgb(226,116,26)" fg:x="7292" fg:w="85188"/><text x="7.7734%" y="351.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (16 samples, 0.02%)</title><rect x="95.4150%" y="341" width="0.0165%" height="15" fill="rgb(244,5,17)" fg:x="92480" fg:w="16"/><text x="95.6650%" y="351.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.02%)</title><rect x="95.4150%" y="325" width="0.0165%" height="15" fill="rgb(252,159,33)" fg:x="92480" fg:w="16"/><text x="95.6650%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`read (16 samples, 0.02%)</title><rect x="95.4150%" y="309" width="0.0165%" height="15" fill="rgb(206,71,0)" fg:x="92480" fg:w="16"/><text x="95.6650%" y="319.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.04%)</title><rect x="95.4315%" y="341" width="0.0382%" height="15" fill="rgb(233,118,54)" fg:x="92496" fg:w="37"/><text x="95.6815%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`read (37 samples, 0.04%)</title><rect x="95.4315%" y="325" width="0.0382%" height="15" fill="rgb(234,83,48)" fg:x="92496" fg:w="37"/><text x="95.6815%" y="335.50"></text></g><g><title>binary_to_types`serde::de::MapAccess::next_key (35 samples, 0.04%)</title><rect x="95.4696%" y="341" width="0.0361%" height="15" fill="rgb(228,3,54)" fg:x="92533" fg:w="35"/><text x="95.7196%" y="351.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.03%)</title><rect x="95.4769%" y="325" width="0.0289%" height="15" fill="rgb(226,155,13)" fg:x="92540" fg:w="28"/><text x="95.7269%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`read (28 samples, 0.03%)</title><rect x="95.4769%" y="309" width="0.0289%" height="15" fill="rgb(241,28,37)" fg:x="92540" fg:w="28"/><text x="95.7269%" y="319.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (85,416 samples, 88.13%)</title><rect x="7.3821%" y="357" width="88.1268%" height="15" fill="rgb(233,93,10)" fg:x="7155" fg:w="85416"/><text x="7.6321%" y="367.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct</text></g><g><title>binary_to_types`serde_json::de::from_reader (85,470 samples, 88.18%)</title><rect x="7.3449%" y="469" width="88.1825%" height="15" fill="rgb(225,113,19)" fg:x="7119" fg:w="85470"/><text x="7.5949%" y="479.50">binary_to_types`serde_json::de::from_reader</text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (85,470 samples, 88.18%)</title><rect x="7.3449%" y="453" width="88.1825%" height="15" fill="rgb(241,2,18)" fg:x="7119" fg:w="85470"/><text x="7.5949%" y="463.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct</text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (85,436 samples, 88.15%)</title><rect x="7.3800%" y="437" width="88.1474%" height="15" fill="rgb(228,207,21)" fg:x="7153" fg:w="85436"/><text x="7.6300%" y="447.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct</text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (85,436 samples, 88.15%)</title><rect x="7.3800%" y="421" width="88.1474%" height="15" fill="rgb(213,211,35)" fg:x="7153" fg:w="85436"/><text x="7.6300%" y="431.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct</text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (85,436 samples, 88.15%)</title><rect x="7.3800%" y="405" width="88.1474%" height="15" fill="rgb(209,83,10)" fg:x="7153" fg:w="85436"/><text x="7.6300%" y="415.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq</text></g><g><title>binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (85,436 samples, 88.15%)</title><rect x="7.3800%" y="389" width="88.1474%" height="15" fill="rgb(209,164,1)" fg:x="7153" fg:w="85436"/><text x="7.6300%" y="399.50">binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_s..</text></g><g><title>binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (85,434 samples, 88.15%)</title><rect x="7.3821%" y="373" width="88.1454%" height="15" fill="rgb(213,184,43)" fg:x="7155" fg:w="85434"/><text x="7.6321%" y="383.50">binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="95.5089%" y="357" width="0.0186%" height="15" fill="rgb(231,61,34)" fg:x="92571" fg:w="18"/><text x="95.7589%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`read (18 samples, 0.02%)</title><rect x="95.5089%" y="341" width="0.0186%" height="15" fill="rgb(235,75,3)" fg:x="92571" fg:w="18"/><text x="95.7589%" y="351.50"></text></g><g><title>binary_to_types`binary_type_inference::util::get_intermediate_representation_for_reader (85,610 samples, 88.33%)</title><rect x="7.2067%" y="485" width="88.3269%" height="15" fill="rgb(220,106,47)" fg:x="6985" fg:w="85610"/><text x="7.4567%" y="495.50">binary_to_types`binary_type_inference::util::get_intermediate_representation_for_reader</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.01%)</title><rect x="95.5976%" y="357" width="0.0134%" height="15" fill="rgb(210,196,33)" fg:x="92657" fg:w="13"/><text x="95.8476%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.03%)</title><rect x="95.5862%" y="373" width="0.0279%" height="15" fill="rgb(229,154,42)" fg:x="92646" fg:w="27"/><text x="95.8362%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (50 samples, 0.05%)</title><rect x="95.5646%" y="405" width="0.0516%" height="15" fill="rgb(228,114,26)" fg:x="92625" fg:w="50"/><text x="95.8146%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (37 samples, 0.04%)</title><rect x="95.5780%" y="389" width="0.0382%" height="15" fill="rgb(208,144,1)" fg:x="92638" fg:w="37"/><text x="95.8280%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (59 samples, 0.06%)</title><rect x="95.5625%" y="421" width="0.0609%" height="15" fill="rgb(239,112,37)" fg:x="92623" fg:w="59"/><text x="95.8125%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.01%)</title><rect x="95.6265%" y="405" width="0.0124%" height="15" fill="rgb(210,96,50)" fg:x="92685" fg:w="12"/><text x="95.8765%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.01%)</title><rect x="95.6265%" y="389" width="0.0124%" height="15" fill="rgb(222,178,2)" fg:x="92685" fg:w="12"/><text x="95.8765%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.02%)</title><rect x="95.6244%" y="421" width="0.0175%" height="15" fill="rgb(226,74,18)" fg:x="92683" fg:w="17"/><text x="95.8744%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (101 samples, 0.10%)</title><rect x="95.5501%" y="437" width="0.1042%" height="15" fill="rgb(225,67,54)" fg:x="92611" fg:w="101"/><text x="95.8001%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.01%)</title><rect x="95.6430%" y="421" width="0.0113%" height="15" fill="rgb(251,92,32)" fg:x="92701" fg:w="11"/><text x="95.8930%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (112 samples, 0.12%)</title><rect x="95.5501%" y="453" width="0.1156%" height="15" fill="rgb(228,149,22)" fg:x="92611" fg:w="112"/><text x="95.8001%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.01%)</title><rect x="95.6842%" y="421" width="0.0134%" height="15" fill="rgb(243,54,13)" fg:x="92741" fg:w="13"/><text x="95.9342%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.01%)</title><rect x="95.6842%" y="405" width="0.0134%" height="15" fill="rgb(243,180,28)" fg:x="92741" fg:w="13"/><text x="95.9342%" y="415.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (25 samples, 0.03%)</title><rect x="95.6739%" y="437" width="0.0258%" height="15" fill="rgb(208,167,24)" fg:x="92731" fg:w="25"/><text x="95.9239%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.01%)</title><rect x="95.7276%" y="421" width="0.0144%" height="15" fill="rgb(245,73,45)" fg:x="92783" fg:w="14"/><text x="95.9776%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (42 samples, 0.04%)</title><rect x="95.7008%" y="437" width="0.0433%" height="15" fill="rgb(237,203,48)" fg:x="92757" fg:w="42"/><text x="95.9508%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.01%)</title><rect x="95.7472%" y="437" width="0.0113%" height="15" fill="rgb(211,197,16)" fg:x="92802" fg:w="11"/><text x="95.9972%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.10%)</title><rect x="95.6657%" y="453" width="0.0970%" height="15" fill="rgb(243,99,51)" fg:x="92723" fg:w="94"/><text x="95.9157%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.01%)</title><rect x="95.7637%" y="437" width="0.0103%" height="15" fill="rgb(215,123,29)" fg:x="92818" fg:w="10"/><text x="96.0137%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="95.7627%" y="453" width="0.0124%" height="15" fill="rgb(239,186,37)" fg:x="92817" fg:w="12"/><text x="96.0127%" y="463.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::intermediate_representation::expression::Expression as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="95.7792%" y="453" width="0.0134%" height="15" fill="rgb(252,136,39)" fg:x="92833" fg:w="13"/><text x="96.0292%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.01%)</title><rect x="95.8008%" y="405" width="0.0124%" height="15" fill="rgb(223,213,32)" fg:x="92854" fg:w="12"/><text x="96.0508%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.01%)</title><rect x="95.8132%" y="405" width="0.0144%" height="15" fill="rgb(233,115,5)" fg:x="92866" fg:w="14"/><text x="96.0632%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.01%)</title><rect x="95.8132%" y="389" width="0.0144%" height="15" fill="rgb(207,226,44)" fg:x="92866" fg:w="14"/><text x="96.0632%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (36 samples, 0.04%)</title><rect x="95.7957%" y="421" width="0.0371%" height="15" fill="rgb(208,126,0)" fg:x="92849" fg:w="36"/><text x="96.0457%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (45 samples, 0.05%)</title><rect x="95.8328%" y="421" width="0.0464%" height="15" fill="rgb(244,66,21)" fg:x="92885" fg:w="45"/><text x="96.0828%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (22 samples, 0.02%)</title><rect x="95.8565%" y="405" width="0.0227%" height="15" fill="rgb(222,97,12)" fg:x="92908" fg:w="22"/><text x="96.1065%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (23 samples, 0.02%)</title><rect x="95.8792%" y="421" width="0.0237%" height="15" fill="rgb(219,213,19)" fg:x="92930" fg:w="23"/><text x="96.1292%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.02%)</title><rect x="95.8792%" y="405" width="0.0237%" height="15" fill="rgb(252,169,30)" fg:x="92930" fg:w="23"/><text x="96.1292%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (17 samples, 0.02%)</title><rect x="95.8854%" y="389" width="0.0175%" height="15" fill="rgb(206,32,51)" fg:x="92936" fg:w="17"/><text x="96.1354%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.02%)</title><rect x="95.8854%" y="373" width="0.0175%" height="15" fill="rgb(250,172,42)" fg:x="92936" fg:w="17"/><text x="96.1354%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (18 samples, 0.02%)</title><rect x="95.9050%" y="421" width="0.0186%" height="15" fill="rgb(209,34,43)" fg:x="92955" fg:w="18"/><text x="96.1550%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (131 samples, 0.14%)</title><rect x="95.7926%" y="437" width="0.1352%" height="15" fill="rgb(223,11,35)" fg:x="92846" fg:w="131"/><text x="96.0426%" y="447.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (152 samples, 0.16%)</title><rect x="95.7926%" y="453" width="0.1568%" height="15" fill="rgb(251,219,26)" fg:x="92846" fg:w="152"/><text x="96.0426%" y="463.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::expression::Expression&gt; (12 samples, 0.01%)</title><rect x="95.9587%" y="453" width="0.0124%" height="15" fill="rgb(231,119,3)" fg:x="93007" fg:w="12"/><text x="96.2087%" y="463.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::remove (14 samples, 0.01%)</title><rect x="95.9824%" y="437" width="0.0144%" height="15" fill="rgb(216,97,11)" fg:x="93030" fg:w="14"/><text x="96.2324%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::dead_variable_elimination::alive_vars_computation::update_alive_vars_by_def (44 samples, 0.05%)</title><rect x="95.9711%" y="453" width="0.0454%" height="15" fill="rgb(223,59,9)" fg:x="93019" fg:w="44"/><text x="96.2211%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (43 samples, 0.04%)</title><rect x="96.0825%" y="357" width="0.0444%" height="15" fill="rgb(233,93,31)" fg:x="93127" fg:w="43"/><text x="96.3325%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (71 samples, 0.07%)</title><rect x="96.0567%" y="389" width="0.0733%" height="15" fill="rgb(239,81,33)" fg:x="93102" fg:w="71"/><text x="96.3067%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (52 samples, 0.05%)</title><rect x="96.0763%" y="373" width="0.0537%" height="15" fill="rgb(213,120,34)" fg:x="93121" fg:w="52"/><text x="96.3263%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (81 samples, 0.08%)</title><rect x="96.0526%" y="405" width="0.0836%" height="15" fill="rgb(243,49,53)" fg:x="93098" fg:w="81"/><text x="96.3026%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (141 samples, 0.15%)</title><rect x="96.0309%" y="421" width="0.1455%" height="15" fill="rgb(247,216,33)" fg:x="93077" fg:w="141"/><text x="96.2809%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.03%)</title><rect x="96.1485%" y="405" width="0.0279%" height="15" fill="rgb(226,26,14)" fg:x="93191" fg:w="27"/><text x="96.3985%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (167 samples, 0.17%)</title><rect x="96.0165%" y="437" width="0.1723%" height="15" fill="rgb(215,49,53)" fg:x="93063" fg:w="167"/><text x="96.2665%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.02%)</title><rect x="96.2208%" y="389" width="0.0186%" height="15" fill="rgb(245,162,40)" fg:x="93261" fg:w="18"/><text x="96.4708%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.01%)</title><rect x="96.2259%" y="373" width="0.0134%" height="15" fill="rgb(229,68,17)" fg:x="93266" fg:w="13"/><text x="96.4759%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.01%)</title><rect x="96.2259%" y="357" width="0.0134%" height="15" fill="rgb(213,182,10)" fg:x="93266" fg:w="13"/><text x="96.4759%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (11 samples, 0.01%)</title><rect x="96.2703%" y="357" width="0.0113%" height="15" fill="rgb(245,125,30)" fg:x="93309" fg:w="11"/><text x="96.5203%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (52 samples, 0.05%)</title><rect x="96.2393%" y="389" width="0.0537%" height="15" fill="rgb(232,202,2)" fg:x="93279" fg:w="52"/><text x="96.4893%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (47 samples, 0.05%)</title><rect x="96.2445%" y="373" width="0.0485%" height="15" fill="rgb(237,140,51)" fg:x="93284" fg:w="47"/><text x="96.4945%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (83 samples, 0.09%)</title><rect x="96.2115%" y="405" width="0.0856%" height="15" fill="rgb(236,157,25)" fg:x="93252" fg:w="83"/><text x="96.4615%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (125 samples, 0.13%)</title><rect x="96.2971%" y="405" width="0.1290%" height="15" fill="rgb(219,209,0)" fg:x="93335" fg:w="125"/><text x="96.5471%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (56 samples, 0.06%)</title><rect x="96.3683%" y="389" width="0.0578%" height="15" fill="rgb(240,116,54)" fg:x="93404" fg:w="56"/><text x="96.6183%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (43 samples, 0.04%)</title><rect x="96.4261%" y="405" width="0.0444%" height="15" fill="rgb(216,10,36)" fg:x="93460" fg:w="43"/><text x="96.6761%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (42 samples, 0.04%)</title><rect x="96.4271%" y="389" width="0.0433%" height="15" fill="rgb(222,72,44)" fg:x="93461" fg:w="42"/><text x="96.6771%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (24 samples, 0.02%)</title><rect x="96.4457%" y="373" width="0.0248%" height="15" fill="rgb(232,159,9)" fg:x="93479" fg:w="24"/><text x="96.6957%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`madvise (24 samples, 0.02%)</title><rect x="96.4457%" y="357" width="0.0248%" height="15" fill="rgb(210,39,32)" fg:x="93479" fg:w="24"/><text x="96.6957%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (56 samples, 0.06%)</title><rect x="96.4797%" y="405" width="0.0578%" height="15" fill="rgb(216,194,45)" fg:x="93512" fg:w="56"/><text x="96.7297%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (345 samples, 0.36%)</title><rect x="96.1939%" y="421" width="0.3559%" height="15" fill="rgb(218,18,35)" fg:x="93235" fg:w="345"/><text x="96.4439%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.01%)</title><rect x="96.5375%" y="405" width="0.0124%" height="15" fill="rgb(207,83,51)" fg:x="93568" fg:w="12"/><text x="96.7875%" y="415.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (10 samples, 0.01%)</title><rect x="96.5519%" y="421" width="0.0103%" height="15" fill="rgb(225,63,43)" fg:x="93582" fg:w="10"/><text x="96.8019%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.01%)</title><rect x="96.5705%" y="421" width="0.0103%" height="15" fill="rgb(207,57,36)" fg:x="93600" fg:w="10"/><text x="96.8205%" y="431.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (389 samples, 0.40%)</title><rect x="96.1929%" y="437" width="0.4013%" height="15" fill="rgb(216,99,33)" fg:x="93234" fg:w="389"/><text x="96.4429%" y="447.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (31 samples, 0.03%)</title><rect x="96.6159%" y="405" width="0.0320%" height="15" fill="rgb(225,42,16)" fg:x="93644" fg:w="31"/><text x="96.8659%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.01%)</title><rect x="96.6345%" y="389" width="0.0134%" height="15" fill="rgb(220,201,45)" fg:x="93662" fg:w="13"/><text x="96.8845%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.01%)</title><rect x="96.6365%" y="373" width="0.0113%" height="15" fill="rgb(225,33,4)" fg:x="93664" fg:w="11"/><text x="96.8865%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (36 samples, 0.04%)</title><rect x="96.6861%" y="389" width="0.0371%" height="15" fill="rgb(224,33,50)" fg:x="93712" fg:w="36"/><text x="96.9361%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (73 samples, 0.08%)</title><rect x="96.6489%" y="405" width="0.0753%" height="15" fill="rgb(246,198,51)" fg:x="93676" fg:w="73"/><text x="96.8989%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.02%)</title><rect x="96.7325%" y="405" width="0.0175%" height="15" fill="rgb(205,22,4)" fg:x="93757" fg:w="17"/><text x="96.9825%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (149 samples, 0.15%)</title><rect x="96.6066%" y="421" width="0.1537%" height="15" fill="rgb(206,3,8)" fg:x="93635" fg:w="149"/><text x="96.8566%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (22 samples, 0.02%)</title><rect x="96.8615%" y="309" width="0.0227%" height="15" fill="rgb(251,23,15)" fg:x="93882" fg:w="22"/><text x="97.1115%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (69 samples, 0.07%)</title><rect x="96.8253%" y="325" width="0.0712%" height="15" fill="rgb(252,88,28)" fg:x="93847" fg:w="69"/><text x="97.0753%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (12 samples, 0.01%)</title><rect x="96.8842%" y="309" width="0.0124%" height="15" fill="rgb(212,127,14)" fg:x="93904" fg:w="12"/><text x="97.1342%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (116 samples, 0.12%)</title><rect x="96.7789%" y="357" width="0.1197%" height="15" fill="rgb(247,145,37)" fg:x="93802" fg:w="116"/><text x="97.0289%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (82 samples, 0.08%)</title><rect x="96.8140%" y="341" width="0.0846%" height="15" fill="rgb(209,117,53)" fg:x="93836" fg:w="82"/><text x="97.0640%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (129 samples, 0.13%)</title><rect x="96.7738%" y="373" width="0.1331%" height="15" fill="rgb(212,90,42)" fg:x="93797" fg:w="129"/><text x="97.0238%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::merge_iter::MergeIterInner&lt;I&gt;::nexts (21 samples, 0.02%)</title><rect x="96.9161%" y="373" width="0.0217%" height="15" fill="rgb(218,164,37)" fg:x="93935" fg:w="21"/><text x="97.1661%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (205 samples, 0.21%)</title><rect x="96.7686%" y="389" width="0.2115%" height="15" fill="rgb(246,65,34)" fg:x="93792" fg:w="205"/><text x="97.0186%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (23 samples, 0.02%)</title><rect x="96.9564%" y="373" width="0.0237%" height="15" fill="rgb(231,100,33)" fg:x="93974" fg:w="23"/><text x="97.2064%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="96.9904%" y="373" width="0.0124%" height="15" fill="rgb(228,126,14)" fg:x="94007" fg:w="12"/><text x="97.2404%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (101 samples, 0.10%)</title><rect x="97.0420%" y="357" width="0.1042%" height="15" fill="rgb(215,173,21)" fg:x="94057" fg:w="101"/><text x="97.2920%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.02%)</title><rect x="97.1483%" y="357" width="0.0196%" height="15" fill="rgb(210,6,40)" fg:x="94160" fg:w="19"/><text x="97.3983%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.01%)</title><rect x="97.1534%" y="341" width="0.0144%" height="15" fill="rgb(212,48,18)" fg:x="94165" fg:w="14"/><text x="97.4034%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.01%)</title><rect x="97.1534%" y="325" width="0.0144%" height="15" fill="rgb(230,214,11)" fg:x="94165" fg:w="14"/><text x="97.4034%" y="335.50"></text></g><g><title>binary_to_types`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (174 samples, 0.18%)</title><rect x="97.0038%" y="373" width="0.1795%" height="15" fill="rgb(254,105,39)" fg:x="94020" fg:w="174"/><text x="97.2538%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::bulk_build_from_sorted_iter (194 samples, 0.20%)</title><rect x="96.9863%" y="389" width="0.2002%" height="15" fill="rgb(245,158,5)" fg:x="94003" fg:w="194"/><text x="97.2363%" y="399.50"></text></g><g><title>binary_to_types`alloc::slice::merge_sort (24 samples, 0.02%)</title><rect x="97.1885%" y="389" width="0.0248%" height="15" fill="rgb(249,208,11)" fg:x="94199" fg:w="24"/><text x="97.4385%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (452 samples, 0.47%)</title><rect x="96.7665%" y="405" width="0.4663%" height="15" fill="rgb(210,39,28)" fg:x="93790" fg:w="452"/><text x="97.0165%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (19 samples, 0.02%)</title><rect x="97.2133%" y="389" width="0.0196%" height="15" fill="rgb(211,56,53)" fg:x="94223" fg:w="19"/><text x="97.4633%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (14 samples, 0.01%)</title><rect x="97.2329%" y="373" width="0.0144%" height="15" fill="rgb(226,201,30)" fg:x="94242" fg:w="14"/><text x="97.4829%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (16 samples, 0.02%)</title><rect x="97.2329%" y="389" width="0.0165%" height="15" fill="rgb(239,101,34)" fg:x="94242" fg:w="16"/><text x="97.4829%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.02%)</title><rect x="97.2494%" y="373" width="0.0165%" height="15" fill="rgb(226,209,5)" fg:x="94258" fg:w="16"/><text x="97.4994%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="97.2711%" y="341" width="0.0134%" height="15" fill="rgb(250,105,47)" fg:x="94279" fg:w="13"/><text x="97.5211%" y="351.50"></text></g><g><title>binary_to_types`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (17 samples, 0.02%)</title><rect x="97.2690%" y="357" width="0.0175%" height="15" fill="rgb(230,72,3)" fg:x="94277" fg:w="17"/><text x="97.5190%" y="367.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::bulk_build_from_sorted_iter (21 samples, 0.02%)</title><rect x="97.2659%" y="373" width="0.0217%" height="15" fill="rgb(232,218,39)" fg:x="94274" fg:w="21"/><text x="97.5159%" y="383.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::backward_interprocedural_fixpoint::GeneralizedContext&lt;T&gt; as cwe_checker_lib::analysis::fixpoint::Context&gt;::merge (511 samples, 0.53%)</title><rect x="96.7645%" y="421" width="0.5272%" height="15" fill="rgb(248,166,6)" fg:x="93788" fg:w="511"/><text x="97.0145%" y="431.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::interprocedural_fixpoint_generic::merge_option (57 samples, 0.06%)</title><rect x="97.2329%" y="405" width="0.0588%" height="15" fill="rgb(247,89,20)" fg:x="94242" fg:w="57"/><text x="97.4829%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (41 samples, 0.04%)</title><rect x="97.2494%" y="389" width="0.0423%" height="15" fill="rgb(248,130,54)" fg:x="94258" fg:w="41"/><text x="97.4994%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.01%)</title><rect x="97.3546%" y="309" width="0.0113%" height="15" fill="rgb(234,196,4)" fg:x="94360" fg:w="11"/><text x="97.6046%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (31 samples, 0.03%)</title><rect x="97.3402%" y="325" width="0.0320%" height="15" fill="rgb(250,143,31)" fg:x="94346" fg:w="31"/><text x="97.5902%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (61 samples, 0.06%)</title><rect x="97.3123%" y="357" width="0.0629%" height="15" fill="rgb(211,110,34)" fg:x="94319" fg:w="61"/><text x="97.5623%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (45 samples, 0.05%)</title><rect x="97.3288%" y="341" width="0.0464%" height="15" fill="rgb(215,124,48)" fg:x="94335" fg:w="45"/><text x="97.5788%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (73 samples, 0.08%)</title><rect x="97.3041%" y="373" width="0.0753%" height="15" fill="rgb(216,46,13)" fg:x="94311" fg:w="73"/><text x="97.5541%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.03%)</title><rect x="97.3887%" y="373" width="0.0279%" height="15" fill="rgb(205,184,25)" fg:x="94393" fg:w="27"/><text x="97.6387%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.02%)</title><rect x="97.3949%" y="357" width="0.0217%" height="15" fill="rgb(228,1,10)" fg:x="94399" fg:w="21"/><text x="97.6449%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (21 samples, 0.02%)</title><rect x="97.3949%" y="341" width="0.0217%" height="15" fill="rgb(213,116,27)" fg:x="94399" fg:w="21"/><text x="97.6449%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.01%)</title><rect x="97.4052%" y="325" width="0.0113%" height="15" fill="rgb(241,95,50)" fg:x="94409" fg:w="11"/><text x="97.6552%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (151 samples, 0.16%)</title><rect x="97.2948%" y="389" width="0.1558%" height="15" fill="rgb(238,48,32)" fg:x="94302" fg:w="151"/><text x="97.5448%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (32 samples, 0.03%)</title><rect x="97.4176%" y="373" width="0.0330%" height="15" fill="rgb(235,113,49)" fg:x="94421" fg:w="32"/><text x="97.6676%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="97.4506%" y="389" width="0.0113%" height="15" fill="rgb(205,127,43)" fg:x="94453" fg:w="11"/><text x="97.7006%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (170 samples, 0.18%)</title><rect x="97.2917%" y="405" width="0.1754%" height="15" fill="rgb(250,162,2)" fg:x="94299" fg:w="170"/><text x="97.5417%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="97.5703%" y="277" width="0.0103%" height="15" fill="rgb(220,13,41)" fg:x="94569" fg:w="10"/><text x="97.8203%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (28 samples, 0.03%)</title><rect x="97.5558%" y="293" width="0.0289%" height="15" fill="rgb(249,221,25)" fg:x="94555" fg:w="28"/><text x="97.8058%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.05%)</title><rect x="97.5342%" y="325" width="0.0526%" height="15" fill="rgb(215,208,19)" fg:x="94534" fg:w="51"/><text x="97.7842%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (33 samples, 0.03%)</title><rect x="97.5527%" y="309" width="0.0340%" height="15" fill="rgb(236,175,2)" fg:x="94552" fg:w="33"/><text x="97.8027%" y="319.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (63 samples, 0.06%)</title><rect x="97.5280%" y="341" width="0.0650%" height="15" fill="rgb(241,52,2)" fg:x="94528" fg:w="63"/><text x="97.7780%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.01%)</title><rect x="97.6105%" y="325" width="0.0124%" height="15" fill="rgb(248,140,14)" fg:x="94608" fg:w="12"/><text x="97.8605%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.01%)</title><rect x="97.6105%" y="309" width="0.0124%" height="15" fill="rgb(253,22,42)" fg:x="94608" fg:w="12"/><text x="97.8605%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.01%)</title><rect x="97.6115%" y="293" width="0.0113%" height="15" fill="rgb(234,61,47)" fg:x="94609" fg:w="11"/><text x="97.8615%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.03%)</title><rect x="97.5991%" y="341" width="0.0268%" height="15" fill="rgb(208,226,15)" fg:x="94597" fg:w="26"/><text x="97.8491%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (117 samples, 0.12%)</title><rect x="97.5238%" y="357" width="0.1207%" height="15" fill="rgb(217,221,4)" fg:x="94524" fg:w="117"/><text x="97.7738%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.02%)</title><rect x="97.6260%" y="341" width="0.0186%" height="15" fill="rgb(212,174,34)" fg:x="94623" fg:w="18"/><text x="97.8760%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.02%)</title><rect x="97.7384%" y="325" width="0.0155%" height="15" fill="rgb(253,83,4)" fg:x="94732" fg:w="15"/><text x="97.9884%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (21 samples, 0.02%)</title><rect x="97.9097%" y="293" width="0.0217%" height="15" fill="rgb(250,195,49)" fg:x="94898" fg:w="21"/><text x="98.1597%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (154 samples, 0.16%)</title><rect x="97.7983%" y="309" width="0.1589%" height="15" fill="rgb(241,192,25)" fg:x="94790" fg:w="154"/><text x="98.0483%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (25 samples, 0.03%)</title><rect x="97.9314%" y="293" width="0.0258%" height="15" fill="rgb(208,124,10)" fg:x="94919" fg:w="25"/><text x="98.1814%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (290 samples, 0.30%)</title><rect x="97.6724%" y="341" width="0.2992%" height="15" fill="rgb(222,33,0)" fg:x="94668" fg:w="290"/><text x="97.9224%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (211 samples, 0.22%)</title><rect x="97.7539%" y="325" width="0.2177%" height="15" fill="rgb(234,209,28)" fg:x="94747" fg:w="211"/><text x="98.0039%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.01%)</title><rect x="97.9572%" y="309" width="0.0144%" height="15" fill="rgb(224,11,23)" fg:x="94944" fg:w="14"/><text x="98.2072%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (19 samples, 0.02%)</title><rect x="97.9716%" y="341" width="0.0196%" height="15" fill="rgb(232,99,1)" fg:x="94958" fg:w="19"/><text x="98.2216%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (337 samples, 0.35%)</title><rect x="97.6445%" y="357" width="0.3477%" height="15" fill="rgb(237,95,45)" fg:x="94641" fg:w="337"/><text x="97.8945%" y="367.50"></text></g><g><title>binary_to_types`DYLD-STUB$$malloc (17 samples, 0.02%)</title><rect x="97.9922%" y="357" width="0.0175%" height="15" fill="rgb(208,109,11)" fg:x="94978" fg:w="17"/><text x="98.2422%" y="367.50"></text></g><g><title>binary_to_types`DYLD-STUB$$memcpy (14 samples, 0.01%)</title><rect x="98.0098%" y="357" width="0.0144%" height="15" fill="rgb(216,190,48)" fg:x="94995" fg:w="14"/><text x="98.2598%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (66 samples, 0.07%)</title><rect x="98.0407%" y="341" width="0.0681%" height="15" fill="rgb(251,171,36)" fg:x="95025" fg:w="66"/><text x="98.2907%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (63 samples, 0.06%)</title><rect x="98.0438%" y="325" width="0.0650%" height="15" fill="rgb(230,62,22)" fg:x="95028" fg:w="63"/><text x="98.2938%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (35 samples, 0.04%)</title><rect x="98.0727%" y="309" width="0.0361%" height="15" fill="rgb(225,114,35)" fg:x="95056" fg:w="35"/><text x="98.3227%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.02%)</title><rect x="98.0923%" y="293" width="0.0165%" height="15" fill="rgb(215,118,42)" fg:x="95075" fg:w="16"/><text x="98.3423%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (79 samples, 0.08%)</title><rect x="98.0284%" y="357" width="0.0815%" height="15" fill="rgb(243,119,21)" fg:x="95013" fg:w="79"/><text x="98.2784%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (708 samples, 0.73%)</title><rect x="97.4774%" y="373" width="0.7305%" height="15" fill="rgb(252,177,53)" fg:x="94479" fg:w="708"/><text x="97.7274%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (93 samples, 0.10%)</title><rect x="98.1119%" y="357" width="0.0960%" height="15" fill="rgb(237,209,29)" fg:x="95094" fg:w="93"/><text x="98.3619%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.01%)</title><rect x="98.2430%" y="325" width="0.0134%" height="15" fill="rgb(212,65,23)" fg:x="95221" fg:w="13"/><text x="98.4930%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (51 samples, 0.05%)</title><rect x="98.2079%" y="373" width="0.0526%" height="15" fill="rgb(230,222,46)" fg:x="95187" fg:w="51"/><text x="98.4579%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.04%)</title><rect x="98.2244%" y="357" width="0.0361%" height="15" fill="rgb(215,135,32)" fg:x="95203" fg:w="35"/><text x="98.4744%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.02%)</title><rect x="98.2399%" y="341" width="0.0206%" height="15" fill="rgb(246,101,22)" fg:x="95218" fg:w="20"/><text x="98.4899%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.01%)</title><rect x="98.2657%" y="373" width="0.0134%" height="15" fill="rgb(206,107,13)" fg:x="95243" fg:w="13"/><text x="98.5157%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (795 samples, 0.82%)</title><rect x="97.4671%" y="389" width="0.8202%" height="15" fill="rgb(250,100,44)" fg:x="94469" fg:w="795"/><text x="97.7171%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.03%)</title><rect x="98.3895%" y="357" width="0.0279%" height="15" fill="rgb(231,147,38)" fg:x="95363" fg:w="27"/><text x="98.6395%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.01%)</title><rect x="98.4060%" y="341" width="0.0113%" height="15" fill="rgb(229,8,40)" fg:x="95379" fg:w="11"/><text x="98.6560%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (29 samples, 0.03%)</title><rect x="98.4627%" y="325" width="0.0299%" height="15" fill="rgb(221,135,30)" fg:x="95434" fg:w="29"/><text x="98.7127%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (82 samples, 0.08%)</title><rect x="98.4173%" y="357" width="0.0846%" height="15" fill="rgb(249,193,18)" fg:x="95390" fg:w="82"/><text x="98.6673%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (62 samples, 0.06%)</title><rect x="98.4380%" y="341" width="0.0640%" height="15" fill="rgb(209,133,39)" fg:x="95410" fg:w="62"/><text x="98.6880%" y="351.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (162 samples, 0.17%)</title><rect x="98.3482%" y="373" width="0.1671%" height="15" fill="rgb(232,100,14)" fg:x="95323" fg:w="162"/><text x="98.5982%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (114 samples, 0.12%)</title><rect x="98.6856%" y="357" width="0.1176%" height="15" fill="rgb(224,185,1)" fg:x="95650" fg:w="114"/><text x="98.9356%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (278 samples, 0.29%)</title><rect x="98.5184%" y="373" width="0.2868%" height="15" fill="rgb(223,139,8)" fg:x="95488" fg:w="278"/><text x="98.7684%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (22 samples, 0.02%)</title><rect x="98.8052%" y="373" width="0.0227%" height="15" fill="rgb(232,213,38)" fg:x="95766" fg:w="22"/><text x="99.0552%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.02%)</title><rect x="98.8083%" y="357" width="0.0196%" height="15" fill="rgb(207,94,22)" fg:x="95769" fg:w="19"/><text x="99.0583%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (18 samples, 0.02%)</title><rect x="98.8279%" y="373" width="0.0186%" height="15" fill="rgb(219,183,54)" fg:x="95788" fg:w="18"/><text x="99.0779%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (88 samples, 0.09%)</title><rect x="98.8465%" y="373" width="0.0908%" height="15" fill="rgb(216,185,54)" fg:x="95806" fg:w="88"/><text x="99.0965%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (32 samples, 0.03%)</title><rect x="98.9373%" y="373" width="0.0330%" height="15" fill="rgb(254,217,39)" fg:x="95894" fg:w="32"/><text x="99.1873%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (667 samples, 0.69%)</title><rect x="98.2873%" y="389" width="0.6882%" height="15" fill="rgb(240,178,23)" fg:x="95264" fg:w="667"/><text x="98.5373%" y="399.50"></text></g><g><title>binary_to_types`DYLD-STUB$$free (24 samples, 0.02%)</title><rect x="98.9755%" y="389" width="0.0248%" height="15" fill="rgb(218,11,47)" fg:x="95931" fg:w="24"/><text x="99.2255%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (32 samples, 0.03%)</title><rect x="99.0002%" y="389" width="0.0330%" height="15" fill="rgb(218,51,51)" fg:x="95955" fg:w="32"/><text x="99.2502%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::remove (15 samples, 0.02%)</title><rect x="99.0529%" y="373" width="0.0155%" height="15" fill="rgb(238,126,27)" fg:x="96006" fg:w="15"/><text x="99.3029%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (11 samples, 0.01%)</title><rect x="99.0683%" y="373" width="0.0113%" height="15" fill="rgb(249,202,22)" fg:x="96021" fg:w="11"/><text x="99.3183%" y="383.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::Expression::input_vars (11 samples, 0.01%)</title><rect x="99.0807%" y="373" width="0.0113%" height="15" fill="rgb(254,195,49)" fg:x="96033" fg:w="11"/><text x="99.3307%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (13 samples, 0.01%)</title><rect x="99.0972%" y="373" width="0.0134%" height="15" fill="rgb(208,123,14)" fg:x="96049" fg:w="13"/><text x="99.3472%" y="383.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::dead_variable_elimination::alive_vars_computation::update_alive_vars_by_def (76 samples, 0.08%)</title><rect x="99.0333%" y="389" width="0.0784%" height="15" fill="rgb(224,200,8)" fg:x="95987" fg:w="76"/><text x="99.2833%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (23 samples, 0.02%)</title><rect x="99.1117%" y="389" width="0.0237%" height="15" fill="rgb(217,61,36)" fg:x="96063" fg:w="23"/><text x="99.3617%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.03%)</title><rect x="99.1354%" y="389" width="0.0268%" height="15" fill="rgb(206,35,45)" fg:x="96086" fg:w="26"/><text x="99.3854%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (25 samples, 0.03%)</title><rect x="99.1622%" y="389" width="0.0258%" height="15" fill="rgb(217,65,33)" fg:x="96112" fg:w="25"/><text x="99.4122%" y="399.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,690 samples, 1.74%)</title><rect x="97.4671%" y="405" width="1.7436%" height="15" fill="rgb(222,158,48)" fg:x="94469" fg:w="1690"/><text x="97.7171%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.02%)</title><rect x="99.1880%" y="389" width="0.0227%" height="15" fill="rgb(254,2,54)" fg:x="96137" fg:w="22"/><text x="99.4380%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="99.2138%" y="357" width="0.0144%" height="15" fill="rgb(250,143,38)" fg:x="96162" fg:w="14"/><text x="99.4638%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.01%)</title><rect x="99.2159%" y="341" width="0.0124%" height="15" fill="rgb(248,25,0)" fg:x="96164" fg:w="12"/><text x="99.4659%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (23 samples, 0.02%)</title><rect x="99.2107%" y="373" width="0.0237%" height="15" fill="rgb(206,152,27)" fg:x="96159" fg:w="23"/><text x="99.4607%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (24 samples, 0.02%)</title><rect x="99.2107%" y="389" width="0.0248%" height="15" fill="rgb(240,77,30)" fg:x="96159" fg:w="24"/><text x="99.4607%" y="399.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::dead_variable_elimination::alive_vars_computation::Context as cwe_checker_lib::analysis::backward_interprocedural_fixpoint::Context&gt;::update_call_stub (25 samples, 0.03%)</title><rect x="99.2107%" y="405" width="0.0258%" height="15" fill="rgb(231,5,3)" fg:x="96159" fg:w="25"/><text x="99.4607%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (12 samples, 0.01%)</title><rect x="99.2365%" y="373" width="0.0124%" height="15" fill="rgb(207,226,32)" fg:x="96184" fg:w="12"/><text x="99.4865%" y="383.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::dead_variable_elimination::alive_vars_computation::Context as cwe_checker_lib::analysis::backward_interprocedural_fixpoint::Context&gt;::update_callsite (14 samples, 0.01%)</title><rect x="99.2365%" y="405" width="0.0144%" height="15" fill="rgb(222,207,47)" fg:x="96184" fg:w="14"/><text x="99.4865%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (14 samples, 0.01%)</title><rect x="99.2365%" y="389" width="0.0144%" height="15" fill="rgb(229,115,45)" fg:x="96184" fg:w="14"/><text x="99.4865%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.02%)</title><rect x="99.2695%" y="309" width="0.0206%" height="15" fill="rgb(224,191,6)" fg:x="96216" fg:w="20"/><text x="99.5195%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (39 samples, 0.04%)</title><rect x="99.2530%" y="341" width="0.0402%" height="15" fill="rgb(230,227,24)" fg:x="96200" fg:w="39"/><text x="99.5030%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.03%)</title><rect x="99.2623%" y="325" width="0.0310%" height="15" fill="rgb(228,80,19)" fg:x="96209" fg:w="30"/><text x="99.5123%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (42 samples, 0.04%)</title><rect x="99.2530%" y="357" width="0.0433%" height="15" fill="rgb(247,229,0)" fg:x="96200" fg:w="42"/><text x="99.5030%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.01%)</title><rect x="99.3005%" y="357" width="0.0124%" height="15" fill="rgb(237,194,15)" fg:x="96246" fg:w="12"/><text x="99.5505%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.01%)</title><rect x="99.3015%" y="341" width="0.0113%" height="15" fill="rgb(219,203,20)" fg:x="96247" fg:w="11"/><text x="99.5515%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.01%)</title><rect x="99.3015%" y="325" width="0.0113%" height="15" fill="rgb(234,128,8)" fg:x="96247" fg:w="11"/><text x="99.5515%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (67 samples, 0.07%)</title><rect x="99.2520%" y="373" width="0.0691%" height="15" fill="rgb(248,202,8)" fg:x="96199" fg:w="67"/><text x="99.5020%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (73 samples, 0.08%)</title><rect x="99.2520%" y="389" width="0.0753%" height="15" fill="rgb(206,104,37)" fg:x="96199" fg:w="73"/><text x="99.5020%" y="399.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::backward_interprocedural_fixpoint::GeneralizedContext&lt;T&gt; as cwe_checker_lib::analysis::fixpoint::Context&gt;::update_edge (1,979 samples, 2.04%)</title><rect x="97.2917%" y="421" width="2.0418%" height="15" fill="rgb(223,8,27)" fg:x="94299" fg:w="1979"/><text x="97.5417%" y="431.50">b..</text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::dead_variable_elimination::alive_vars_computation::Context as cwe_checker_lib::analysis::backward_interprocedural_fixpoint::Context&gt;::update_jumpsite (80 samples, 0.08%)</title><rect x="99.2510%" y="405" width="0.0825%" height="15" fill="rgb(216,217,28)" fg:x="96198" fg:w="80"/><text x="99.5010%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="99.3459%" y="405" width="0.0134%" height="15" fill="rgb(249,199,1)" fg:x="96290" fg:w="13"/><text x="99.5959%" y="415.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::set_node_value (26 samples, 0.03%)</title><rect x="99.3459%" y="421" width="0.0268%" height="15" fill="rgb(240,85,17)" fg:x="96290" fg:w="26"/><text x="99.5959%" y="431.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::compute_with_max_steps (2,722 samples, 2.81%)</title><rect x="96.5973%" y="437" width="2.8084%" height="15" fill="rgb(206,108,45)" fg:x="93626" fg:w="2722"/><text x="96.8473%" y="447.50">bi..</text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::new (11 samples, 0.01%)</title><rect x="99.4057%" y="437" width="0.0113%" height="15" fill="rgb(245,210,41)" fg:x="96348" fg:w="11"/><text x="99.6557%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::graph::GraphBuilder::add_block (10 samples, 0.01%)</title><rect x="99.4243%" y="421" width="0.0103%" height="15" fill="rgb(206,13,37)" fg:x="96366" fg:w="10"/><text x="99.6743%" y="431.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::graph::get_program_cfg (26 samples, 0.03%)</title><rect x="99.4212%" y="437" width="0.0268%" height="15" fill="rgb(250,61,18)" fg:x="96363" fg:w="26"/><text x="99.6712%" y="447.50"></text></g><g><title>binary_to_types`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 0.01%)</title><rect x="99.4480%" y="437" width="0.0113%" height="15" fill="rgb(235,172,48)" fg:x="96389" fg:w="11"/><text x="99.6980%" y="447.50"></text></g><g><title>binary_to_types`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.01%)</title><rect x="99.4491%" y="421" width="0.0103%" height="15" fill="rgb(249,201,17)" fg:x="96390" fg:w="10"/><text x="99.6991%" y="431.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::dead_variable_elimination::compute_alive_vars (3,339 samples, 3.44%)</title><rect x="96.0165%" y="453" width="3.4450%" height="15" fill="rgb(219,208,6)" fg:x="93063" fg:w="3339"/><text x="96.2665%" y="463.50">bin..</text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.01%)</title><rect x="99.4645%" y="453" width="0.0134%" height="15" fill="rgb(248,31,23)" fg:x="96405" fg:w="13"/><text x="99.7145%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::dead_variable_elimination::remove_dead_var_assignments (3,830 samples, 3.95%)</title><rect x="95.5460%" y="469" width="3.9515%" height="15" fill="rgb(245,15,42)" fg:x="92607" fg:w="3830"/><text x="95.7960%" y="479.50">bina..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.01%)</title><rect x="99.5099%" y="389" width="0.0124%" height="15" fill="rgb(222,217,39)" fg:x="96449" fg:w="12"/><text x="99.7599%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.02%)</title><rect x="99.5037%" y="421" width="0.0196%" height="15" fill="rgb(210,219,27)" fg:x="96443" fg:w="19"/><text x="99.7537%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.01%)</title><rect x="99.5089%" y="405" width="0.0144%" height="15" fill="rgb(252,166,36)" fg:x="96448" fg:w="14"/><text x="99.7589%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="99.5037%" y="437" width="0.0206%" height="15" fill="rgb(245,132,34)" fg:x="96443" fg:w="20"/><text x="99.7537%" y="447.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::intermediate_representation::expression::Expression as core::clone::Clone&gt;::clone (10 samples, 0.01%)</title><rect x="99.5244%" y="437" width="0.0103%" height="15" fill="rgb(236,54,3)" fg:x="96463" fg:w="10"/><text x="99.7744%" y="447.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;T&gt; as core::clone::Clone&gt;::clone (40 samples, 0.04%)</title><rect x="99.5017%" y="453" width="0.0413%" height="15" fill="rgb(241,173,43)" fg:x="96441" fg:w="40"/><text x="99.7517%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::blk::_&lt;impl cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::intermediate_representation::blk::Blk&gt;&gt;::merge_def_assignments_to_same_var (74 samples, 0.08%)</title><rect x="99.4975%" y="469" width="0.0763%" height="15" fill="rgb(215,190,9)" fg:x="96437" fg:w="74"/><text x="99.7475%" y="479.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::intermediate_representation::expression::Expression as core::clone::Clone&gt;::clone (10 samples, 0.01%)</title><rect x="99.5852%" y="437" width="0.0103%" height="15" fill="rgb(242,101,16)" fg:x="96522" fg:w="10"/><text x="99.8352%" y="447.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::intermediate_representation::expression::Expression as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="99.5842%" y="453" width="0.0144%" height="15" fill="rgb(223,190,21)" fg:x="96521" fg:w="14"/><text x="99.8342%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::Expression::input_vars (17 samples, 0.02%)</title><rect x="99.6224%" y="405" width="0.0175%" height="15" fill="rgb(215,228,25)" fg:x="96558" fg:w="17"/><text x="99.8724%" y="415.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::Expression::input_vars (30 samples, 0.03%)</title><rect x="99.6121%" y="421" width="0.0310%" height="15" fill="rgb(225,36,22)" fg:x="96548" fg:w="30"/><text x="99.8621%" y="431.50"></text></g><g><title>binary_to_types`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (42 samples, 0.04%)</title><rect x="99.6069%" y="437" width="0.0433%" height="15" fill="rgb(251,106,46)" fg:x="96543" fg:w="42"/><text x="99.8569%" y="447.50"></text></g><g><title>binary_to_types`alloc::vec::Vec&lt;T,A&gt;::retain (58 samples, 0.06%)</title><rect x="99.6048%" y="453" width="0.0598%" height="15" fill="rgb(208,90,1)" fg:x="96541" fg:w="58"/><text x="99.8548%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::Expression::input_vars (12 samples, 0.01%)</title><rect x="99.6719%" y="453" width="0.0124%" height="15" fill="rgb(243,10,4)" fg:x="96606" fg:w="12"/><text x="99.9219%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::Expression::substitute_input_var (12 samples, 0.01%)</title><rect x="99.6936%" y="437" width="0.0124%" height="15" fill="rgb(212,137,27)" fg:x="96627" fg:w="12"/><text x="99.9436%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::Expression::substitute_input_var (24 samples, 0.02%)</title><rect x="99.6843%" y="453" width="0.0248%" height="15" fill="rgb(231,220,49)" fg:x="96618" fg:w="24"/><text x="99.9343%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::blk::_&lt;impl cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::intermediate_representation::blk::Blk&gt;&gt;::propagate_input_expressions (136 samples, 0.14%)</title><rect x="99.5739%" y="469" width="0.1403%" height="15" fill="rgb(237,96,20)" fg:x="96511" fg:w="136"/><text x="99.8239%" y="479.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::trivial_operation_substitution::_&lt;impl cwe_checker_lib::intermediate_representation::expression::Expression&gt;::substitute_trivial_operations (12 samples, 0.01%)</title><rect x="99.7194%" y="453" width="0.0124%" height="15" fill="rgb(239,229,30)" fg:x="96652" fg:w="12"/><text x="99.9694%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::trivial_operation_substitution::_&lt;impl cwe_checker_lib::intermediate_representation::expression::Expression&gt;::substitute_trivial_operations (16 samples, 0.02%)</title><rect x="99.7163%" y="469" width="0.0165%" height="15" fill="rgb(219,65,33)" fg:x="96649" fg:w="16"/><text x="99.9663%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.01%)</title><rect x="99.7338%" y="437" width="0.0103%" height="15" fill="rgb(243,134,7)" fg:x="96666" fg:w="10"/><text x="99.9838%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.01%)</title><rect x="99.7441%" y="437" width="0.0124%" height="15" fill="rgb(216,177,54)" fg:x="96676" fg:w="12"/><text x="99.9941%" y="447.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.03%)</title><rect x="99.7338%" y="453" width="0.0299%" height="15" fill="rgb(211,160,20)" fg:x="96666" fg:w="29"/><text x="99.9838%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="99.7751%" y="437" width="0.0134%" height="15" fill="rgb(239,85,39)" fg:x="96706" fg:w="13"/><text x="100.0251%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::project::block_duplication_normalization::_&lt;impl cwe_checker_lib::intermediate_representation::project::Project&gt;::duplicate_blocks_contained_in_several_subs (23 samples, 0.02%)</title><rect x="99.7710%" y="453" width="0.0237%" height="15" fill="rgb(232,125,22)" fg:x="96702" fg:w="23"/><text x="100.0210%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::project::block_duplication_normalization::_&lt;impl cwe_checker_lib::intermediate_representation::project::Project&gt;::generate_sub_tid_to_contained_block_tids_map (12 samples, 0.01%)</title><rect x="99.7998%" y="453" width="0.0124%" height="15" fill="rgb(244,57,34)" fg:x="96730" fg:w="12"/><text x="100.0498%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="99.8122%" y="437" width="0.0113%" height="15" fill="rgb(214,203,32)" fg:x="96742" fg:w="11"/><text x="100.0622%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.01%)</title><rect x="99.8133%" y="421" width="0.0103%" height="15" fill="rgb(207,58,43)" fg:x="96743" fg:w="10"/><text x="100.0633%" y="431.50"></text></g><g><title>binary_to_types`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.02%)</title><rect x="99.8535%" y="389" width="0.0206%" height="15" fill="rgb(215,193,15)" fg:x="96782" fg:w="20"/><text x="100.1035%" y="399.50"></text></g><g><title>binary_to_types`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (49 samples, 0.05%)</title><rect x="99.8256%" y="437" width="0.0506%" height="15" fill="rgb(232,15,44)" fg:x="96755" fg:w="49"/><text x="100.0756%" y="447.50"></text></g><g><title>binary_to_types`hashbrown::raw::RawTable&lt;T,A&gt;::insert (39 samples, 0.04%)</title><rect x="99.8360%" y="421" width="0.0402%" height="15" fill="rgb(212,3,48)" fg:x="96765" fg:w="39"/><text x="100.0860%" y="431.50"></text></g><g><title>binary_to_types`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (34 samples, 0.04%)</title><rect x="99.8411%" y="405" width="0.0351%" height="15" fill="rgb(218,128,7)" fg:x="96770" fg:w="34"/><text x="100.0911%" y="415.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::project::block_duplication_normalization::_&lt;impl cwe_checker_lib::intermediate_representation::project::Project&gt;::generate_tid_to_sub_tid_map (89 samples, 0.09%)</title><rect x="99.8122%" y="453" width="0.0918%" height="15" fill="rgb(226,216,39)" fg:x="96742" fg:w="89"/><text x="100.0622%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.03%)</title><rect x="99.8762%" y="437" width="0.0279%" height="15" fill="rgb(243,47,51)" fg:x="96804" fg:w="27"/><text x="100.1262%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::project::block_duplication_normalization::make_block_to_sub_mapping_unique (185 samples, 0.19%)</title><rect x="99.7328%" y="469" width="0.1909%" height="15" fill="rgb(241,183,40)" fg:x="96665" fg:w="185"/><text x="99.9828%" y="479.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (10 samples, 0.01%)</title><rect x="99.9133%" y="453" width="0.0103%" height="15" fill="rgb(231,217,32)" fg:x="96840" fg:w="10"/><text x="100.1633%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::project::Project::normalize (4,268 samples, 4.40%)</title><rect x="95.5357%" y="485" width="4.4035%" height="15" fill="rgb(229,61,38)" fg:x="92597" fg:w="4268"/><text x="95.7857%" y="495.50">binar..</text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::parse_project (89,882 samples, 92.73%)</title><rect x="7.2056%" y="501" width="92.7345%" height="15" fill="rgb(225,210,5)" fg:x="6984" fg:w="89882"/><text x="7.4556%" y="511.50">binary_to_types`binary_type_inference::inference_job::InferenceJob::parse_project</text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::parse (89,909 samples, 92.76%)</title><rect x="7.1912%" y="517" width="92.7624%" height="15" fill="rgb(231,79,45)" fg:x="6970" fg:w="89909"/><text x="7.4412%" y="527.50">binary_to_types`binary_type_inference::inference_job::InferenceJob::parse</text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::blk::Blk&gt; (26 samples, 0.03%)</title><rect x="99.9567%" y="437" width="0.0268%" height="15" fill="rgb(224,100,7)" fg:x="96882" fg:w="26"/><text x="100.2067%" y="447.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::sub::Sub&gt; (34 samples, 0.04%)</title><rect x="99.9556%" y="453" width="0.0351%" height="15" fill="rgb(241,198,18)" fg:x="96881" fg:w="34"/><text x="100.2056%" y="463.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::project::Project&gt; (35 samples, 0.04%)</title><rect x="99.9556%" y="501" width="0.0361%" height="15" fill="rgb(252,97,53)" fg:x="96881" fg:w="35"/><text x="100.2056%" y="511.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::program::Program&gt; (35 samples, 0.04%)</title><rect x="99.9556%" y="485" width="0.0361%" height="15" fill="rgb(220,88,7)" fg:x="96881" fg:w="35"/><text x="100.2056%" y="495.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.04%)</title><rect x="99.9556%" y="469" width="0.0361%" height="15" fill="rgb(213,176,14)" fg:x="96881" fg:w="35"/><text x="100.2056%" y="479.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::inference_job::InferenceJob&gt; (38 samples, 0.04%)</title><rect x="99.9536%" y="517" width="0.0392%" height="15" fill="rgb(246,73,7)" fg:x="96879" fg:w="38"/><text x="100.2036%" y="527.50"></text></g><g><title>binary_to_types`main (96,918 samples, 99.99%)</title><rect x="0.0000%" y="597" width="99.9938%" height="15" fill="rgb(245,64,36)" fg:x="0" fg:w="96918"/><text x="0.2500%" y="607.50">binary_to_types`main</text></g><g><title>binary_to_types`std::rt::lang_start_internal (96,918 samples, 99.99%)</title><rect x="0.0000%" y="581" width="99.9938%" height="15" fill="rgb(245,80,10)" fg:x="0" fg:w="96918"/><text x="0.2500%" y="591.50">binary_to_types`std::rt::lang_start_internal</text></g><g><title>binary_to_types`std::rt::lang_start::_{{closure}} (96,918 samples, 99.99%)</title><rect x="0.0000%" y="565" width="99.9938%" height="15" fill="rgb(232,107,50)" fg:x="0" fg:w="96918"/><text x="0.2500%" y="575.50">binary_to_types`std::rt::lang_start::_{{closure}}</text></g><g><title>binary_to_types`std::sys_common::backtrace::__rust_begin_short_backtrace (96,918 samples, 99.99%)</title><rect x="0.0000%" y="549" width="99.9938%" height="15" fill="rgb(253,3,0)" fg:x="0" fg:w="96918"/><text x="0.2500%" y="559.50">binary_to_types`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>binary_to_types`binary_to_types::main (96,918 samples, 99.99%)</title><rect x="0.0000%" y="533" width="99.9938%" height="15" fill="rgb(212,99,53)" fg:x="0" fg:w="96918"/><text x="0.2500%" y="543.50">binary_to_types`binary_to_types::main</text></g><g><title>dyld`start (96,919 samples, 99.99%)</title><rect x="0.0000%" y="613" width="99.9948%" height="15" fill="rgb(249,111,54)" fg:x="0" fg:w="96919"/><text x="0.2500%" y="623.50">dyld`start</text></g><g><title>all (96,924 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(249,55,30)" fg:x="0" fg:w="96924"/><text x="0.2500%" y="639.50"></text></g></svg></svg>