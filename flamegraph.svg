<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="661.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="141940"><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (19 samples, 0.01%)</title><rect x="0.0070%" y="405" width="0.0134%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="19"/><text x="0.2570%" y="415.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 0.02%)</title><rect x="0.0211%" y="357" width="0.0218%" height="15" fill="rgb(217,0,24)" fg:x="30" fg:w="31"/><text x="0.2711%" y="367.50"></text></g><g><title>binary_to_types`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (36 samples, 0.03%)</title><rect x="0.0211%" y="373" width="0.0254%" height="15" fill="rgb(221,193,54)" fg:x="30" fg:w="36"/><text x="0.2711%" y="383.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (45 samples, 0.03%)</title><rect x="0.0204%" y="405" width="0.0317%" height="15" fill="rgb(248,212,6)" fg:x="29" fg:w="45"/><text x="0.2704%" y="415.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::get_reachable_subgraph (44 samples, 0.03%)</title><rect x="0.0211%" y="389" width="0.0310%" height="15" fill="rgb(208,68,35)" fg:x="30" fg:w="44"/><text x="0.2711%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (70 samples, 0.05%)</title><rect x="0.0063%" y="421" width="0.0493%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="70"/><text x="0.2563%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="0.0578%" y="405" width="0.0106%" height="15" fill="rgb(207,160,47)" fg:x="82" fg:w="15"/><text x="0.3078%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (25 samples, 0.02%)</title><rect x="0.0697%" y="389" width="0.0176%" height="15" fill="rgb(228,23,34)" fg:x="99" fg:w="25"/><text x="0.3197%" y="399.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;U,T&gt;::get_built_sketch_from_scc (69 samples, 0.05%)</title><rect x="0.0564%" y="421" width="0.0486%" height="15" fill="rgb(218,30,26)" fg:x="80" fg:w="69"/><text x="0.3064%" y="431.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (52 samples, 0.04%)</title><rect x="0.0683%" y="405" width="0.0366%" height="15" fill="rgb(220,122,19)" fg:x="97" fg:w="52"/><text x="0.3183%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="0.1162%" y="389" width="0.0155%" height="15" fill="rgb(250,228,42)" fg:x="165" fg:w="22"/><text x="0.3662%" y="399.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.03%)</title><rect x="0.1134%" y="405" width="0.0303%" height="15" fill="rgb(240,193,28)" fg:x="161" fg:w="43"/><text x="0.3634%" y="415.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (201 samples, 0.14%)</title><rect x="0.0063%" y="453" width="0.1416%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="201"/><text x="0.2563%" y="463.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (201 samples, 0.14%)</title><rect x="0.0063%" y="437" width="0.1416%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="201"/><text x="0.2563%" y="447.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::type_sketch::SketchGraph&lt;binary_type_inference::solver::type_sketch::LatticeBounds&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement&gt;&gt;&gt; (60 samples, 0.04%)</title><rect x="0.1057%" y="421" width="0.0423%" height="15" fill="rgb(217,207,13)" fg:x="150" fg:w="60"/><text x="0.3557%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (215 samples, 0.15%)</title><rect x="0.0056%" y="469" width="0.1515%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="215"/><text x="0.2556%" y="479.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::type_sketch::Sketch&lt;U&gt; as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="0.1606%" y="453" width="0.0127%" height="15" fill="rgb(225,20,46)" fg:x="228" fg:w="18"/><text x="0.4106%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::Sketch&lt;U&gt;::intersect (25 samples, 0.02%)</title><rect x="0.1733%" y="453" width="0.0176%" height="15" fill="rgb(210,31,41)" fg:x="246" fg:w="25"/><text x="0.4233%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::dfa_operations::cartesian_product_internal (19 samples, 0.01%)</title><rect x="0.2057%" y="421" width="0.0134%" height="15" fill="rgb(221,200,47)" fg:x="292" fg:w="19"/><text x="0.4557%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::dfa_operations::intersection (23 samples, 0.02%)</title><rect x="0.2050%" y="437" width="0.0162%" height="15" fill="rgb(226,26,5)" fg:x="291" fg:w="23"/><text x="0.4550%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::Sketch&lt;U&gt;::union (60 samples, 0.04%)</title><rect x="0.1909%" y="453" width="0.0423%" height="15" fill="rgb(249,33,26)" fg:x="271" fg:w="60"/><text x="0.4409%" y="463.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (122 samples, 0.09%)</title><rect x="0.1606%" y="469" width="0.0860%" height="15" fill="rgb(235,183,28)" fg:x="228" fg:w="122"/><text x="0.4106%" y="479.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::type_sketch::Sketch&lt;binary_type_inference::solver::type_sketch::LatticeBounds&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="0.2332%" y="453" width="0.0134%" height="15" fill="rgb(221,5,38)" fg:x="331" fg:w="19"/><text x="0.4832%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::quoetient_graph (22 samples, 0.02%)</title><rect x="0.2515%" y="469" width="0.0155%" height="15" fill="rgb(247,18,42)" fg:x="357" fg:w="22"/><text x="0.5015%" y="479.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::inplace_relable_representative_nodes (21 samples, 0.01%)</title><rect x="0.2804%" y="453" width="0.0148%" height="15" fill="rgb(241,131,45)" fg:x="398" fg:w="21"/><text x="0.5304%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::replace_node (42 samples, 0.03%)</title><rect x="0.2670%" y="469" width="0.0296%" height="15" fill="rgb(249,31,29)" fg:x="379" fg:w="42"/><text x="0.5170%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.01%)</title><rect x="0.3283%" y="389" width="0.0141%" height="15" fill="rgb(225,111,53)" fg:x="466" fg:w="20"/><text x="0.5783%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="0.3283%" y="405" width="0.0148%" height="15" fill="rgb(238,160,17)" fg:x="466" fg:w="21"/><text x="0.5783%" y="415.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement as core::clone::Clone&gt;::clone (32 samples, 0.02%)</title><rect x="0.3262%" y="421" width="0.0225%" height="15" fill="rgb(214,148,48)" fg:x="463" fg:w="32"/><text x="0.5762%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (46 samples, 0.03%)</title><rect x="0.3191%" y="437" width="0.0324%" height="15" fill="rgb(232,36,49)" fg:x="453" fg:w="46"/><text x="0.5691%" y="447.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (31 samples, 0.02%)</title><rect x="0.3537%" y="437" width="0.0218%" height="15" fill="rgb(209,103,24)" fg:x="502" fg:w="31"/><text x="0.6037%" y="447.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::type_sketch::Sketch&lt;U&gt; as core::clone::Clone&gt;::clone (106 samples, 0.07%)</title><rect x="0.3051%" y="453" width="0.0747%" height="15" fill="rgb(229,88,8)" fg:x="433" fg:w="106"/><text x="0.5551%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::replace_node (18 samples, 0.01%)</title><rect x="0.3917%" y="453" width="0.0127%" height="15" fill="rgb(213,181,19)" fg:x="556" fg:w="18"/><text x="0.6417%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::dfa_operations::union (18 samples, 0.01%)</title><rect x="0.4305%" y="437" width="0.0127%" height="15" fill="rgb(254,191,54)" fg:x="611" fg:w="18"/><text x="0.6805%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::Sketch&lt;U&gt;::intersect (39 samples, 0.03%)</title><rect x="0.4192%" y="453" width="0.0275%" height="15" fill="rgb(241,83,37)" fg:x="595" fg:w="39"/><text x="0.6692%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.02%)</title><rect x="0.4474%" y="437" width="0.0190%" height="15" fill="rgb(233,36,39)" fg:x="635" fg:w="27"/><text x="0.6974%" y="447.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement&gt; (39 samples, 0.03%)</title><rect x="0.4474%" y="453" width="0.0275%" height="15" fill="rgb(226,3,54)" fg:x="635" fg:w="39"/><text x="0.6974%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;U,T&gt;::apply_global_instantiations (280 samples, 0.20%)</title><rect x="0.2966%" y="469" width="0.1973%" height="15" fill="rgb(245,192,40)" fg:x="421" fg:w="280"/><text x="0.5466%" y="479.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::add_node (46 samples, 0.03%)</title><rect x="0.5136%" y="453" width="0.0324%" height="15" fill="rgb(238,167,29)" fg:x="729" fg:w="46"/><text x="0.7636%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::merge_nodes (35 samples, 0.02%)</title><rect x="0.5474%" y="453" width="0.0247%" height="15" fill="rgb(232,182,51)" fg:x="777" fg:w="35"/><text x="0.7974%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SketchGraph&lt;T&gt;::get_key_and_weight_for_index (20 samples, 0.01%)</title><rect x="0.5721%" y="453" width="0.0141%" height="15" fill="rgb(231,60,39)" fg:x="812" fg:w="20"/><text x="0.8221%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SketchGraph&lt;T&gt;::tag_base_with_destination_tag (32 samples, 0.02%)</title><rect x="0.5862%" y="453" width="0.0225%" height="15" fill="rgb(208,69,12)" fg:x="832" fg:w="32"/><text x="0.8362%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::insert_dtv (59 samples, 0.04%)</title><rect x="0.6087%" y="453" width="0.0416%" height="15" fill="rgb(235,93,37)" fg:x="864" fg:w="59"/><text x="0.8587%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::add_node (44 samples, 0.03%)</title><rect x="0.6193%" y="437" width="0.0310%" height="15" fill="rgb(213,116,39)" fg:x="879" fg:w="44"/><text x="0.8693%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;U,T&gt;::build_and_label_scc_sketch::_{{closure}} (237 samples, 0.17%)</title><rect x="0.4939%" y="469" width="0.1670%" height="15" fill="rgb(222,207,29)" fg:x="701" fg:w="237"/><text x="0.7439%" y="479.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;U,T&gt;::get_built_sketch_from_scc (16 samples, 0.01%)</title><rect x="0.6820%" y="421" width="0.0113%" height="15" fill="rgb(206,96,30)" fg:x="968" fg:w="16"/><text x="0.9320%" y="431.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::type_sketch::SketchGraph&lt;binary_type_inference::solver::type_sketch::LatticeBounds&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement&gt;&gt;&gt; (20 samples, 0.01%)</title><rect x="0.6961%" y="421" width="0.0141%" height="15" fill="rgb(218,138,4)" fg:x="988" fg:w="20"/><text x="0.9461%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (72 samples, 0.05%)</title><rect x="0.6608%" y="453" width="0.0507%" height="15" fill="rgb(250,191,14)" fg:x="938" fg:w="72"/><text x="0.9108%" y="463.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (67 samples, 0.05%)</title><rect x="0.6644%" y="437" width="0.0472%" height="15" fill="rgb(239,60,40)" fg:x="943" fg:w="67"/><text x="0.9144%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;U,T&gt;::get_built_sketch_from_scc (27 samples, 0.02%)</title><rect x="0.7123%" y="325" width="0.0190%" height="15" fill="rgb(206,27,48)" fg:x="1011" fg:w="27"/><text x="0.9623%" y="335.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="0.7158%" y="309" width="0.0155%" height="15" fill="rgb(225,35,8)" fg:x="1016" fg:w="22"/><text x="0.9658%" y="319.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (45 samples, 0.03%)</title><rect x="0.7116%" y="341" width="0.0317%" height="15" fill="rgb(250,213,24)" fg:x="1010" fg:w="45"/><text x="0.9616%" y="351.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::type_sketch::SketchGraph&lt;binary_type_inference::solver::type_sketch::LatticeBounds&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="0.7313%" y="325" width="0.0120%" height="15" fill="rgb(247,123,22)" fg:x="1038" fg:w="17"/><text x="0.9813%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (46 samples, 0.03%)</title><rect x="0.7116%" y="357" width="0.0324%" height="15" fill="rgb(231,138,38)" fg:x="1010" fg:w="46"/><text x="0.9616%" y="367.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::dfa_operations::intersection (20 samples, 0.01%)</title><rect x="0.7461%" y="357" width="0.0141%" height="15" fill="rgb(231,145,46)" fg:x="1059" fg:w="20"/><text x="0.9961%" y="367.50"></text></g><g><title>binary_to_types`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (19 samples, 0.01%)</title><rect x="0.7722%" y="325" width="0.0134%" height="15" fill="rgb(251,118,11)" fg:x="1096" fg:w="19"/><text x="1.0222%" y="335.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 0.01%)</title><rect x="0.7722%" y="309" width="0.0134%" height="15" fill="rgb(217,147,25)" fg:x="1096" fg:w="19"/><text x="1.0222%" y="319.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::get_reachable_subgraph (21 samples, 0.01%)</title><rect x="0.7715%" y="341" width="0.0148%" height="15" fill="rgb(247,81,37)" fg:x="1095" fg:w="21"/><text x="1.0215%" y="351.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::Sketch&lt;U&gt;::get_subsketch_at_path (32 samples, 0.02%)</title><rect x="0.7686%" y="357" width="0.0225%" height="15" fill="rgb(209,12,38)" fg:x="1091" fg:w="32"/><text x="1.0186%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (120 samples, 0.08%)</title><rect x="0.7116%" y="421" width="0.0845%" height="15" fill="rgb(227,1,9)" fg:x="1010" fg:w="120"/><text x="0.9616%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (120 samples, 0.08%)</title><rect x="0.7116%" y="405" width="0.0845%" height="15" fill="rgb(248,47,43)" fg:x="1010" fg:w="120"/><text x="0.9616%" y="415.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (120 samples, 0.08%)</title><rect x="0.7116%" y="389" width="0.0845%" height="15" fill="rgb(221,10,30)" fg:x="1010" fg:w="120"/><text x="0.9616%" y="399.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (120 samples, 0.08%)</title><rect x="0.7116%" y="373" width="0.0845%" height="15" fill="rgb(210,229,1)" fg:x="1010" fg:w="120"/><text x="0.9616%" y="383.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.01%)</title><rect x="0.7989%" y="309" width="0.0113%" height="15" fill="rgb(222,148,37)" fg:x="1134" fg:w="16"/><text x="1.0489%" y="319.50"></text></g><g><title>binary_to_types`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 0.01%)</title><rect x="0.7989%" y="325" width="0.0127%" height="15" fill="rgb(234,67,33)" fg:x="1134" fg:w="18"/><text x="1.0489%" y="335.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::get_reachable_subgraph (21 samples, 0.01%)</title><rect x="0.7989%" y="341" width="0.0148%" height="15" fill="rgb(247,98,35)" fg:x="1134" fg:w="21"/><text x="1.0489%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 0.02%)</title><rect x="0.7961%" y="373" width="0.0183%" height="15" fill="rgb(247,138,52)" fg:x="1130" fg:w="26"/><text x="1.0461%" y="383.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (22 samples, 0.02%)</title><rect x="0.7989%" y="357" width="0.0155%" height="15" fill="rgb(213,79,30)" fg:x="1134" fg:w="22"/><text x="1.0489%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (51 samples, 0.04%)</title><rect x="0.7961%" y="421" width="0.0359%" height="15" fill="rgb(246,177,23)" fg:x="1130" fg:w="51"/><text x="1.0461%" y="431.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.04%)</title><rect x="0.7961%" y="405" width="0.0359%" height="15" fill="rgb(230,62,27)" fg:x="1130" fg:w="51"/><text x="1.0461%" y="415.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (51 samples, 0.04%)</title><rect x="0.7961%" y="389" width="0.0359%" height="15" fill="rgb(216,154,8)" fg:x="1130" fg:w="51"/><text x="1.0461%" y="399.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;U,T&gt;::collect_aliases_for_formal (176 samples, 0.12%)</title><rect x="0.7116%" y="437" width="0.1240%" height="15" fill="rgb(244,35,45)" fg:x="1010" fg:w="176"/><text x="0.9616%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="0.8398%" y="293" width="0.0127%" height="15" fill="rgb(251,115,12)" fg:x="1192" fg:w="18"/><text x="1.0898%" y="303.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="0.8412%" y="277" width="0.0113%" height="15" fill="rgb(240,54,50)" fg:x="1194" fg:w="16"/><text x="1.0912%" y="287.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (26 samples, 0.02%)</title><rect x="0.8546%" y="277" width="0.0183%" height="15" fill="rgb(233,84,52)" fg:x="1213" fg:w="26"/><text x="1.1046%" y="287.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="0.8729%" y="277" width="0.0106%" height="15" fill="rgb(207,117,47)" fg:x="1239" fg:w="15"/><text x="1.1229%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.01%)</title><rect x="0.8729%" y="261" width="0.0106%" height="15" fill="rgb(249,43,39)" fg:x="1239" fg:w="15"/><text x="1.1229%" y="271.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (57 samples, 0.04%)</title><rect x="0.8525%" y="293" width="0.0402%" height="15" fill="rgb(209,38,44)" fg:x="1210" fg:w="57"/><text x="1.1025%" y="303.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;U,T&gt;::get_built_sketch_from_scc (77 samples, 0.05%)</title><rect x="0.8391%" y="309" width="0.0542%" height="15" fill="rgb(236,212,23)" fg:x="1191" fg:w="77"/><text x="1.0891%" y="319.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="0.8933%" y="293" width="0.0106%" height="15" fill="rgb(242,79,21)" fg:x="1268" fg:w="15"/><text x="1.1433%" y="303.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="0.9053%" y="277" width="0.0141%" height="15" fill="rgb(211,96,35)" fg:x="1285" fg:w="20"/><text x="1.1553%" y="287.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="0.9039%" y="293" width="0.0254%" height="15" fill="rgb(253,215,40)" fg:x="1283" fg:w="36"/><text x="1.1539%" y="303.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::type_sketch::SketchGraph&lt;binary_type_inference::solver::type_sketch::LatticeBounds&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement&gt;&gt;&gt; (57 samples, 0.04%)</title><rect x="0.8933%" y="309" width="0.0402%" height="15" fill="rgb(211,81,21)" fg:x="1268" fg:w="57"/><text x="1.1433%" y="319.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (135 samples, 0.10%)</title><rect x="0.8391%" y="341" width="0.0951%" height="15" fill="rgb(208,190,38)" fg:x="1191" fg:w="135"/><text x="1.0891%" y="351.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (135 samples, 0.10%)</title><rect x="0.8391%" y="325" width="0.0951%" height="15" fill="rgb(235,213,38)" fg:x="1191" fg:w="135"/><text x="1.0891%" y="335.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (23 samples, 0.02%)</title><rect x="0.9532%" y="309" width="0.0162%" height="15" fill="rgb(237,122,38)" fg:x="1353" fg:w="23"/><text x="1.2032%" y="319.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::dfa_operations::cartesian_product_internal (42 samples, 0.03%)</title><rect x="0.9441%" y="325" width="0.0296%" height="15" fill="rgb(244,218,35)" fg:x="1340" fg:w="42"/><text x="1.1941%" y="335.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::dfa_operations::intersection (60 samples, 0.04%)</title><rect x="0.9384%" y="341" width="0.0423%" height="15" fill="rgb(240,68,47)" fg:x="1332" fg:w="60"/><text x="1.1884%" y="351.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::dfa_operations::cartesian_product_internal (32 samples, 0.02%)</title><rect x="0.9828%" y="325" width="0.0225%" height="15" fill="rgb(210,16,53)" fg:x="1395" fg:w="32"/><text x="1.2328%" y="335.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::dfa_operations::union (39 samples, 0.03%)</title><rect x="0.9814%" y="341" width="0.0275%" height="15" fill="rgb(235,124,12)" fg:x="1393" fg:w="39"/><text x="1.2314%" y="351.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (30 samples, 0.02%)</title><rect x="1.0173%" y="293" width="0.0211%" height="15" fill="rgb(224,169,11)" fg:x="1444" fg:w="30"/><text x="1.2673%" y="303.50"></text></g><g><title>binary_to_types`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15 samples, 0.01%)</title><rect x="1.0279%" y="277" width="0.0106%" height="15" fill="rgb(250,166,2)" fg:x="1459" fg:w="15"/><text x="1.2779%" y="287.50"></text></g><g><title>binary_to_types`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (31 samples, 0.02%)</title><rect x="1.0173%" y="309" width="0.0218%" height="15" fill="rgb(242,216,29)" fg:x="1444" fg:w="31"/><text x="1.2673%" y="319.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::get_reachable_subgraph (34 samples, 0.02%)</title><rect x="1.0173%" y="325" width="0.0240%" height="15" fill="rgb(230,116,27)" fg:x="1444" fg:w="34"/><text x="1.2673%" y="335.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::relable_representative_nodes (16 samples, 0.01%)</title><rect x="1.0413%" y="325" width="0.0113%" height="15" fill="rgb(228,99,48)" fg:x="1478" fg:w="16"/><text x="1.2913%" y="335.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::Sketch&lt;U&gt;::get_subsketch_at_path (61 samples, 0.04%)</title><rect x="1.0131%" y="341" width="0.0430%" height="15" fill="rgb(253,11,6)" fg:x="1438" fg:w="61"/><text x="1.2631%" y="351.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::type_sketch::Sketch&lt;binary_type_inference::solver::type_sketch::LatticeBounds&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="1.0561%" y="341" width="0.0127%" height="15" fill="rgb(247,143,39)" fg:x="1499" fg:w="18"/><text x="1.3061%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (342 samples, 0.24%)</title><rect x="0.8356%" y="389" width="0.2409%" height="15" fill="rgb(236,97,10)" fg:x="1186" fg:w="342"/><text x="1.0856%" y="399.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (342 samples, 0.24%)</title><rect x="0.8356%" y="373" width="0.2409%" height="15" fill="rgb(233,208,19)" fg:x="1186" fg:w="342"/><text x="1.0856%" y="383.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (342 samples, 0.24%)</title><rect x="0.8356%" y="357" width="0.2409%" height="15" fill="rgb(216,164,2)" fg:x="1186" fg:w="342"/><text x="1.0856%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (343 samples, 0.24%)</title><rect x="0.8356%" y="405" width="0.2417%" height="15" fill="rgb(220,129,5)" fg:x="1186" fg:w="343"/><text x="1.0856%" y="415.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.01%)</title><rect x="1.0864%" y="293" width="0.0148%" height="15" fill="rgb(242,17,10)" fg:x="1542" fg:w="21"/><text x="1.3364%" y="303.50"></text></g><g><title>binary_to_types`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (25 samples, 0.02%)</title><rect x="1.0864%" y="309" width="0.0176%" height="15" fill="rgb(242,107,0)" fg:x="1542" fg:w="25"/><text x="1.3364%" y="319.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (27 samples, 0.02%)</title><rect x="1.0864%" y="341" width="0.0190%" height="15" fill="rgb(251,28,31)" fg:x="1542" fg:w="27"/><text x="1.3364%" y="351.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::get_reachable_subgraph (27 samples, 0.02%)</title><rect x="1.0864%" y="325" width="0.0190%" height="15" fill="rgb(233,223,10)" fg:x="1542" fg:w="27"/><text x="1.3364%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (42 samples, 0.03%)</title><rect x="1.0772%" y="357" width="0.0296%" height="15" fill="rgb(215,21,27)" fg:x="1529" fg:w="42"/><text x="1.3272%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (18 samples, 0.01%)</title><rect x="1.1174%" y="325" width="0.0127%" height="15" fill="rgb(232,23,21)" fg:x="1586" fg:w="18"/><text x="1.3674%" y="335.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (39 samples, 0.03%)</title><rect x="1.1174%" y="341" width="0.0275%" height="15" fill="rgb(244,5,23)" fg:x="1586" fg:w="39"/><text x="1.3674%" y="351.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;U,T&gt;::get_built_sketch_from_scc (55 samples, 0.04%)</title><rect x="1.1068%" y="357" width="0.0387%" height="15" fill="rgb(226,81,46)" fg:x="1571" fg:w="55"/><text x="1.3568%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="1.1547%" y="325" width="0.0141%" height="15" fill="rgb(247,70,30)" fg:x="1639" fg:w="20"/><text x="1.4047%" y="335.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="1.1540%" y="341" width="0.0218%" height="15" fill="rgb(212,68,19)" fg:x="1638" fg:w="31"/><text x="1.4040%" y="351.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::type_sketch::SketchGraph&lt;binary_type_inference::solver::type_sketch::LatticeBounds&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement&gt;&gt;&gt; (46 samples, 0.03%)</title><rect x="1.1456%" y="357" width="0.0324%" height="15" fill="rgb(240,187,13)" fg:x="1626" fg:w="46"/><text x="1.3956%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (145 samples, 0.10%)</title><rect x="1.0772%" y="405" width="0.1022%" height="15" fill="rgb(223,113,26)" fg:x="1529" fg:w="145"/><text x="1.3272%" y="415.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (145 samples, 0.10%)</title><rect x="1.0772%" y="389" width="0.1022%" height="15" fill="rgb(206,192,2)" fg:x="1529" fg:w="145"/><text x="1.3272%" y="399.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (145 samples, 0.10%)</title><rect x="1.0772%" y="373" width="0.1022%" height="15" fill="rgb(241,108,4)" fg:x="1529" fg:w="145"/><text x="1.3272%" y="383.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SketchGraph&lt;U&gt;::get_representing_sketch (15 samples, 0.01%)</title><rect x="1.1794%" y="405" width="0.0106%" height="15" fill="rgb(247,173,49)" fg:x="1674" fg:w="15"/><text x="1.4294%" y="415.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (681 samples, 0.48%)</title><rect x="0.7116%" y="453" width="0.4798%" height="15" fill="rgb(224,114,35)" fg:x="1010" fg:w="681"/><text x="0.9616%" y="463.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (505 samples, 0.36%)</title><rect x="0.8356%" y="437" width="0.3558%" height="15" fill="rgb(245,159,27)" fg:x="1186" fg:w="505"/><text x="1.0856%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;U,T&gt;::collect_aliases_for_formal (505 samples, 0.36%)</title><rect x="0.8356%" y="421" width="0.3558%" height="15" fill="rgb(245,172,44)" fg:x="1186" fg:w="505"/><text x="1.0856%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="1.1956%" y="437" width="0.0127%" height="15" fill="rgb(236,23,11)" fg:x="1697" fg:w="18"/><text x="1.4456%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (16 samples, 0.01%)</title><rect x="1.2160%" y="405" width="0.0113%" height="15" fill="rgb(205,117,38)" fg:x="1726" fg:w="16"/><text x="1.4660%" y="415.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::constraints::DerivedTypeVar as core::clone::Clone&gt;::clone (20 samples, 0.01%)</title><rect x="1.2273%" y="405" width="0.0141%" height="15" fill="rgb(237,72,25)" fg:x="1742" fg:w="20"/><text x="1.4773%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (48 samples, 0.03%)</title><rect x="1.2153%" y="421" width="0.0338%" height="15" fill="rgb(244,70,9)" fg:x="1725" fg:w="48"/><text x="1.4653%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="1.2491%" y="421" width="0.0127%" height="15" fill="rgb(217,125,39)" fg:x="1773" fg:w="18"/><text x="1.4991%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.01%)</title><rect x="1.2505%" y="405" width="0.0113%" height="15" fill="rgb(235,36,10)" fg:x="1775" fg:w="16"/><text x="1.5005%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="1.2618%" y="421" width="0.0106%" height="15" fill="rgb(251,123,47)" fg:x="1791" fg:w="15"/><text x="1.5118%" y="431.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (97 samples, 0.07%)</title><rect x="1.2083%" y="437" width="0.0683%" height="15" fill="rgb(221,13,13)" fg:x="1715" fg:w="97"/><text x="1.4583%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;U,T&gt;::get_built_sketch_from_scc (117 samples, 0.08%)</title><rect x="1.1949%" y="453" width="0.0824%" height="15" fill="rgb(238,131,9)" fg:x="1696" fg:w="117"/><text x="1.4449%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="1.2773%" y="437" width="0.0106%" height="15" fill="rgb(211,50,8)" fg:x="1813" fg:w="15"/><text x="1.5273%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="1.2900%" y="421" width="0.0162%" height="15" fill="rgb(245,182,24)" fg:x="1831" fg:w="23"/><text x="1.5400%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.01%)</title><rect x="1.3069%" y="421" width="0.0120%" height="15" fill="rgb(242,14,37)" fg:x="1855" fg:w="17"/><text x="1.5569%" y="431.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.04%)</title><rect x="1.2879%" y="437" width="0.0380%" height="15" fill="rgb(246,228,12)" fg:x="1828" fg:w="54"/><text x="1.5379%" y="447.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::type_sketch::SketchGraph&lt;binary_type_inference::solver::type_sketch::LatticeBounds&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement&gt;&gt;&gt; (72 samples, 0.05%)</title><rect x="1.2773%" y="453" width="0.0507%" height="15" fill="rgb(213,55,15)" fg:x="1813" fg:w="72"/><text x="1.5273%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;U,T&gt;::collect_aliases (948 samples, 0.67%)</title><rect x="0.6608%" y="469" width="0.6679%" height="15" fill="rgb(209,9,3)" fg:x="938" fg:w="948"/><text x="0.9108%" y="479.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::generate_quotient_groups (18 samples, 0.01%)</title><rect x="1.3604%" y="469" width="0.0127%" height="15" fill="rgb(230,59,30)" fg:x="1931" fg:w="18"/><text x="1.6104%" y="479.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::type_sketch::Sketch&lt;binary_type_inference::solver::type_sketch::LatticeBounds&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement&gt;&gt;&gt; (20 samples, 0.01%)</title><rect x="1.3745%" y="469" width="0.0141%" height="15" fill="rgb(209,121,21)" fg:x="1951" fg:w="20"/><text x="1.6245%" y="479.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;U,T&gt;::build (1,973 samples, 1.39%)</title><rect x="0.0035%" y="485" width="1.3900%" height="15" fill="rgb(220,109,13)" fg:x="5" fg:w="1973"/><text x="0.2535%" y="495.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;U,T&gt;::build_global_type_graph (35 samples, 0.02%)</title><rect x="1.3935%" y="485" width="0.0247%" height="15" fill="rgb(232,18,1)" fg:x="1978" fg:w="35"/><text x="1.6435%" y="495.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::type_sketch::SCCSketchsBuilder&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement,binary_type_inference::solver::type_lattice::EnumeratedNamedLattice&gt;&gt; (15 samples, 0.01%)</title><rect x="1.4182%" y="485" width="0.0106%" height="15" fill="rgb(215,41,42)" fg:x="2013" fg:w="15"/><text x="1.6682%" y="495.50"></text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::get_labeled_sketch_graph (2,027 samples, 1.43%)</title><rect x="0.0014%" y="501" width="1.4281%" height="15" fill="rgb(224,123,36)" fg:x="2" fg:w="2027"/><text x="0.2514%" y="511.50"></text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::graph_from_project (26 samples, 0.02%)</title><rect x="1.4330%" y="485" width="0.0183%" height="15" fill="rgb(240,125,3)" fg:x="2034" fg:w="26"/><text x="1.6830%" y="495.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::graph::get_program_cfg (26 samples, 0.02%)</title><rect x="1.4330%" y="469" width="0.0183%" height="15" fill="rgb(205,98,50)" fg:x="2034" fg:w="26"/><text x="1.6830%" y="479.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (20 samples, 0.01%)</title><rect x="1.4682%" y="421" width="0.0141%" height="15" fill="rgb(205,185,37)" fg:x="2084" fg:w="20"/><text x="1.7182%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.01%)</title><rect x="1.4823%" y="421" width="0.0141%" height="15" fill="rgb(238,207,15)" fg:x="2104" fg:w="20"/><text x="1.7323%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (18 samples, 0.01%)</title><rect x="1.5211%" y="389" width="0.0127%" height="15" fill="rgb(213,199,42)" fg:x="2159" fg:w="18"/><text x="1.7711%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (76 samples, 0.05%)</title><rect x="1.4964%" y="421" width="0.0535%" height="15" fill="rgb(235,201,11)" fg:x="2124" fg:w="76"/><text x="1.7464%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (69 samples, 0.05%)</title><rect x="1.5013%" y="405" width="0.0486%" height="15" fill="rgb(207,46,11)" fg:x="2131" fg:w="69"/><text x="1.7513%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (130 samples, 0.09%)</title><rect x="1.4633%" y="437" width="0.0916%" height="15" fill="rgb(241,35,35)" fg:x="2077" fg:w="130"/><text x="1.7133%" y="447.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (19 samples, 0.01%)</title><rect x="1.5563%" y="437" width="0.0134%" height="15" fill="rgb(243,32,47)" fg:x="2209" fg:w="19"/><text x="1.8063%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (183 samples, 0.13%)</title><rect x="1.4548%" y="453" width="0.1289%" height="15" fill="rgb(247,202,23)" fg:x="2065" fg:w="183"/><text x="1.7048%" y="463.50"></text></g><g><title>binary_to_types`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (199 samples, 0.14%)</title><rect x="1.4541%" y="469" width="0.1402%" height="15" fill="rgb(219,102,11)" fg:x="2064" fg:w="199"/><text x="1.7041%" y="479.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (15 samples, 0.01%)</title><rect x="1.6232%" y="405" width="0.0106%" height="15" fill="rgb(243,110,44)" fg:x="2304" fg:w="15"/><text x="1.8732%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="1.6232%" y="389" width="0.0106%" height="15" fill="rgb(222,74,54)" fg:x="2304" fg:w="15"/><text x="1.8732%" y="399.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::pointer_inference::PointerInference::compute (66 samples, 0.05%)</title><rect x="1.6183%" y="437" width="0.0465%" height="15" fill="rgb(216,99,12)" fg:x="2297" fg:w="66"/><text x="1.8683%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::compute_with_max_steps (65 samples, 0.05%)</title><rect x="1.6190%" y="421" width="0.0458%" height="15" fill="rgb(226,22,26)" fg:x="2298" fg:w="65"/><text x="1.8690%" y="431.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::pointer_inference::context::trait_impls::_&lt;impl cwe_checker_lib::analysis::forward_interprocedural_fixpoint::Context for cwe_checker_lib::analysis::pointer_inference::context::Context&gt;::update_def (34 samples, 0.02%)</title><rect x="1.6408%" y="405" width="0.0240%" height="15" fill="rgb(217,163,10)" fg:x="2329" fg:w="34"/><text x="1.8908%" y="415.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::pointer_inference::PointerInference::new (16 samples, 0.01%)</title><rect x="1.6648%" y="437" width="0.0113%" height="15" fill="rgb(213,25,53)" fg:x="2363" fg:w="16"/><text x="1.9148%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::pointer_inference::context::trait_impls::_&lt;impl cwe_checker_lib::analysis::forward_interprocedural_fixpoint::Context for cwe_checker_lib::analysis::pointer_inference::context::Context&gt;::update_def (33 samples, 0.02%)</title><rect x="1.6768%" y="437" width="0.0232%" height="15" fill="rgb(252,105,26)" fg:x="2380" fg:w="33"/><text x="1.9268%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::pointer_inference::state::access_handling::_&lt;impl cwe_checker_lib::analysis::pointer_inference::state::State&gt;::eval (15 samples, 0.01%)</title><rect x="1.7000%" y="437" width="0.0106%" height="15" fill="rgb(220,39,43)" fg:x="2413" fg:w="15"/><text x="1.9500%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::pointer_inference::run (156 samples, 0.11%)</title><rect x="1.6049%" y="453" width="0.1099%" height="15" fill="rgb(229,68,48)" fg:x="2278" fg:w="156"/><text x="1.8549%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::node_context::points_to::run_analysis (170 samples, 0.12%)</title><rect x="1.5957%" y="469" width="0.1198%" height="15" fill="rgb(252,8,32)" fg:x="2265" fg:w="170"/><text x="1.8457%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (33 samples, 0.02%)</title><rect x="1.7183%" y="421" width="0.0232%" height="15" fill="rgb(223,20,43)" fg:x="2439" fg:w="33"/><text x="1.9683%" y="431.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;T&gt; as core::clone::Clone&gt;::clone (33 samples, 0.02%)</title><rect x="1.7183%" y="405" width="0.0232%" height="15" fill="rgb(229,81,49)" fg:x="2439" fg:w="33"/><text x="1.9683%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (33 samples, 0.02%)</title><rect x="1.7183%" y="389" width="0.0232%" height="15" fill="rgb(236,28,36)" fg:x="2439" fg:w="33"/><text x="1.9683%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (34 samples, 0.02%)</title><rect x="1.7183%" y="453" width="0.0240%" height="15" fill="rgb(249,185,26)" fg:x="2439" fg:w="34"/><text x="1.9683%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (34 samples, 0.02%)</title><rect x="1.7183%" y="437" width="0.0240%" height="15" fill="rgb(249,174,33)" fg:x="2439" fg:w="34"/><text x="1.9683%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (28 samples, 0.02%)</title><rect x="1.7493%" y="373" width="0.0197%" height="15" fill="rgb(233,201,37)" fg:x="2483" fg:w="28"/><text x="1.9993%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (37 samples, 0.03%)</title><rect x="1.7479%" y="405" width="0.0261%" height="15" fill="rgb(221,78,26)" fg:x="2481" fg:w="37"/><text x="1.9979%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (37 samples, 0.03%)</title><rect x="1.7479%" y="389" width="0.0261%" height="15" fill="rgb(250,127,30)" fg:x="2481" fg:w="37"/><text x="1.9979%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="1.7747%" y="405" width="0.0106%" height="15" fill="rgb(230,49,44)" fg:x="2519" fg:w="15"/><text x="2.0247%" y="415.50"></text></g><g><title>binary_to_types`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (17 samples, 0.01%)</title><rect x="1.8015%" y="389" width="0.0120%" height="15" fill="rgb(229,67,23)" fg:x="2557" fg:w="17"/><text x="2.0515%" y="399.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::analysis::reaching_definitions::TermSet as cwe_checker_lib::abstract_domain::AbstractDomain&gt;::merge (40 samples, 0.03%)</title><rect x="1.7895%" y="405" width="0.0282%" height="15" fill="rgb(249,83,47)" fg:x="2540" fg:w="40"/><text x="2.0395%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (16 samples, 0.01%)</title><rect x="1.8219%" y="405" width="0.0113%" height="15" fill="rgb(215,43,3)" fg:x="2586" fg:w="16"/><text x="2.0719%" y="415.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as cwe_checker_lib::abstract_domain::AbstractDomain&gt;::merge (125 samples, 0.09%)</title><rect x="1.7458%" y="421" width="0.0881%" height="15" fill="rgb(238,154,13)" fg:x="2478" fg:w="125"/><text x="1.9958%" y="431.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (38 samples, 0.03%)</title><rect x="1.8451%" y="373" width="0.0268%" height="15" fill="rgb(219,56,2)" fg:x="2619" fg:w="38"/><text x="2.0951%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (27 samples, 0.02%)</title><rect x="1.8719%" y="373" width="0.0190%" height="15" fill="rgb(233,0,4)" fg:x="2657" fg:w="27"/><text x="2.1219%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (31 samples, 0.02%)</title><rect x="1.8952%" y="357" width="0.0218%" height="15" fill="rgb(235,30,7)" fg:x="2690" fg:w="31"/><text x="2.1452%" y="367.50"></text></g><g><title>binary_to_types`alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (20 samples, 0.01%)</title><rect x="1.9170%" y="357" width="0.0141%" height="15" fill="rgb(250,79,13)" fg:x="2721" fg:w="20"/><text x="2.1670%" y="367.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (101 samples, 0.07%)</title><rect x="1.8916%" y="373" width="0.0712%" height="15" fill="rgb(211,146,34)" fg:x="2685" fg:w="101"/><text x="2.1416%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (45 samples, 0.03%)</title><rect x="1.9311%" y="357" width="0.0317%" height="15" fill="rgb(228,22,38)" fg:x="2741" fg:w="45"/><text x="2.1811%" y="367.50"></text></g><g><title>binary_to_types`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 0.01%)</title><rect x="1.9628%" y="373" width="0.0113%" height="15" fill="rgb(235,168,5)" fg:x="2786" fg:w="16"/><text x="2.2128%" y="383.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (235 samples, 0.17%)</title><rect x="1.8346%" y="389" width="0.1656%" height="15" fill="rgb(221,155,16)" fg:x="2604" fg:w="235"/><text x="2.0846%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (37 samples, 0.03%)</title><rect x="1.9741%" y="373" width="0.0261%" height="15" fill="rgb(215,215,53)" fg:x="2802" fg:w="37"/><text x="2.2241%" y="383.50"></text></g><g><title>binary_to_types`core::cmp::PartialOrd::le (239 samples, 0.17%)</title><rect x="1.8346%" y="421" width="0.1684%" height="15" fill="rgb(223,4,10)" fg:x="2604" fg:w="239"/><text x="2.0846%" y="431.50"></text></g><g><title>binary_to_types`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (239 samples, 0.17%)</title><rect x="1.8346%" y="405" width="0.1684%" height="15" fill="rgb(234,103,6)" fg:x="2604" fg:w="239"/><text x="2.0846%" y="415.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::forward_interprocedural_fixpoint::GeneralizedContext&lt;T&gt; as cwe_checker_lib::analysis::fixpoint::Context&gt;::merge (367 samples, 0.26%)</title><rect x="1.7458%" y="453" width="0.2586%" height="15" fill="rgb(227,97,0)" fg:x="2478" fg:w="367"/><text x="1.9958%" y="463.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::analysis::reaching_definitions::Context as cwe_checker_lib::analysis::forward_interprocedural_fixpoint::Context&gt;::merge (367 samples, 0.26%)</title><rect x="1.7458%" y="437" width="0.2586%" height="15" fill="rgb(234,150,53)" fg:x="2478" fg:w="367"/><text x="1.9958%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (16 samples, 0.01%)</title><rect x="2.0072%" y="373" width="0.0113%" height="15" fill="rgb(228,201,54)" fg:x="2849" fg:w="16"/><text x="2.2572%" y="383.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::analysis::reaching_definitions::Context as cwe_checker_lib::analysis::forward_interprocedural_fixpoint::Context&gt;::update_call_stub (20 samples, 0.01%)</title><rect x="2.0065%" y="437" width="0.0141%" height="15" fill="rgb(222,22,37)" fg:x="2848" fg:w="20"/><text x="2.2565%" y="447.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as core::ops::deref::DerefMut&gt;::deref_mut (20 samples, 0.01%)</title><rect x="2.0065%" y="421" width="0.0141%" height="15" fill="rgb(237,53,32)" fg:x="2848" fg:w="20"/><text x="2.2565%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (20 samples, 0.01%)</title><rect x="2.0065%" y="405" width="0.0141%" height="15" fill="rgb(233,25,53)" fg:x="2848" fg:w="20"/><text x="2.2565%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (20 samples, 0.01%)</title><rect x="2.0065%" y="389" width="0.0141%" height="15" fill="rgb(210,40,34)" fg:x="2848" fg:w="20"/><text x="2.2565%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (49 samples, 0.03%)</title><rect x="2.0452%" y="389" width="0.0345%" height="15" fill="rgb(241,220,44)" fg:x="2903" fg:w="49"/><text x="2.2952%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 0.01%)</title><rect x="2.0671%" y="373" width="0.0127%" height="15" fill="rgb(235,28,35)" fg:x="2934" fg:w="18"/><text x="2.3171%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.01%)</title><rect x="2.0678%" y="357" width="0.0120%" height="15" fill="rgb(210,56,17)" fg:x="2935" fg:w="17"/><text x="2.3178%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (38 samples, 0.03%)</title><rect x="2.1086%" y="357" width="0.0268%" height="15" fill="rgb(224,130,29)" fg:x="2993" fg:w="38"/><text x="2.3586%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (102 samples, 0.07%)</title><rect x="2.0798%" y="389" width="0.0719%" height="15" fill="rgb(235,212,8)" fg:x="2952" fg:w="102"/><text x="2.3298%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (84 samples, 0.06%)</title><rect x="2.0924%" y="373" width="0.0592%" height="15" fill="rgb(223,33,50)" fg:x="2970" fg:w="84"/><text x="2.3424%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (23 samples, 0.02%)</title><rect x="2.1354%" y="357" width="0.0162%" height="15" fill="rgb(219,149,13)" fg:x="3031" fg:w="23"/><text x="2.3854%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (191 samples, 0.13%)</title><rect x="2.0276%" y="405" width="0.1346%" height="15" fill="rgb(250,156,29)" fg:x="2878" fg:w="191"/><text x="2.2776%" y="415.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (26 samples, 0.02%)</title><rect x="2.1657%" y="405" width="0.0183%" height="15" fill="rgb(216,193,19)" fg:x="3074" fg:w="26"/><text x="2.4157%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.03%)</title><rect x="2.1854%" y="405" width="0.0261%" height="15" fill="rgb(216,135,14)" fg:x="3102" fg:w="37"/><text x="2.4354%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.01%)</title><rect x="2.2009%" y="389" width="0.0106%" height="15" fill="rgb(241,47,5)" fg:x="3124" fg:w="15"/><text x="2.4509%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (304 samples, 0.21%)</title><rect x="2.0241%" y="421" width="0.2142%" height="15" fill="rgb(233,42,35)" fg:x="2873" fg:w="304"/><text x="2.2741%" y="431.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (328 samples, 0.23%)</title><rect x="2.0241%" y="437" width="0.2311%" height="15" fill="rgb(231,13,6)" fg:x="2873" fg:w="328"/><text x="2.2741%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (24 samples, 0.02%)</title><rect x="2.3721%" y="293" width="0.0169%" height="15" fill="rgb(207,181,40)" fg:x="3367" fg:w="24"/><text x="2.6221%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (95 samples, 0.07%)</title><rect x="2.3552%" y="325" width="0.0669%" height="15" fill="rgb(254,173,49)" fg:x="3343" fg:w="95"/><text x="2.6052%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (87 samples, 0.06%)</title><rect x="2.3609%" y="309" width="0.0613%" height="15" fill="rgb(221,1,38)" fg:x="3351" fg:w="87"/><text x="2.6109%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (47 samples, 0.03%)</title><rect x="2.3890%" y="293" width="0.0331%" height="15" fill="rgb(206,124,46)" fg:x="3391" fg:w="47"/><text x="2.6390%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (112 samples, 0.08%)</title><rect x="2.3454%" y="341" width="0.0789%" height="15" fill="rgb(249,21,11)" fg:x="3329" fg:w="112"/><text x="2.5954%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (179 samples, 0.13%)</title><rect x="2.3038%" y="357" width="0.1261%" height="15" fill="rgb(222,201,40)" fg:x="3270" fg:w="179"/><text x="2.5538%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (25 samples, 0.02%)</title><rect x="2.4581%" y="309" width="0.0176%" height="15" fill="rgb(235,61,29)" fg:x="3489" fg:w="25"/><text x="2.7081%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (60 samples, 0.04%)</title><rect x="2.4362%" y="341" width="0.0423%" height="15" fill="rgb(219,207,3)" fg:x="3458" fg:w="60"/><text x="2.6862%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (39 samples, 0.03%)</title><rect x="2.4510%" y="325" width="0.0275%" height="15" fill="rgb(222,56,46)" fg:x="3479" fg:w="39"/><text x="2.7010%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (73 samples, 0.05%)</title><rect x="2.4299%" y="357" width="0.0514%" height="15" fill="rgb(239,76,54)" fg:x="3449" fg:w="73"/><text x="2.6799%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (49 samples, 0.03%)</title><rect x="2.4912%" y="341" width="0.0345%" height="15" fill="rgb(231,124,27)" fg:x="3536" fg:w="49"/><text x="2.7412%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (46 samples, 0.03%)</title><rect x="2.4933%" y="325" width="0.0324%" height="15" fill="rgb(249,195,6)" fg:x="3539" fg:w="46"/><text x="2.7433%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (27 samples, 0.02%)</title><rect x="2.5067%" y="309" width="0.0190%" height="15" fill="rgb(237,174,47)" fg:x="3558" fg:w="27"/><text x="2.7567%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (62 samples, 0.04%)</title><rect x="2.4841%" y="357" width="0.0437%" height="15" fill="rgb(206,201,31)" fg:x="3526" fg:w="62"/><text x="2.7341%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (382 samples, 0.27%)</title><rect x="2.2791%" y="373" width="0.2691%" height="15" fill="rgb(231,57,52)" fg:x="3235" fg:w="382"/><text x="2.5291%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.02%)</title><rect x="2.5306%" y="357" width="0.0176%" height="15" fill="rgb(248,177,22)" fg:x="3592" fg:w="25"/><text x="2.7806%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.01%)</title><rect x="2.5525%" y="357" width="0.0113%" height="15" fill="rgb(215,211,37)" fg:x="3623" fg:w="16"/><text x="2.8025%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="2.5483%" y="373" width="0.0162%" height="15" fill="rgb(241,128,51)" fg:x="3617" fg:w="23"/><text x="2.7983%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (437 samples, 0.31%)</title><rect x="2.2672%" y="389" width="0.3079%" height="15" fill="rgb(227,165,31)" fg:x="3218" fg:w="437"/><text x="2.5172%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (446 samples, 0.31%)</title><rect x="2.2650%" y="405" width="0.3142%" height="15" fill="rgb(228,167,24)" fg:x="3215" fg:w="446"/><text x="2.5150%" y="415.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as core::ops::deref::DerefMut&gt;::deref_mut (448 samples, 0.32%)</title><rect x="2.2650%" y="421" width="0.3156%" height="15" fill="rgb(228,143,12)" fg:x="3215" fg:w="448"/><text x="2.5150%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::analysis::reaching_definitions::apply_def (470 samples, 0.33%)</title><rect x="2.2552%" y="437" width="0.3311%" height="15" fill="rgb(249,149,8)" fg:x="3201" fg:w="470"/><text x="2.5052%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::analysis::reaching_definitions::apply_return (30 samples, 0.02%)</title><rect x="2.5863%" y="437" width="0.0211%" height="15" fill="rgb(243,35,44)" fg:x="3671" fg:w="30"/><text x="2.8363%" y="447.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::forward_interprocedural_fixpoint::GeneralizedContext&lt;T&gt; as cwe_checker_lib::analysis::fixpoint::Context&gt;::update_edge (865 samples, 0.61%)</title><rect x="2.0044%" y="453" width="0.6094%" height="15" fill="rgb(246,89,9)" fg:x="2845" fg:w="865"/><text x="2.2544%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (97 samples, 0.07%)</title><rect x="2.7667%" y="325" width="0.0683%" height="15" fill="rgb(233,213,13)" fg:x="3927" fg:w="97"/><text x="3.0167%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (132 samples, 0.09%)</title><rect x="2.7519%" y="357" width="0.0930%" height="15" fill="rgb(233,141,41)" fg:x="3906" fg:w="132"/><text x="3.0019%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (127 samples, 0.09%)</title><rect x="2.7554%" y="341" width="0.0895%" height="15" fill="rgb(239,167,4)" fg:x="3911" fg:w="127"/><text x="3.0054%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (149 samples, 0.10%)</title><rect x="2.7455%" y="373" width="0.1050%" height="15" fill="rgb(209,217,16)" fg:x="3897" fg:w="149"/><text x="2.9955%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (262 samples, 0.18%)</title><rect x="2.6687%" y="389" width="0.1846%" height="15" fill="rgb(219,88,35)" fg:x="3788" fg:w="262"/><text x="2.9187%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (43 samples, 0.03%)</title><rect x="2.8561%" y="373" width="0.0303%" height="15" fill="rgb(220,193,23)" fg:x="4054" fg:w="43"/><text x="3.1061%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28 samples, 0.02%)</title><rect x="2.8667%" y="357" width="0.0197%" height="15" fill="rgb(230,90,52)" fg:x="4069" fg:w="28"/><text x="3.1167%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (50 samples, 0.04%)</title><rect x="2.8533%" y="389" width="0.0352%" height="15" fill="rgb(252,106,19)" fg:x="4050" fg:w="50"/><text x="3.1033%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.02%)</title><rect x="2.8970%" y="389" width="0.0183%" height="15" fill="rgb(206,74,20)" fg:x="4112" fg:w="26"/><text x="3.1470%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.02%)</title><rect x="2.8977%" y="373" width="0.0176%" height="15" fill="rgb(230,138,44)" fg:x="4113" fg:w="25"/><text x="3.1477%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 0.02%)</title><rect x="2.8984%" y="357" width="0.0169%" height="15" fill="rgb(235,182,43)" fg:x="4114" fg:w="24"/><text x="3.1484%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (425 samples, 0.30%)</title><rect x="2.6307%" y="405" width="0.2994%" height="15" fill="rgb(242,16,51)" fg:x="3734" fg:w="425"/><text x="2.8807%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.01%)</title><rect x="2.9160%" y="389" width="0.0141%" height="15" fill="rgb(248,9,4)" fg:x="4139" fg:w="20"/><text x="3.1660%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (459 samples, 0.32%)</title><rect x="2.6180%" y="421" width="0.3234%" height="15" fill="rgb(210,31,22)" fg:x="3716" fg:w="459"/><text x="2.8680%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (468 samples, 0.33%)</title><rect x="2.6138%" y="437" width="0.3297%" height="15" fill="rgb(239,54,39)" fg:x="3710" fg:w="468"/><text x="2.8638%" y="447.50"></text></g><g><title>binary_to_types`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (471 samples, 0.33%)</title><rect x="2.6138%" y="453" width="0.3318%" height="15" fill="rgb(230,99,41)" fg:x="3710" fg:w="471"/><text x="2.8638%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.02%)</title><rect x="2.9618%" y="389" width="0.0183%" height="15" fill="rgb(253,106,12)" fg:x="4204" fg:w="26"/><text x="3.2118%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.01%)</title><rect x="2.9689%" y="373" width="0.0113%" height="15" fill="rgb(213,46,41)" fg:x="4214" fg:w="16"/><text x="3.2189%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (48 samples, 0.03%)</title><rect x="3.0358%" y="357" width="0.0338%" height="15" fill="rgb(215,133,35)" fg:x="4309" fg:w="48"/><text x="3.2858%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (159 samples, 0.11%)</title><rect x="2.9801%" y="389" width="0.1120%" height="15" fill="rgb(213,28,5)" fg:x="4230" fg:w="159"/><text x="3.2301%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (135 samples, 0.10%)</title><rect x="2.9970%" y="373" width="0.0951%" height="15" fill="rgb(215,77,49)" fg:x="4254" fg:w="135"/><text x="3.2470%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (227 samples, 0.16%)</title><rect x="2.9477%" y="405" width="0.1599%" height="15" fill="rgb(248,100,22)" fg:x="4184" fg:w="227"/><text x="3.1977%" y="415.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (22 samples, 0.02%)</title><rect x="3.1105%" y="405" width="0.0155%" height="15" fill="rgb(208,67,9)" fg:x="4415" fg:w="22"/><text x="3.3605%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.01%)</title><rect x="3.1260%" y="405" width="0.0106%" height="15" fill="rgb(219,133,21)" fg:x="4437" fg:w="15"/><text x="3.3760%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (291 samples, 0.21%)</title><rect x="2.9456%" y="421" width="0.2050%" height="15" fill="rgb(246,46,29)" fg:x="4181" fg:w="291"/><text x="3.1956%" y="431.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (299 samples, 0.21%)</title><rect x="2.9456%" y="453" width="0.2107%" height="15" fill="rgb(246,185,52)" fg:x="4181" fg:w="299"/><text x="3.1956%" y="463.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (299 samples, 0.21%)</title><rect x="2.9456%" y="437" width="0.2107%" height="15" fill="rgb(252,136,11)" fg:x="4181" fg:w="299"/><text x="3.1956%" y="447.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (15 samples, 0.01%)</title><rect x="3.1570%" y="453" width="0.0106%" height="15" fill="rgb(219,138,53)" fg:x="4481" fg:w="15"/><text x="3.4070%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::set_node_value (20 samples, 0.01%)</title><rect x="3.1908%" y="453" width="0.0141%" height="15" fill="rgb(211,51,23)" fg:x="4529" fg:w="20"/><text x="3.4408%" y="463.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (18 samples, 0.01%)</title><rect x="3.1922%" y="437" width="0.0127%" height="15" fill="rgb(247,221,28)" fg:x="4531" fg:w="18"/><text x="3.4422%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="3.1922%" y="421" width="0.0127%" height="15" fill="rgb(251,222,45)" fg:x="4531" fg:w="18"/><text x="3.4422%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::node_context::register_map::run_analysis (2,125 samples, 1.50%)</title><rect x="1.7155%" y="469" width="1.4971%" height="15" fill="rgb(217,162,53)" fg:x="2435" fg:w="2125"/><text x="1.9655%" y="479.50"></text></g><g><title>binary_to_types`binary_type_inference::node_context::create_default_context (2,512 samples, 1.77%)</title><rect x="1.4513%" y="485" width="1.7698%" height="15" fill="rgb(229,93,14)" fg:x="2060" fg:w="2512"/><text x="1.7013%" y="495.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (15 samples, 0.01%)</title><rect x="3.2211%" y="453" width="0.0106%" height="15" fill="rgb(209,67,49)" fg:x="4572" fg:w="15"/><text x="3.4711%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (18 samples, 0.01%)</title><rect x="3.2211%" y="469" width="0.0127%" height="15" fill="rgb(213,87,29)" fg:x="4572" fg:w="18"/><text x="3.4711%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="3.2338%" y="469" width="0.0169%" height="15" fill="rgb(205,151,52)" fg:x="4590" fg:w="24"/><text x="3.4838%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (164 samples, 0.12%)</title><rect x="3.2507%" y="469" width="0.1155%" height="15" fill="rgb(253,215,39)" fg:x="4614" fg:w="164"/><text x="3.5007%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (68 samples, 0.05%)</title><rect x="3.3662%" y="469" width="0.0479%" height="15" fill="rgb(221,220,41)" fg:x="4778" fg:w="68"/><text x="3.6162%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (31 samples, 0.02%)</title><rect x="3.4148%" y="453" width="0.0218%" height="15" fill="rgb(218,133,21)" fg:x="4847" fg:w="31"/><text x="3.6648%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (61 samples, 0.04%)</title><rect x="3.4141%" y="469" width="0.0430%" height="15" fill="rgb(221,193,43)" fg:x="4846" fg:w="61"/><text x="3.6641%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (273 samples, 0.19%)</title><rect x="3.6339%" y="453" width="0.1923%" height="15" fill="rgb(240,128,52)" fg:x="5158" fg:w="273"/><text x="3.8839%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (131 samples, 0.09%)</title><rect x="3.8263%" y="453" width="0.0923%" height="15" fill="rgb(253,114,12)" fg:x="5431" fg:w="131"/><text x="4.0763%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.03%)</title><rect x="6.5077%" y="373" width="0.0310%" height="15" fill="rgb(215,223,47)" fg:x="9237" fg:w="44"/><text x="6.7577%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (41 samples, 0.03%)</title><rect x="6.5098%" y="357" width="0.0289%" height="15" fill="rgb(248,225,23)" fg:x="9240" fg:w="41"/><text x="6.7598%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (39 samples, 0.03%)</title><rect x="6.5112%" y="341" width="0.0275%" height="15" fill="rgb(250,108,0)" fg:x="9242" fg:w="39"/><text x="6.7612%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (32 samples, 0.02%)</title><rect x="6.5161%" y="325" width="0.0225%" height="15" fill="rgb(228,208,7)" fg:x="9249" fg:w="32"/><text x="6.7661%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (64 samples, 0.05%)</title><rect x="6.4943%" y="389" width="0.0451%" height="15" fill="rgb(244,45,10)" fg:x="9218" fg:w="64"/><text x="6.7443%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (93 samples, 0.07%)</title><rect x="6.4887%" y="405" width="0.0655%" height="15" fill="rgb(207,125,25)" fg:x="9210" fg:w="93"/><text x="6.7387%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (109 samples, 0.08%)</title><rect x="6.4795%" y="437" width="0.0768%" height="15" fill="rgb(210,195,18)" fg:x="9197" fg:w="109"/><text x="6.7295%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (101 samples, 0.07%)</title><rect x="6.4851%" y="421" width="0.0712%" height="15" fill="rgb(249,80,12)" fg:x="9205" fg:w="101"/><text x="6.7351%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (90 samples, 0.06%)</title><rect x="6.5626%" y="437" width="0.0634%" height="15" fill="rgb(221,65,9)" fg:x="9315" fg:w="90"/><text x="6.8126%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::pointer_inference::state::access_handling::_&lt;impl cwe_checker_lib::analysis::pointer_inference::state::State&gt;::handle_register_assign (18 samples, 0.01%)</title><rect x="6.6380%" y="421" width="0.0127%" height="15" fill="rgb(235,49,36)" fg:x="9422" fg:w="18"/><text x="6.8880%" y="431.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::node_context::points_to::PointerState as binary_type_inference::constraint_generation::NodeContextMapping&gt;::apply_def (27 samples, 0.02%)</title><rect x="6.6359%" y="437" width="0.0190%" height="15" fill="rgb(225,32,20)" fg:x="9419" fg:w="27"/><text x="6.8859%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.01%)</title><rect x="6.7176%" y="341" width="0.0120%" height="15" fill="rgb(215,141,46)" fg:x="9535" fg:w="17"/><text x="6.9676%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (20 samples, 0.01%)</title><rect x="6.7162%" y="357" width="0.0141%" height="15" fill="rgb(250,160,47)" fg:x="9533" fg:w="20"/><text x="6.9662%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (67 samples, 0.05%)</title><rect x="6.7867%" y="309" width="0.0472%" height="15" fill="rgb(216,222,40)" fg:x="9633" fg:w="67"/><text x="7.0367%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (175 samples, 0.12%)</title><rect x="6.7500%" y="341" width="0.1233%" height="15" fill="rgb(234,217,39)" fg:x="9581" fg:w="175"/><text x="7.0000%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (157 samples, 0.11%)</title><rect x="6.7627%" y="325" width="0.1106%" height="15" fill="rgb(207,178,40)" fg:x="9599" fg:w="157"/><text x="7.0127%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (56 samples, 0.04%)</title><rect x="6.8339%" y="309" width="0.0395%" height="15" fill="rgb(221,136,13)" fg:x="9700" fg:w="56"/><text x="7.0839%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (202 samples, 0.14%)</title><rect x="6.7331%" y="357" width="0.1423%" height="15" fill="rgb(249,199,10)" fg:x="9557" fg:w="202"/><text x="6.9831%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (271 samples, 0.19%)</title><rect x="6.6993%" y="373" width="0.1909%" height="15" fill="rgb(249,222,13)" fg:x="9509" fg:w="271"/><text x="6.9493%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (39 samples, 0.03%)</title><rect x="6.9241%" y="325" width="0.0275%" height="15" fill="rgb(244,185,38)" fg:x="9828" fg:w="39"/><text x="7.1741%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (81 samples, 0.06%)</title><rect x="6.8994%" y="357" width="0.0571%" height="15" fill="rgb(236,202,9)" fg:x="9793" fg:w="81"/><text x="7.1494%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (56 samples, 0.04%)</title><rect x="6.9170%" y="341" width="0.0395%" height="15" fill="rgb(250,229,37)" fg:x="9818" fg:w="56"/><text x="7.1670%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (99 samples, 0.07%)</title><rect x="6.8902%" y="373" width="0.0697%" height="15" fill="rgb(206,174,23)" fg:x="9780" fg:w="99"/><text x="7.1402%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (18 samples, 0.01%)</title><rect x="6.9790%" y="325" width="0.0127%" height="15" fill="rgb(211,33,43)" fg:x="9906" fg:w="18"/><text x="7.2290%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (52 samples, 0.04%)</title><rect x="6.9656%" y="373" width="0.0366%" height="15" fill="rgb(245,58,50)" fg:x="9887" fg:w="52"/><text x="7.2156%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (40 samples, 0.03%)</title><rect x="6.9741%" y="357" width="0.0282%" height="15" fill="rgb(244,68,36)" fg:x="9899" fg:w="40"/><text x="7.2241%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (38 samples, 0.03%)</title><rect x="6.9755%" y="341" width="0.0268%" height="15" fill="rgb(232,229,15)" fg:x="9901" fg:w="38"/><text x="7.2255%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.01%)</title><rect x="6.9917%" y="325" width="0.0106%" height="15" fill="rgb(254,30,23)" fg:x="9924" fg:w="15"/><text x="7.2417%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (535 samples, 0.38%)</title><rect x="6.6606%" y="389" width="0.3769%" height="15" fill="rgb(235,160,14)" fg:x="9454" fg:w="535"/><text x="6.9106%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (48 samples, 0.03%)</title><rect x="7.0037%" y="373" width="0.0338%" height="15" fill="rgb(212,155,44)" fg:x="9941" fg:w="48"/><text x="7.2537%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (568 samples, 0.40%)</title><rect x="6.6563%" y="405" width="0.4002%" height="15" fill="rgb(226,2,50)" fg:x="9448" fg:w="568"/><text x="6.9063%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (576 samples, 0.41%)</title><rect x="6.6549%" y="421" width="0.4058%" height="15" fill="rgb(234,177,6)" fg:x="9446" fg:w="576"/><text x="6.9049%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (46 samples, 0.03%)</title><rect x="7.0812%" y="373" width="0.0324%" height="15" fill="rgb(217,24,9)" fg:x="10051" fg:w="46"/><text x="7.3312%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 0.01%)</title><rect x="7.1016%" y="357" width="0.0120%" height="15" fill="rgb(220,13,46)" fg:x="10080" fg:w="17"/><text x="7.3516%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (16 samples, 0.01%)</title><rect x="7.1023%" y="341" width="0.0113%" height="15" fill="rgb(239,221,27)" fg:x="10081" fg:w="16"/><text x="7.3523%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (34 samples, 0.02%)</title><rect x="7.1389%" y="341" width="0.0240%" height="15" fill="rgb(222,198,25)" fg:x="10133" fg:w="34"/><text x="7.3889%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (92 samples, 0.06%)</title><rect x="7.1136%" y="373" width="0.0648%" height="15" fill="rgb(211,99,13)" fg:x="10097" fg:w="92"/><text x="7.3636%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (77 samples, 0.05%)</title><rect x="7.1241%" y="357" width="0.0542%" height="15" fill="rgb(232,111,31)" fg:x="10112" fg:w="77"/><text x="7.3741%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (22 samples, 0.02%)</title><rect x="7.1629%" y="341" width="0.0155%" height="15" fill="rgb(245,82,37)" fg:x="10167" fg:w="22"/><text x="7.4129%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (186 samples, 0.13%)</title><rect x="7.0650%" y="389" width="0.1310%" height="15" fill="rgb(227,149,46)" fg:x="10028" fg:w="186"/><text x="7.3150%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.01%)</title><rect x="7.2059%" y="373" width="0.0141%" height="15" fill="rgb(218,36,50)" fg:x="10228" fg:w="20"/><text x="7.4559%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.01%)</title><rect x="7.2087%" y="357" width="0.0113%" height="15" fill="rgb(226,80,48)" fg:x="10232" fg:w="16"/><text x="7.4587%" y="367.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (35 samples, 0.02%)</title><rect x="7.1974%" y="389" width="0.0247%" height="15" fill="rgb(238,224,15)" fg:x="10216" fg:w="35"/><text x="7.4474%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (40 samples, 0.03%)</title><rect x="7.2263%" y="389" width="0.0282%" height="15" fill="rgb(241,136,10)" fg:x="10257" fg:w="40"/><text x="7.4763%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (303 samples, 0.21%)</title><rect x="7.0607%" y="405" width="0.2135%" height="15" fill="rgb(208,32,45)" fg:x="10022" fg:w="303"/><text x="7.3107%" y="415.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (322 samples, 0.23%)</title><rect x="7.0607%" y="421" width="0.2269%" height="15" fill="rgb(207,135,9)" fg:x="10022" fg:w="322"/><text x="7.3107%" y="431.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::node_context::register_map::RegisterContext as binary_type_inference::constraint_generation::NodeContextMapping&gt;::apply_def (907 samples, 0.64%)</title><rect x="6.6549%" y="437" width="0.6390%" height="15" fill="rgb(206,86,44)" fg:x="9446" fg:w="907"/><text x="6.9049%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (21 samples, 0.01%)</title><rect x="7.2982%" y="373" width="0.0148%" height="15" fill="rgb(245,177,15)" fg:x="10359" fg:w="21"/><text x="7.5482%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (36 samples, 0.03%)</title><rect x="7.2967%" y="389" width="0.0254%" height="15" fill="rgb(206,64,50)" fg:x="10357" fg:w="36"/><text x="7.5467%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (40 samples, 0.03%)</title><rect x="7.2960%" y="405" width="0.0282%" height="15" fill="rgb(234,36,40)" fg:x="10356" fg:w="40"/><text x="7.5460%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (44 samples, 0.03%)</title><rect x="7.2939%" y="421" width="0.0310%" height="15" fill="rgb(213,64,8)" fg:x="10353" fg:w="44"/><text x="7.5439%" y="431.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (15 samples, 0.01%)</title><rect x="7.3256%" y="421" width="0.0106%" height="15" fill="rgb(210,75,36)" fg:x="10398" fg:w="15"/><text x="7.5756%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="7.3256%" y="405" width="0.0106%" height="15" fill="rgb(229,88,21)" fg:x="10398" fg:w="15"/><text x="7.5756%" y="415.50"></text></g><g><title>binary_to_types`binary_type_inference::analysis::reaching_definitions::apply_return (20 samples, 0.01%)</title><rect x="7.3362%" y="421" width="0.0141%" height="15" fill="rgb(252,204,47)" fg:x="10413" fg:w="20"/><text x="7.5862%" y="431.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::node_context::register_map::RegisterContext as binary_type_inference::constraint_generation::NodeContextMapping&gt;::apply_return_node (86 samples, 0.06%)</title><rect x="7.2939%" y="437" width="0.0606%" height="15" fill="rgb(208,77,27)" fg:x="10353" fg:w="86"/><text x="7.5439%" y="447.50"></text></g><g><title>binary_to_types`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (208 samples, 0.15%)</title><rect x="7.3587%" y="437" width="0.1465%" height="15" fill="rgb(221,76,26)" fg:x="10445" fg:w="208"/><text x="7.6087%" y="447.50"></text></g><g><title>binary_to_types`DYLD-STUB$$free (123 samples, 0.09%)</title><rect x="7.5053%" y="437" width="0.0867%" height="15" fill="rgb(225,139,18)" fg:x="10653" fg:w="123"/><text x="7.7553%" y="447.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (18 samples, 0.01%)</title><rect x="7.5919%" y="437" width="0.0127%" height="15" fill="rgb(230,137,11)" fg:x="10776" fg:w="18"/><text x="7.8419%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (116 samples, 0.08%)</title><rect x="8.4634%" y="389" width="0.0817%" height="15" fill="rgb(212,28,1)" fg:x="12013" fg:w="116"/><text x="8.7134%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,366 samples, 0.96%)</title><rect x="8.8009%" y="373" width="0.9624%" height="15" fill="rgb(248,164,17)" fg:x="12492" fg:w="1366"/><text x="9.0509%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (432 samples, 0.30%)</title><rect x="9.4589%" y="357" width="0.3044%" height="15" fill="rgb(222,171,42)" fg:x="13426" fg:w="432"/><text x="9.7089%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,664 samples, 1.88%)</title><rect x="7.9646%" y="405" width="1.8768%" height="15" fill="rgb(243,84,45)" fg:x="11305" fg:w="2664"/><text x="8.2146%" y="415.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,840 samples, 1.30%)</title><rect x="8.5452%" y="389" width="1.2963%" height="15" fill="rgb(252,49,23)" fg:x="12129" fg:w="1840"/><text x="8.7952%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (111 samples, 0.08%)</title><rect x="9.7633%" y="373" width="0.0782%" height="15" fill="rgb(215,19,7)" fg:x="13858" fg:w="111"/><text x="10.0133%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (189 samples, 0.13%)</title><rect x="9.8415%" y="405" width="0.1332%" height="15" fill="rgb(238,81,41)" fg:x="13969" fg:w="189"/><text x="10.0915%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (3,148 samples, 2.22%)</title><rect x="7.7808%" y="421" width="2.2178%" height="15" fill="rgb(210,199,37)" fg:x="11044" fg:w="3148"/><text x="8.0308%" y="431.50">b..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (34 samples, 0.02%)</title><rect x="9.9746%" y="405" width="0.0240%" height="15" fill="rgb(244,192,49)" fg:x="14158" fg:w="34"/><text x="10.2246%" y="415.50"></text></g><g><title>binary_to_types`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,399 samples, 0.99%)</title><rect x="9.9986%" y="421" width="0.9856%" height="15" fill="rgb(226,211,11)" fg:x="14192" fg:w="1399"/><text x="10.2486%" y="431.50"></text></g><g><title>binary_to_types`DYLD-STUB$$malloc (115 samples, 0.08%)</title><rect x="10.9842%" y="421" width="0.0810%" height="15" fill="rgb(236,162,54)" fg:x="15591" fg:w="115"/><text x="11.2342%" y="431.50"></text></g><g><title>binary_to_types`DYLD-STUB$$memcpy (107 samples, 0.08%)</title><rect x="11.0652%" y="421" width="0.0754%" height="15" fill="rgb(220,229,9)" fg:x="15706" fg:w="107"/><text x="11.3152%" y="431.50"></text></g><g><title>binary_to_types`__rdl_alloc (99 samples, 0.07%)</title><rect x="11.1406%" y="421" width="0.0697%" height="15" fill="rgb(250,87,22)" fg:x="15813" fg:w="99"/><text x="11.3906%" y="431.50"></text></g><g><title>binary_to_types`core::hash::BuildHasher::hash_one (718 samples, 0.51%)</title><rect x="11.2104%" y="421" width="0.5058%" height="15" fill="rgb(239,43,17)" fg:x="15912" fg:w="718"/><text x="11.4604%" y="431.50"></text></g><g><title>binary_to_types`hashbrown::raw::RawTable&lt;T,A&gt;::find (182 samples, 0.13%)</title><rect x="11.7162%" y="421" width="0.1282%" height="15" fill="rgb(231,177,25)" fg:x="16630" fg:w="182"/><text x="11.9662%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (125 samples, 0.09%)</title><rect x="11.8444%" y="421" width="0.0881%" height="15" fill="rgb(219,179,1)" fg:x="16812" fg:w="125"/><text x="12.0944%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (816 samples, 0.57%)</title><rect x="12.7730%" y="405" width="0.5749%" height="15" fill="rgb(238,219,53)" fg:x="18130" fg:w="816"/><text x="13.0230%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (2,044 samples, 1.44%)</title><rect x="11.9325%" y="421" width="1.4400%" height="15" fill="rgb(232,167,36)" fg:x="16937" fg:w="2044"/><text x="12.1825%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (35 samples, 0.02%)</title><rect x="13.3479%" y="405" width="0.0247%" height="15" fill="rgb(244,19,51)" fg:x="18946" fg:w="35"/><text x="13.5979%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (110 samples, 0.08%)</title><rect x="13.3726%" y="421" width="0.0775%" height="15" fill="rgb(224,6,22)" fg:x="18981" fg:w="110"/><text x="13.6226%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (669 samples, 0.47%)</title><rect x="13.4500%" y="421" width="0.4713%" height="15" fill="rgb(224,145,5)" fg:x="19091" fg:w="669"/><text x="13.7000%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (167 samples, 0.12%)</title><rect x="13.9214%" y="421" width="0.1177%" height="15" fill="rgb(234,130,49)" fg:x="19760" fg:w="167"/><text x="14.1714%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::Context&lt;R,P,S,C&gt;::should_generate_for_block (9,567 samples, 6.74%)</title><rect x="7.6046%" y="437" width="6.7402%" height="15" fill="rgb(254,6,2)" fg:x="10794" fg:w="9567"/><text x="7.8546%" y="447.50">binary_to..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (428 samples, 0.30%)</title><rect x="14.0433%" y="421" width="0.3015%" height="15" fill="rgb(208,96,46)" fg:x="19933" fg:w="428"/><text x="14.2933%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::NodeContext&lt;R,P,S,C&gt;::build_addressing_representation (18 samples, 0.01%)</title><rect x="14.3448%" y="437" width="0.0127%" height="15" fill="rgb(239,3,39)" fg:x="20361" fg:w="18"/><text x="14.5948%" y="447.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::node_context::points_to::PointsToContext as binary_type_inference::constraint_generation::PointsToMapping&gt;::get_pointer_variable (15 samples, 0.01%)</title><rect x="14.3603%" y="421" width="0.0106%" height="15" fill="rgb(233,210,1)" fg:x="20383" fg:w="15"/><text x="14.6103%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::NodeContext&lt;R,P,S,C&gt;::evaluate_expression (26 samples, 0.02%)</title><rect x="14.3575%" y="437" width="0.0183%" height="15" fill="rgb(244,137,37)" fg:x="20379" fg:w="26"/><text x="14.6075%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::NodeContext&lt;R,P,S,C&gt;::make_constraints (15 samples, 0.01%)</title><rect x="14.3758%" y="437" width="0.0106%" height="15" fill="rgb(240,136,2)" fg:x="20405" fg:w="15"/><text x="14.6258%" y="447.50"></text></g><g><title>binary_to_types`core::hash::BuildHasher::hash_one (799 samples, 0.56%)</title><rect x="14.3878%" y="437" width="0.5629%" height="15" fill="rgb(239,18,37)" fg:x="20422" fg:w="799"/><text x="14.6378%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (57 samples, 0.04%)</title><rect x="14.9775%" y="389" width="0.0402%" height="15" fill="rgb(218,185,22)" fg:x="21259" fg:w="57"/><text x="15.2275%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (25 samples, 0.02%)</title><rect x="15.0000%" y="373" width="0.0176%" height="15" fill="rgb(225,218,4)" fg:x="21291" fg:w="25"/><text x="15.2500%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (24 samples, 0.02%)</title><rect x="15.0007%" y="357" width="0.0169%" height="15" fill="rgb(230,182,32)" fg:x="21292" fg:w="24"/><text x="15.2507%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (34 samples, 0.02%)</title><rect x="15.0705%" y="357" width="0.0240%" height="15" fill="rgb(242,56,43)" fg:x="21391" fg:w="34"/><text x="15.3205%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (137 samples, 0.10%)</title><rect x="15.0176%" y="389" width="0.0965%" height="15" fill="rgb(233,99,24)" fg:x="21316" fg:w="137"/><text x="15.2676%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (111 samples, 0.08%)</title><rect x="15.0359%" y="373" width="0.0782%" height="15" fill="rgb(234,209,42)" fg:x="21342" fg:w="111"/><text x="15.2859%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (28 samples, 0.02%)</title><rect x="15.0944%" y="357" width="0.0197%" height="15" fill="rgb(227,7,12)" fg:x="21425" fg:w="28"/><text x="15.3444%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (247 samples, 0.17%)</title><rect x="14.9563%" y="405" width="0.1740%" height="15" fill="rgb(245,203,43)" fg:x="21229" fg:w="247"/><text x="15.2063%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (25 samples, 0.02%)</title><rect x="15.1494%" y="389" width="0.0176%" height="15" fill="rgb(238,205,33)" fg:x="21503" fg:w="25"/><text x="15.3994%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.01%)</title><rect x="15.1536%" y="373" width="0.0134%" height="15" fill="rgb(231,56,7)" fg:x="21509" fg:w="19"/><text x="15.4036%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (59 samples, 0.04%)</title><rect x="15.1317%" y="405" width="0.0416%" height="15" fill="rgb(244,186,29)" fg:x="21478" fg:w="59"/><text x="15.3817%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (50 samples, 0.04%)</title><rect x="15.1761%" y="405" width="0.0352%" height="15" fill="rgb(234,111,31)" fg:x="21541" fg:w="50"/><text x="15.4261%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.01%)</title><rect x="15.2212%" y="405" width="0.0148%" height="15" fill="rgb(241,149,10)" fg:x="21605" fg:w="21"/><text x="15.4712%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (409 samples, 0.29%)</title><rect x="14.9507%" y="421" width="0.2881%" height="15" fill="rgb(249,206,44)" fg:x="21221" fg:w="409"/><text x="15.2007%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="15.2431%" y="389" width="0.0141%" height="15" fill="rgb(251,153,30)" fg:x="21636" fg:w="20"/><text x="15.4931%" y="399.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::node_context::points_to::PointerState&gt; (22 samples, 0.02%)</title><rect x="15.2424%" y="421" width="0.0155%" height="15" fill="rgb(239,152,38)" fg:x="21635" fg:w="22"/><text x="15.4924%" y="431.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (21 samples, 0.01%)</title><rect x="15.2431%" y="405" width="0.0148%" height="15" fill="rgb(249,139,47)" fg:x="21636" fg:w="21"/><text x="15.4931%" y="415.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::constraint_generation::NodeContext&lt;binary_type_inference::node_context::register_map::RegisterContext,binary_type_inference::node_context::points_to::PointsToContext,binary_type_inference::node_context::subproc_loc::ProcedureContext,binary_type_inference::node_context::GhidraConstantResolver&gt;&gt; (455 samples, 0.32%)</title><rect x="14.9507%" y="437" width="0.3206%" height="15" fill="rgb(244,64,35)" fg:x="21221" fg:w="455"/><text x="15.2007%" y="447.50"></text></g><g><title>binary_to_types`hashbrown::raw::RawTable&lt;T,A&gt;::find (65 samples, 0.05%)</title><rect x="15.2712%" y="437" width="0.0458%" height="15" fill="rgb(216,46,15)" fg:x="21676" fg:w="65"/><text x="15.5212%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (209 samples, 0.15%)</title><rect x="15.3170%" y="437" width="0.1472%" height="15" fill="rgb(250,74,19)" fg:x="21741" fg:w="209"/><text x="15.5670%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (218 samples, 0.15%)</title><rect x="15.4643%" y="437" width="0.1536%" height="15" fill="rgb(249,42,33)" fg:x="21950" fg:w="218"/><text x="15.7143%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (202 samples, 0.14%)</title><rect x="15.6179%" y="437" width="0.1423%" height="15" fill="rgb(242,149,17)" fg:x="22168" fg:w="202"/><text x="15.8679%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (186 samples, 0.13%)</title><rect x="15.7602%" y="437" width="0.1310%" height="15" fill="rgb(244,29,21)" fg:x="22370" fg:w="186"/><text x="16.0102%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::Context&lt;R,P,S,C&gt;::generate_constraints_for_node (16,984 samples, 11.97%)</title><rect x="3.9270%" y="453" width="11.9656%" height="15" fill="rgb(220,130,37)" fg:x="5574" fg:w="16984"/><text x="4.1770%" y="463.50">binary_to_types`bi..</text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::Context&lt;R,P,S,C&gt;::should_generate_for_block (58 samples, 0.04%)</title><rect x="15.8926%" y="453" width="0.0409%" height="15" fill="rgb(211,67,2)" fg:x="22558" fg:w="58"/><text x="16.1426%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::Context&lt;R,P,S,C&gt;::generate_constraints (17,698 samples, 12.47%)</title><rect x="3.4655%" y="469" width="12.4686%" height="15" fill="rgb(235,68,52)" fg:x="4919" fg:w="17698"/><text x="3.7155%" y="479.50">binary_to_types`bin..</text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::Context&lt;R,P,S,C&gt;::generate_constraints_for_node (84 samples, 0.06%)</title><rect x="15.9342%" y="469" width="0.0592%" height="15" fill="rgb(246,142,3)" fg:x="22617" fg:w="84"/><text x="16.1842%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="16.0089%" y="389" width="0.0148%" height="15" fill="rgb(241,25,7)" fg:x="22723" fg:w="21"/><text x="16.2589%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.01%)</title><rect x="16.0096%" y="373" width="0.0141%" height="15" fill="rgb(242,119,39)" fg:x="22724" fg:w="20"/><text x="16.2596%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.01%)</title><rect x="16.0131%" y="357" width="0.0106%" height="15" fill="rgb(241,98,45)" fg:x="22729" fg:w="15"/><text x="16.2631%" y="367.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::VHat as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="16.0068%" y="405" width="0.0204%" height="15" fill="rgb(254,28,30)" fg:x="22720" fg:w="29"/><text x="16.2568%" y="415.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::generate_start_and_stop_edges_for_state (43 samples, 0.03%)</title><rect x="16.0032%" y="421" width="0.0303%" height="15" fill="rgb(241,142,54)" fg:x="22715" fg:w="43"/><text x="16.2532%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::EdgeDefinition::flip_edge (17 samples, 0.01%)</title><rect x="16.0554%" y="389" width="0.0120%" height="15" fill="rgb(222,85,15)" fg:x="22789" fg:w="17"/><text x="16.3054%" y="399.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::generate_push_pop_edges_for_state (39 samples, 0.03%)</title><rect x="16.0427%" y="405" width="0.0275%" height="15" fill="rgb(210,85,47)" fg:x="22771" fg:w="39"/><text x="16.2927%" y="415.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (73 samples, 0.05%)</title><rect x="16.0335%" y="421" width="0.0514%" height="15" fill="rgb(224,206,25)" fg:x="22758" fg:w="73"/><text x="16.2835%" y="431.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (132 samples, 0.09%)</title><rect x="15.9969%" y="437" width="0.0930%" height="15" fill="rgb(243,201,19)" fg:x="22706" fg:w="132"/><text x="16.2469%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.02%)</title><rect x="16.0934%" y="437" width="0.0183%" height="15" fill="rgb(236,59,4)" fg:x="22843" fg:w="26"/><text x="16.3434%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (166 samples, 0.12%)</title><rect x="15.9969%" y="453" width="0.1170%" height="15" fill="rgb(254,179,45)" fg:x="22706" fg:w="166"/><text x="16.2469%" y="463.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (20 samples, 0.01%)</title><rect x="16.1195%" y="437" width="0.0141%" height="15" fill="rgb(226,14,10)" fg:x="22880" fg:w="20"/><text x="16.3695%" y="447.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (69 samples, 0.05%)</title><rect x="16.1343%" y="437" width="0.0486%" height="15" fill="rgb(244,27,41)" fg:x="22901" fg:w="69"/><text x="16.3843%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (29 samples, 0.02%)</title><rect x="16.1625%" y="421" width="0.0204%" height="15" fill="rgb(235,35,32)" fg:x="22941" fg:w="29"/><text x="16.4125%" y="431.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (108 samples, 0.08%)</title><rect x="16.1160%" y="453" width="0.0761%" height="15" fill="rgb(218,68,31)" fg:x="22875" fg:w="108"/><text x="16.3660%" y="463.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (35 samples, 0.02%)</title><rect x="16.2040%" y="421" width="0.0247%" height="15" fill="rgb(207,120,37)" fg:x="23000" fg:w="35"/><text x="16.4540%" y="431.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (23 samples, 0.02%)</title><rect x="16.2125%" y="405" width="0.0162%" height="15" fill="rgb(227,98,0)" fg:x="23012" fg:w="23"/><text x="16.4625%" y="415.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (67 samples, 0.05%)</title><rect x="16.2287%" y="421" width="0.0472%" height="15" fill="rgb(207,7,3)" fg:x="23035" fg:w="67"/><text x="16.4787%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (22 samples, 0.02%)</title><rect x="16.2604%" y="405" width="0.0155%" height="15" fill="rgb(206,98,19)" fg:x="23080" fg:w="22"/><text x="16.5104%" y="415.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::get_or_insert_nd (128 samples, 0.09%)</title><rect x="16.1977%" y="437" width="0.0902%" height="15" fill="rgb(217,5,26)" fg:x="22991" fg:w="128"/><text x="16.4477%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::insert_edge (132 samples, 0.09%)</title><rect x="16.1963%" y="453" width="0.0930%" height="15" fill="rgb(235,190,38)" fg:x="22989" fg:w="132"/><text x="16.4463%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::sub_type_edge (18 samples, 0.01%)</title><rect x="16.2893%" y="405" width="0.0127%" height="15" fill="rgb(247,86,24)" fg:x="23121" fg:w="18"/><text x="16.5393%" y="415.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.01%)</title><rect x="16.2893%" y="421" width="0.0141%" height="15" fill="rgb(205,101,16)" fg:x="23121" fg:w="20"/><text x="16.5393%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 0.01%)</title><rect x="16.2893%" y="437" width="0.0148%" height="15" fill="rgb(246,168,33)" fg:x="23121" fg:w="21"/><text x="16.5393%" y="447.50"></text></g><g><title>binary_to_types`core::iter::adapters::try_process (23 samples, 0.02%)</title><rect x="16.2893%" y="453" width="0.0162%" height="15" fill="rgb(231,114,1)" fg:x="23121" fg:w="23"/><text x="16.5393%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::new (457 samples, 0.32%)</title><rect x="15.9941%" y="469" width="0.3220%" height="15" fill="rgb(207,184,53)" fg:x="22702" fg:w="457"/><text x="16.2441%" y="479.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (22 samples, 0.02%)</title><rect x="16.3513%" y="421" width="0.0155%" height="15" fill="rgb(224,95,51)" fg:x="23209" fg:w="22"/><text x="16.6013%" y="431.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (47 samples, 0.03%)</title><rect x="16.3668%" y="421" width="0.0331%" height="15" fill="rgb(212,188,45)" fg:x="23231" fg:w="47"/><text x="16.6168%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (16 samples, 0.01%)</title><rect x="16.3886%" y="405" width="0.0113%" height="15" fill="rgb(223,154,38)" fg:x="23262" fg:w="16"/><text x="16.6386%" y="415.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::add_cant_push_node (97 samples, 0.07%)</title><rect x="16.3386%" y="437" width="0.0683%" height="15" fill="rgb(251,22,52)" fg:x="23191" fg:w="97"/><text x="16.5886%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::intersect_with_pop_push (135 samples, 0.10%)</title><rect x="16.3231%" y="453" width="0.0951%" height="15" fill="rgb(229,209,22)" fg:x="23169" fg:w="135"/><text x="16.5731%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::remove_unreachable (34 samples, 0.02%)</title><rect x="16.4182%" y="453" width="0.0240%" height="15" fill="rgb(234,138,34)" fg:x="23304" fg:w="34"/><text x="16.6682%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (33 samples, 0.02%)</title><rect x="16.5401%" y="357" width="0.0232%" height="15" fill="rgb(212,95,11)" fg:x="23477" fg:w="33"/><text x="16.7901%" y="367.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::EdgeDefinition as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="16.5633%" y="357" width="0.0190%" height="15" fill="rgb(240,179,47)" fg:x="23510" fg:w="27"/><text x="16.8133%" y="367.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::FiniteState as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="16.5647%" y="341" width="0.0176%" height="15" fill="rgb(240,163,11)" fg:x="23512" fg:w="25"/><text x="16.8147%" y="351.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::FiniteState as core::clone::Clone&gt;::clone (20 samples, 0.01%)</title><rect x="16.5824%" y="357" width="0.0141%" height="15" fill="rgb(236,37,12)" fg:x="23537" fg:w="20"/><text x="16.8324%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.02%)</title><rect x="16.5964%" y="357" width="0.0169%" height="15" fill="rgb(232,164,16)" fg:x="23557" fg:w="24"/><text x="16.8464%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.01%)</title><rect x="16.5993%" y="341" width="0.0141%" height="15" fill="rgb(244,205,15)" fg:x="23561" fg:w="20"/><text x="16.8493%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (19 samples, 0.01%)</title><rect x="16.6000%" y="325" width="0.0134%" height="15" fill="rgb(223,117,47)" fg:x="23562" fg:w="19"/><text x="16.8500%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (113 samples, 0.08%)</title><rect x="16.5345%" y="373" width="0.0796%" height="15" fill="rgb(244,107,35)" fg:x="23469" fg:w="113"/><text x="16.7845%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.01%)</title><rect x="16.6415%" y="293" width="0.0120%" height="15" fill="rgb(205,140,8)" fg:x="23621" fg:w="17"/><text x="16.8915%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (33 samples, 0.02%)</title><rect x="16.6310%" y="325" width="0.0232%" height="15" fill="rgb(228,84,46)" fg:x="23606" fg:w="33"/><text x="16.8810%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.02%)</title><rect x="16.6387%" y="309" width="0.0155%" height="15" fill="rgb(254,188,9)" fg:x="23617" fg:w="22"/><text x="16.8887%" y="319.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (39 samples, 0.03%)</title><rect x="16.6289%" y="341" width="0.0275%" height="15" fill="rgb(206,112,54)" fg:x="23603" fg:w="39"/><text x="16.8789%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 0.02%)</title><rect x="16.6563%" y="341" width="0.0197%" height="15" fill="rgb(216,84,49)" fg:x="23642" fg:w="28"/><text x="16.9063%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.01%)</title><rect x="16.6613%" y="325" width="0.0148%" height="15" fill="rgb(214,194,35)" fg:x="23649" fg:w="21"/><text x="16.9113%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.01%)</title><rect x="16.6634%" y="309" width="0.0127%" height="15" fill="rgb(249,28,3)" fg:x="23652" fg:w="18"/><text x="16.9134%" y="319.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::EdgeDefinition as core::clone::Clone&gt;::clone (98 samples, 0.07%)</title><rect x="16.6155%" y="373" width="0.0690%" height="15" fill="rgb(222,56,52)" fg:x="23584" fg:w="98"/><text x="16.8655%" y="383.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::FiniteState as core::clone::Clone&gt;::clone (92 samples, 0.06%)</title><rect x="16.6197%" y="357" width="0.0648%" height="15" fill="rgb(245,217,50)" fg:x="23590" fg:w="92"/><text x="16.8697%" y="367.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::FiniteState as core::clone::Clone&gt;::clone (32 samples, 0.02%)</title><rect x="16.6845%" y="373" width="0.0225%" height="15" fill="rgb(213,201,24)" fg:x="23682" fg:w="32"/><text x="16.9345%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (272 samples, 0.19%)</title><rect x="16.5260%" y="389" width="0.1916%" height="15" fill="rgb(248,116,28)" fg:x="23457" fg:w="272"/><text x="16.7760%" y="399.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::EdgeDefinition as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="16.7176%" y="389" width="0.0120%" height="15" fill="rgb(219,72,43)" fg:x="23729" fg:w="17"/><text x="16.9676%" y="399.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::FiniteState as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="16.7296%" y="389" width="0.0148%" height="15" fill="rgb(209,138,14)" fg:x="23746" fg:w="21"/><text x="16.9796%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (326 samples, 0.23%)</title><rect x="16.5246%" y="405" width="0.2297%" height="15" fill="rgb(222,18,33)" fg:x="23455" fg:w="326"/><text x="16.7746%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (341 samples, 0.24%)</title><rect x="16.5211%" y="421" width="0.2402%" height="15" fill="rgb(213,199,7)" fg:x="23450" fg:w="341"/><text x="16.7711%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="16.7613%" y="421" width="0.0120%" height="15" fill="rgb(250,110,10)" fg:x="23791" fg:w="17"/><text x="17.0113%" y="431.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::constraint_graph::FiniteState&gt; (15 samples, 0.01%)</title><rect x="16.7895%" y="373" width="0.0106%" height="15" fill="rgb(248,123,6)" fg:x="23831" fg:w="15"/><text x="17.0395%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free_small (32 samples, 0.02%)</title><rect x="16.8071%" y="373" width="0.0225%" height="15" fill="rgb(206,91,31)" fg:x="23856" fg:w="32"/><text x="17.0571%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.05%)</title><rect x="16.7860%" y="389" width="0.0472%" height="15" fill="rgb(211,154,13)" fg:x="23826" fg:w="67"/><text x="17.0360%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_small (28 samples, 0.02%)</title><rect x="16.8381%" y="389" width="0.0197%" height="15" fill="rgb(225,148,7)" fg:x="23900" fg:w="28"/><text x="17.0881%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (120 samples, 0.08%)</title><rect x="16.7754%" y="405" width="0.0845%" height="15" fill="rgb(220,160,43)" fg:x="23811" fg:w="120"/><text x="17.0254%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (162 samples, 0.11%)</title><rect x="16.7733%" y="421" width="0.1141%" height="15" fill="rgb(213,52,39)" fg:x="23808" fg:w="162"/><text x="17.0233%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="16.8874%" y="421" width="0.0127%" height="15" fill="rgb(243,137,7)" fg:x="23970" fg:w="18"/><text x="17.1374%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (44 samples, 0.03%)</title><rect x="16.9290%" y="373" width="0.0310%" height="15" fill="rgb(230,79,13)" fg:x="24029" fg:w="44"/><text x="17.1790%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (22 samples, 0.02%)</title><rect x="16.9445%" y="357" width="0.0155%" height="15" fill="rgb(247,105,23)" fg:x="24051" fg:w="22"/><text x="17.1945%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (16 samples, 0.01%)</title><rect x="16.9600%" y="373" width="0.0113%" height="15" fill="rgb(223,179,41)" fg:x="24073" fg:w="16"/><text x="17.2100%" y="383.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::constraint_graph::FiniteState&gt; (76 samples, 0.05%)</title><rect x="16.9205%" y="389" width="0.0535%" height="15" fill="rgb(218,9,34)" fg:x="24017" fg:w="76"/><text x="17.1705%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.01%)</title><rect x="16.9755%" y="389" width="0.0127%" height="15" fill="rgb(222,106,8)" fg:x="24095" fg:w="18"/><text x="17.2255%" y="399.50"></text></g><g><title>binary_to_types`core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (121 samples, 0.09%)</title><rect x="16.9149%" y="405" width="0.0852%" height="15" fill="rgb(211,220,0)" fg:x="24009" fg:w="121"/><text x="17.1649%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (146 samples, 0.10%)</title><rect x="16.9001%" y="421" width="0.1029%" height="15" fill="rgb(229,52,16)" fg:x="23988" fg:w="146"/><text x="17.1501%" y="431.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::VHat as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="17.0213%" y="373" width="0.0106%" height="15" fill="rgb(212,155,18)" fg:x="24160" fg:w="15"/><text x="17.2713%" y="383.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (29 samples, 0.02%)</title><rect x="17.0121%" y="389" width="0.0204%" height="15" fill="rgb(242,21,14)" fg:x="24147" fg:w="29"/><text x="17.2621%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (57 samples, 0.04%)</title><rect x="17.0044%" y="405" width="0.0402%" height="15" fill="rgb(222,19,48)" fg:x="24136" fg:w="57"/><text x="17.2544%" y="415.50"></text></g><g><title>binary_to_types`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (21 samples, 0.01%)</title><rect x="17.0452%" y="405" width="0.0148%" height="15" fill="rgb(232,45,27)" fg:x="24194" fg:w="21"/><text x="17.2952%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (106 samples, 0.07%)</title><rect x="17.0030%" y="421" width="0.0747%" height="15" fill="rgb(249,103,42)" fg:x="24134" fg:w="106"/><text x="17.2530%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.01%)</title><rect x="17.0783%" y="405" width="0.0141%" height="15" fill="rgb(246,81,33)" fg:x="24241" fg:w="20"/><text x="17.3283%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="17.0776%" y="421" width="0.0162%" height="15" fill="rgb(252,33,42)" fg:x="24240" fg:w="23"/><text x="17.3276%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.01%)</title><rect x="17.1016%" y="405" width="0.0141%" height="15" fill="rgb(209,212,41)" fg:x="24274" fg:w="20"/><text x="17.3516%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.01%)</title><rect x="17.1037%" y="389" width="0.0120%" height="15" fill="rgb(207,154,6)" fg:x="24277" fg:w="17"/><text x="17.3537%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (33 samples, 0.02%)</title><rect x="17.0938%" y="421" width="0.0232%" height="15" fill="rgb(223,64,47)" fg:x="24263" fg:w="33"/><text x="17.3438%" y="431.50"></text></g><g><title>binary_to_types`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (16 samples, 0.01%)</title><rect x="17.1453%" y="389" width="0.0113%" height="15" fill="rgb(211,161,38)" fg:x="24336" fg:w="16"/><text x="17.3953%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (49 samples, 0.03%)</title><rect x="17.1403%" y="405" width="0.0345%" height="15" fill="rgb(219,138,40)" fg:x="24329" fg:w="49"/><text x="17.3903%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.02%)</title><rect x="17.1594%" y="389" width="0.0155%" height="15" fill="rgb(241,228,46)" fg:x="24356" fg:w="22"/><text x="17.4094%" y="399.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::constraints::TypeVariable as core::cmp::Ord&gt;::cmp (31 samples, 0.02%)</title><rect x="17.2256%" y="389" width="0.0218%" height="15" fill="rgb(223,209,38)" fg:x="24450" fg:w="31"/><text x="17.4756%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (196 samples, 0.14%)</title><rect x="17.1763%" y="405" width="0.1381%" height="15" fill="rgb(236,164,45)" fg:x="24380" fg:w="196"/><text x="17.4263%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (83 samples, 0.06%)</title><rect x="17.2559%" y="389" width="0.0585%" height="15" fill="rgb(231,15,5)" fg:x="24493" fg:w="83"/><text x="17.5059%" y="399.50"></text></g><g><title>binary_to_types`core::slice::cmp::_&lt;impl core::cmp::PartialOrd for [T]&gt;::partial_cmp (31 samples, 0.02%)</title><rect x="17.3144%" y="405" width="0.0218%" height="15" fill="rgb(252,35,15)" fg:x="24576" fg:w="31"/><text x="17.5644%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.02%)</title><rect x="17.3362%" y="405" width="0.0225%" height="15" fill="rgb(248,181,18)" fg:x="24607" fg:w="32"/><text x="17.5862%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.01%)</title><rect x="17.3587%" y="405" width="0.0120%" height="15" fill="rgb(233,39,42)" fg:x="24639" fg:w="17"/><text x="17.6087%" y="415.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (343 samples, 0.24%)</title><rect x="17.1319%" y="421" width="0.2417%" height="15" fill="rgb(238,110,33)" fg:x="24317" fg:w="343"/><text x="17.3819%" y="431.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::constraints::TypeVariable as core::cmp::Ord&gt;::cmp (36 samples, 0.03%)</title><rect x="17.4672%" y="405" width="0.0254%" height="15" fill="rgb(233,195,10)" fg:x="24793" fg:w="36"/><text x="17.7172%" y="415.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (314 samples, 0.22%)</title><rect x="17.3834%" y="421" width="0.2212%" height="15" fill="rgb(254,105,3)" fg:x="24674" fg:w="314"/><text x="17.6334%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (145 samples, 0.10%)</title><rect x="17.5025%" y="405" width="0.1022%" height="15" fill="rgb(221,225,9)" fg:x="24843" fg:w="145"/><text x="17.7525%" y="415.50"></text></g><g><title>binary_to_types`core::slice::cmp::_&lt;impl core::cmp::PartialOrd for [T]&gt;::partial_cmp (17 samples, 0.01%)</title><rect x="17.6096%" y="421" width="0.0120%" height="15" fill="rgb(224,227,45)" fg:x="24995" fg:w="17"/><text x="17.8596%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::get_saturation_edges (1,718 samples, 1.21%)</title><rect x="16.4570%" y="437" width="1.2104%" height="15" fill="rgb(229,198,43)" fg:x="23359" fg:w="1718"/><text x="16.7070%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.02%)</title><rect x="17.6504%" y="421" width="0.0169%" height="15" fill="rgb(206,209,35)" fg:x="25053" fg:w="24"/><text x="17.9004%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::saturate (1,752 samples, 1.23%)</title><rect x="16.4422%" y="453" width="1.2343%" height="15" fill="rgb(245,195,53)" fg:x="23338" fg:w="1752"/><text x="16.6922%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::simplify_graph (1,942 samples, 1.37%)</title><rect x="16.3160%" y="469" width="1.3682%" height="15" fill="rgb(240,92,26)" fg:x="23159" fg:w="1942"/><text x="16.5660%" y="479.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (40 samples, 0.03%)</title><rect x="17.7335%" y="437" width="0.0282%" height="15" fill="rgb(207,40,23)" fg:x="25171" fg:w="40"/><text x="17.9835%" y="447.50"></text></g><g><title>binary_to_types`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 0.01%)</title><rect x="17.7681%" y="437" width="0.0113%" height="15" fill="rgb(223,111,35)" fg:x="25220" fg:w="16"/><text x="18.0181%" y="447.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.01%)</title><rect x="17.7681%" y="421" width="0.0113%" height="15" fill="rgb(229,147,28)" fg:x="25220" fg:w="16"/><text x="18.0181%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::quoetient_graph (98 samples, 0.07%)</title><rect x="17.7237%" y="453" width="0.0690%" height="15" fill="rgb(211,29,28)" fg:x="25157" fg:w="98"/><text x="17.9737%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SketchGraph&lt;T&gt;::simplify_pointers (15 samples, 0.01%)</title><rect x="17.7927%" y="453" width="0.0106%" height="15" fill="rgb(228,72,33)" fg:x="25255" fg:w="15"/><text x="18.0427%" y="463.50"></text></g><g><title>binary_to_types`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.01%)</title><rect x="17.8371%" y="405" width="0.0134%" height="15" fill="rgb(205,214,31)" fg:x="25318" fg:w="19"/><text x="18.0871%" y="415.50"></text></g><g><title>binary_to_types`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16 samples, 0.01%)</title><rect x="17.8392%" y="389" width="0.0113%" height="15" fill="rgb(224,111,15)" fg:x="25321" fg:w="16"/><text x="18.0892%" y="399.50"></text></g><g><title>binary_to_types`&lt;itertools::adaptors::Product&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::fold (45 samples, 0.03%)</title><rect x="17.8216%" y="421" width="0.0317%" height="15" fill="rgb(253,21,26)" fg:x="25296" fg:w="45"/><text x="18.0716%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::generate_quotient_groups_for_initial_set (71 samples, 0.05%)</title><rect x="17.8082%" y="437" width="0.0500%" height="15" fill="rgb(245,139,43)" fg:x="25277" fg:w="71"/><text x="18.0582%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::generate_quotient_groups (79 samples, 0.06%)</title><rect x="17.8033%" y="453" width="0.0557%" height="15" fill="rgb(252,170,7)" fg:x="25270" fg:w="79"/><text x="18.0533%" y="463.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="17.8674%" y="437" width="0.0106%" height="15" fill="rgb(231,118,14)" fg:x="25361" fg:w="15"/><text x="18.1174%" y="447.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement as alga::general::lattice::JoinSemilattice&gt;::join (21 samples, 0.01%)</title><rect x="17.8900%" y="421" width="0.0148%" height="15" fill="rgb(238,83,0)" fg:x="25393" fg:w="21"/><text x="18.1400%" y="431.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement as alga::general::lattice::MeetSemilattice&gt;::meet (15 samples, 0.01%)</title><rect x="17.9047%" y="421" width="0.0106%" height="15" fill="rgb(221,39,39)" fg:x="25414" fg:w="15"/><text x="18.1547%" y="431.50"></text></g><g><title>binary_to_types`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15 samples, 0.01%)</title><rect x="17.9350%" y="421" width="0.0106%" height="15" fill="rgb(222,119,46)" fg:x="25457" fg:w="15"/><text x="18.1850%" y="431.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::add_node (106 samples, 0.07%)</title><rect x="17.8794%" y="437" width="0.0747%" height="15" fill="rgb(222,165,49)" fg:x="25378" fg:w="106"/><text x="18.1294%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::insert_dtv (151 samples, 0.11%)</title><rect x="17.8590%" y="453" width="0.1064%" height="15" fill="rgb(219,113,52)" fg:x="25349" fg:w="151"/><text x="18.1090%" y="463.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SketchBuilder&lt;U,T,V&gt;::build_and_label_constraints (382 samples, 0.27%)</title><rect x="17.7054%" y="469" width="0.2691%" height="15" fill="rgb(214,7,15)" fg:x="25131" fg:w="382"/><text x="17.9554%" y="479.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::type_sketch::SketchGraph&lt;binary_type_inference::solver::type_sketch::LatticeBounds&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement&gt;&gt;&gt; (20 samples, 0.01%)</title><rect x="17.9822%" y="469" width="0.0141%" height="15" fill="rgb(235,32,4)" fg:x="25524" fg:w="20"/><text x="18.2322%" y="479.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::scc_constraint_generation::Context&lt;R,P,S,C,T,U&gt;::simplify_scc (20,981 samples, 14.78%)</title><rect x="3.2211%" y="485" width="14.7816%" height="15" fill="rgb(238,90,54)" fg:x="4572" fg:w="20981"/><text x="3.4711%" y="495.50">binary_to_types`binary_..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (44 samples, 0.03%)</title><rect x="18.0689%" y="325" width="0.0310%" height="15" fill="rgb(213,208,19)" fg:x="25647" fg:w="44"/><text x="18.3189%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (91 samples, 0.06%)</title><rect x="18.0407%" y="357" width="0.0641%" height="15" fill="rgb(233,156,4)" fg:x="25607" fg:w="91"/><text x="18.2907%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (62 samples, 0.04%)</title><rect x="18.0612%" y="341" width="0.0437%" height="15" fill="rgb(207,194,5)" fg:x="25636" fg:w="62"/><text x="18.3112%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (108 samples, 0.08%)</title><rect x="18.0351%" y="373" width="0.0761%" height="15" fill="rgb(206,111,30)" fg:x="25599" fg:w="108"/><text x="18.2851%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.01%)</title><rect x="18.1253%" y="357" width="0.0120%" height="15" fill="rgb(243,70,54)" fg:x="25727" fg:w="17"/><text x="18.3753%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.01%)</title><rect x="18.1260%" y="341" width="0.0113%" height="15" fill="rgb(242,28,8)" fg:x="25728" fg:w="16"/><text x="18.3760%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.02%)</title><rect x="18.1182%" y="373" width="0.0197%" height="15" fill="rgb(219,106,18)" fg:x="25717" fg:w="28"/><text x="18.3682%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (217 samples, 0.15%)</title><rect x="18.0076%" y="389" width="0.1529%" height="15" fill="rgb(244,222,10)" fg:x="25560" fg:w="217"/><text x="18.2576%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (31 samples, 0.02%)</title><rect x="18.1387%" y="373" width="0.0218%" height="15" fill="rgb(236,179,52)" fg:x="25746" fg:w="31"/><text x="18.3887%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (248 samples, 0.17%)</title><rect x="18.0034%" y="405" width="0.1747%" height="15" fill="rgb(213,23,39)" fg:x="25554" fg:w="248"/><text x="18.2534%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (250 samples, 0.18%)</title><rect x="18.0027%" y="437" width="0.1761%" height="15" fill="rgb(238,48,10)" fg:x="25553" fg:w="250"/><text x="18.2527%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (250 samples, 0.18%)</title><rect x="18.0027%" y="421" width="0.1761%" height="15" fill="rgb(251,196,23)" fg:x="25553" fg:w="250"/><text x="18.2527%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (16 samples, 0.01%)</title><rect x="18.1816%" y="405" width="0.0113%" height="15" fill="rgb(250,152,24)" fg:x="25807" fg:w="16"/><text x="18.4316%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (19 samples, 0.01%)</title><rect x="18.1809%" y="421" width="0.0134%" height="15" fill="rgb(209,150,17)" fg:x="25806" fg:w="19"/><text x="18.4309%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.01%)</title><rect x="18.2225%" y="373" width="0.0106%" height="15" fill="rgb(234,202,34)" fg:x="25865" fg:w="15"/><text x="18.4725%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (39 samples, 0.03%)</title><rect x="18.2063%" y="389" width="0.0275%" height="15" fill="rgb(253,148,53)" fg:x="25842" fg:w="39"/><text x="18.4563%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (80 samples, 0.06%)</title><rect x="18.2387%" y="389" width="0.0564%" height="15" fill="rgb(218,129,16)" fg:x="25888" fg:w="80"/><text x="18.4887%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (28 samples, 0.02%)</title><rect x="18.2753%" y="373" width="0.0197%" height="15" fill="rgb(216,85,19)" fg:x="25940" fg:w="28"/><text x="18.5253%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.01%)</title><rect x="18.2993%" y="389" width="0.0148%" height="15" fill="rgb(235,228,7)" fg:x="25974" fg:w="21"/><text x="18.5493%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (175 samples, 0.12%)</title><rect x="18.1950%" y="405" width="0.1233%" height="15" fill="rgb(245,175,0)" fg:x="25826" fg:w="175"/><text x="18.4450%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (220 samples, 0.15%)</title><rect x="18.1950%" y="421" width="0.1550%" height="15" fill="rgb(208,168,36)" fg:x="25826" fg:w="220"/><text x="18.4450%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (163 samples, 0.11%)</title><rect x="18.3500%" y="421" width="0.1148%" height="15" fill="rgb(246,171,24)" fg:x="26046" fg:w="163"/><text x="18.6000%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="18.4648%" y="421" width="0.0373%" height="15" fill="rgb(215,142,24)" fg:x="26209" fg:w="53"/><text x="18.7148%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (23 samples, 0.02%)</title><rect x="18.6515%" y="341" width="0.0162%" height="15" fill="rgb(250,187,7)" fg:x="26474" fg:w="23"/><text x="18.9015%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 0.01%)</title><rect x="18.6551%" y="325" width="0.0127%" height="15" fill="rgb(228,66,33)" fg:x="26479" fg:w="18"/><text x="18.9051%" y="335.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (51 samples, 0.04%)</title><rect x="18.6332%" y="357" width="0.0359%" height="15" fill="rgb(234,215,21)" fg:x="26448" fg:w="51"/><text x="18.8832%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.05%)</title><rect x="18.6227%" y="373" width="0.0479%" height="15" fill="rgb(222,191,20)" fg:x="26433" fg:w="68"/><text x="18.8727%" y="383.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (196 samples, 0.14%)</title><rect x="18.5409%" y="389" width="0.1381%" height="15" fill="rgb(245,79,54)" fg:x="26317" fg:w="196"/><text x="18.7909%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (255 samples, 0.18%)</title><rect x="18.5022%" y="405" width="0.1797%" height="15" fill="rgb(240,10,37)" fg:x="26262" fg:w="255"/><text x="18.7522%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (134 samples, 0.09%)</title><rect x="18.7283%" y="373" width="0.0944%" height="15" fill="rgb(214,192,32)" fg:x="26583" fg:w="134"/><text x="18.9783%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.01%)</title><rect x="18.8277%" y="357" width="0.0106%" height="15" fill="rgb(209,36,54)" fg:x="26724" fg:w="15"/><text x="19.0777%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.01%)</title><rect x="18.8263%" y="373" width="0.0127%" height="15" fill="rgb(220,10,11)" fg:x="26722" fg:w="18"/><text x="19.0763%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (37 samples, 0.03%)</title><rect x="18.8404%" y="373" width="0.0261%" height="15" fill="rgb(221,106,17)" fg:x="26742" fg:w="37"/><text x="19.0904%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (220 samples, 0.15%)</title><rect x="18.7121%" y="389" width="0.1550%" height="15" fill="rgb(251,142,44)" fg:x="26560" fg:w="220"/><text x="18.9621%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::bulk_build_from_sorted_iter (252 samples, 0.18%)</title><rect x="18.7016%" y="405" width="0.1775%" height="15" fill="rgb(238,13,15)" fg:x="26545" fg:w="252"/><text x="18.9516%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.01%)</title><rect x="18.8671%" y="389" width="0.0120%" height="15" fill="rgb(208,107,27)" fg:x="26780" fg:w="17"/><text x="19.1171%" y="399.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::constraints::TypeVariable as core::cmp::Ord&gt;::cmp (17 samples, 0.01%)</title><rect x="18.9186%" y="389" width="0.0120%" height="15" fill="rgb(205,136,37)" fg:x="26853" fg:w="17"/><text x="19.1686%" y="399.50"></text></g><g><title>binary_to_types`alloc::slice::merge_sort (117 samples, 0.08%)</title><rect x="18.8791%" y="405" width="0.0824%" height="15" fill="rgb(250,205,27)" fg:x="26797" fg:w="117"/><text x="19.1291%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (38 samples, 0.03%)</title><rect x="18.9348%" y="389" width="0.0268%" height="15" fill="rgb(210,80,43)" fg:x="26876" fg:w="38"/><text x="19.1848%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (41 samples, 0.03%)</title><rect x="18.9629%" y="405" width="0.0289%" height="15" fill="rgb(247,160,36)" fg:x="26916" fg:w="41"/><text x="19.2129%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (707 samples, 0.50%)</title><rect x="18.5022%" y="421" width="0.4981%" height="15" fill="rgb(234,13,49)" fg:x="26262" fg:w="707"/><text x="18.7522%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (254 samples, 0.18%)</title><rect x="19.1651%" y="405" width="0.1789%" height="15" fill="rgb(234,122,0)" fg:x="27203" fg:w="254"/><text x="19.4151%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (123 samples, 0.09%)</title><rect x="19.3441%" y="405" width="0.0867%" height="15" fill="rgb(207,146,38)" fg:x="27457" fg:w="123"/><text x="19.5941%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (54 samples, 0.04%)</title><rect x="21.8973%" y="341" width="0.0380%" height="15" fill="rgb(207,177,25)" fg:x="31081" fg:w="54"/><text x="22.1473%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (48 samples, 0.03%)</title><rect x="21.9015%" y="325" width="0.0338%" height="15" fill="rgb(211,178,42)" fg:x="31087" fg:w="48"/><text x="22.1515%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (47 samples, 0.03%)</title><rect x="21.9022%" y="309" width="0.0331%" height="15" fill="rgb(230,69,54)" fg:x="31088" fg:w="47"/><text x="22.1522%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (45 samples, 0.03%)</title><rect x="21.9036%" y="293" width="0.0317%" height="15" fill="rgb(214,135,41)" fg:x="31090" fg:w="45"/><text x="22.1536%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (39 samples, 0.03%)</title><rect x="21.9078%" y="277" width="0.0275%" height="15" fill="rgb(237,67,25)" fg:x="31096" fg:w="39"/><text x="22.1578%" y="287.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (83 samples, 0.06%)</title><rect x="21.8945%" y="357" width="0.0585%" height="15" fill="rgb(222,189,50)" fg:x="31077" fg:w="83"/><text x="22.1445%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (90 samples, 0.06%)</title><rect x="21.8916%" y="389" width="0.0634%" height="15" fill="rgb(245,148,34)" fg:x="31073" fg:w="90"/><text x="22.1416%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (88 samples, 0.06%)</title><rect x="21.8931%" y="373" width="0.0620%" height="15" fill="rgb(222,29,6)" fg:x="31075" fg:w="88"/><text x="22.1431%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (83 samples, 0.06%)</title><rect x="21.9614%" y="389" width="0.0585%" height="15" fill="rgb(221,189,43)" fg:x="31172" fg:w="83"/><text x="22.2114%" y="399.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::node_context::points_to::PointerState as binary_type_inference::constraint_generation::NodeContextMapping&gt;::apply_def (23 samples, 0.02%)</title><rect x="22.0248%" y="389" width="0.0162%" height="15" fill="rgb(207,36,27)" fg:x="31262" fg:w="23"/><text x="22.2748%" y="399.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::pointer_inference::state::access_handling::_&lt;impl cwe_checker_lib::analysis::pointer_inference::state::State&gt;::handle_register_assign (16 samples, 0.01%)</title><rect x="22.0297%" y="373" width="0.0113%" height="15" fill="rgb(217,90,24)" fg:x="31269" fg:w="16"/><text x="22.2797%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (50 samples, 0.04%)</title><rect x="22.1784%" y="261" width="0.0352%" height="15" fill="rgb(224,66,35)" fg:x="31480" fg:w="50"/><text x="22.4284%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (184 samples, 0.13%)</title><rect x="22.1347%" y="293" width="0.1296%" height="15" fill="rgb(221,13,50)" fg:x="31418" fg:w="184"/><text x="22.3847%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (166 samples, 0.12%)</title><rect x="22.1474%" y="277" width="0.1170%" height="15" fill="rgb(236,68,49)" fg:x="31436" fg:w="166"/><text x="22.3974%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (72 samples, 0.05%)</title><rect x="22.2136%" y="261" width="0.0507%" height="15" fill="rgb(229,146,28)" fg:x="31530" fg:w="72"/><text x="22.4636%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (218 samples, 0.15%)</title><rect x="22.1136%" y="309" width="0.1536%" height="15" fill="rgb(225,31,38)" fg:x="31388" fg:w="218"/><text x="22.3636%" y="319.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (272 samples, 0.19%)</title><rect x="22.0854%" y="325" width="0.1916%" height="15" fill="rgb(250,208,3)" fg:x="31348" fg:w="272"/><text x="22.3354%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (39 samples, 0.03%)</title><rect x="22.3059%" y="277" width="0.0275%" height="15" fill="rgb(246,54,23)" fg:x="31661" fg:w="39"/><text x="22.5559%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (76 samples, 0.05%)</title><rect x="22.2848%" y="309" width="0.0535%" height="15" fill="rgb(243,76,11)" fg:x="31631" fg:w="76"/><text x="22.5348%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (56 samples, 0.04%)</title><rect x="22.2989%" y="293" width="0.0395%" height="15" fill="rgb(245,21,50)" fg:x="31651" fg:w="56"/><text x="22.5489%" y="303.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (95 samples, 0.07%)</title><rect x="22.2770%" y="325" width="0.0669%" height="15" fill="rgb(228,9,43)" fg:x="31620" fg:w="95"/><text x="22.5270%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (21 samples, 0.01%)</title><rect x="22.3686%" y="277" width="0.0148%" height="15" fill="rgb(208,100,47)" fg:x="31750" fg:w="21"/><text x="22.6186%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (62 samples, 0.04%)</title><rect x="22.3573%" y="309" width="0.0437%" height="15" fill="rgb(232,26,8)" fg:x="31734" fg:w="62"/><text x="22.6073%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (59 samples, 0.04%)</title><rect x="22.3594%" y="293" width="0.0416%" height="15" fill="rgb(216,166,38)" fg:x="31737" fg:w="59"/><text x="22.6094%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (25 samples, 0.02%)</title><rect x="22.3834%" y="277" width="0.0176%" height="15" fill="rgb(251,202,51)" fg:x="31771" fg:w="25"/><text x="22.6334%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (72 samples, 0.05%)</title><rect x="22.3510%" y="325" width="0.0507%" height="15" fill="rgb(254,216,34)" fg:x="31725" fg:w="72"/><text x="22.6010%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (527 samples, 0.37%)</title><rect x="22.0558%" y="341" width="0.3713%" height="15" fill="rgb(251,32,27)" fg:x="31306" fg:w="527"/><text x="22.3058%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (33 samples, 0.02%)</title><rect x="22.4038%" y="325" width="0.0232%" height="15" fill="rgb(208,127,28)" fg:x="31800" fg:w="33"/><text x="22.6538%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="22.4271%" y="341" width="0.0113%" height="15" fill="rgb(224,137,22)" fg:x="31833" fg:w="16"/><text x="22.6771%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (574 samples, 0.40%)</title><rect x="22.0438%" y="357" width="0.4044%" height="15" fill="rgb(254,70,32)" fg:x="31289" fg:w="574"/><text x="22.2938%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (580 samples, 0.41%)</title><rect x="22.0410%" y="373" width="0.4086%" height="15" fill="rgb(229,75,37)" fg:x="31285" fg:w="580"/><text x="22.2910%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (57 samples, 0.04%)</title><rect x="22.4679%" y="325" width="0.0402%" height="15" fill="rgb(252,64,23)" fg:x="31891" fg:w="57"/><text x="22.7179%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (24 samples, 0.02%)</title><rect x="22.4912%" y="309" width="0.0169%" height="15" fill="rgb(232,162,48)" fg:x="31924" fg:w="24"/><text x="22.7412%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (20 samples, 0.01%)</title><rect x="22.4940%" y="293" width="0.0141%" height="15" fill="rgb(246,160,12)" fg:x="31928" fg:w="20"/><text x="22.7440%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (31 samples, 0.02%)</title><rect x="22.5539%" y="293" width="0.0218%" height="15" fill="rgb(247,166,0)" fg:x="32013" fg:w="31"/><text x="22.8039%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (122 samples, 0.09%)</title><rect x="22.5081%" y="325" width="0.0860%" height="15" fill="rgb(249,219,21)" fg:x="31948" fg:w="122"/><text x="22.7581%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (99 samples, 0.07%)</title><rect x="22.5243%" y="309" width="0.0697%" height="15" fill="rgb(205,209,3)" fg:x="31971" fg:w="99"/><text x="22.7743%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (26 samples, 0.02%)</title><rect x="22.5757%" y="293" width="0.0183%" height="15" fill="rgb(243,44,1)" fg:x="32044" fg:w="26"/><text x="22.8257%" y="303.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (216 samples, 0.15%)</title><rect x="22.4546%" y="341" width="0.1522%" height="15" fill="rgb(206,159,16)" fg:x="31872" fg:w="216"/><text x="22.7046%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.01%)</title><rect x="22.6279%" y="325" width="0.0106%" height="15" fill="rgb(244,77,30)" fg:x="32118" fg:w="15"/><text x="22.8779%" y="335.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (49 samples, 0.03%)</title><rect x="22.6067%" y="341" width="0.0345%" height="15" fill="rgb(218,69,12)" fg:x="32088" fg:w="49"/><text x="22.8567%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (43 samples, 0.03%)</title><rect x="22.6441%" y="341" width="0.0303%" height="15" fill="rgb(212,87,7)" fg:x="32141" fg:w="43"/><text x="22.8941%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.01%)</title><rect x="22.6610%" y="325" width="0.0134%" height="15" fill="rgb(245,114,25)" fg:x="32165" fg:w="19"/><text x="22.9110%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (353 samples, 0.25%)</title><rect x="22.4496%" y="357" width="0.2487%" height="15" fill="rgb(210,61,42)" fg:x="31865" fg:w="353"/><text x="22.6996%" y="367.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (375 samples, 0.26%)</title><rect x="22.4496%" y="373" width="0.2642%" height="15" fill="rgb(211,52,33)" fg:x="31865" fg:w="375"/><text x="22.6996%" y="383.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::node_context::register_map::RegisterContext as binary_type_inference::constraint_generation::NodeContextMapping&gt;::apply_def (965 samples, 0.68%)</title><rect x="22.0410%" y="389" width="0.6799%" height="15" fill="rgb(234,58,33)" fg:x="31285" fg:w="965"/><text x="22.2910%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (20 samples, 0.01%)</title><rect x="22.7209%" y="341" width="0.0141%" height="15" fill="rgb(220,115,36)" fg:x="32250" fg:w="20"/><text x="22.9709%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (21 samples, 0.01%)</title><rect x="22.7209%" y="373" width="0.0148%" height="15" fill="rgb(243,153,54)" fg:x="32250" fg:w="21"/><text x="22.9709%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (21 samples, 0.01%)</title><rect x="22.7209%" y="357" width="0.0148%" height="15" fill="rgb(251,47,18)" fg:x="32250" fg:w="21"/><text x="22.9709%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="22.7364%" y="357" width="0.0169%" height="15" fill="rgb(242,102,42)" fg:x="32272" fg:w="24"/><text x="22.9864%" y="367.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (26 samples, 0.02%)</title><rect x="22.7364%" y="373" width="0.0183%" height="15" fill="rgb(234,31,38)" fg:x="32272" fg:w="26"/><text x="22.9864%" y="383.50"></text></g><g><title>binary_to_types`binary_type_inference::analysis::reaching_definitions::apply_return (37 samples, 0.03%)</title><rect x="22.7547%" y="373" width="0.0261%" height="15" fill="rgb(221,117,51)" fg:x="32298" fg:w="37"/><text x="23.0047%" y="383.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::node_context::register_map::RegisterContext as binary_type_inference::constraint_generation::NodeContextMapping&gt;::apply_return_node (92 samples, 0.06%)</title><rect x="22.7209%" y="389" width="0.0648%" height="15" fill="rgb(212,20,18)" fg:x="32250" fg:w="92"/><text x="22.9709%" y="399.50"></text></g><g><title>binary_to_types`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (212 samples, 0.15%)</title><rect x="22.7892%" y="389" width="0.1494%" height="15" fill="rgb(245,133,36)" fg:x="32347" fg:w="212"/><text x="23.0392%" y="399.50"></text></g><g><title>binary_to_types`DYLD-STUB$$free (132 samples, 0.09%)</title><rect x="22.9386%" y="389" width="0.0930%" height="15" fill="rgb(212,6,19)" fg:x="32559" fg:w="132"/><text x="23.1886%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (131 samples, 0.09%)</title><rect x="23.8756%" y="341" width="0.0923%" height="15" fill="rgb(218,1,36)" fg:x="33889" fg:w="131"/><text x="24.1256%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,331 samples, 0.94%)</title><rect x="24.2497%" y="325" width="0.9377%" height="15" fill="rgb(246,84,54)" fg:x="34420" fg:w="1331"/><text x="24.4997%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (411 samples, 0.29%)</title><rect x="24.8978%" y="309" width="0.2896%" height="15" fill="rgb(242,110,6)" fg:x="35340" fg:w="411"/><text x="25.1478%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,718 samples, 1.91%)</title><rect x="23.3592%" y="357" width="1.9149%" height="15" fill="rgb(214,47,5)" fg:x="33156" fg:w="2718"/><text x="23.6092%" y="367.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,854 samples, 1.31%)</title><rect x="23.9679%" y="341" width="1.3062%" height="15" fill="rgb(218,159,25)" fg:x="34020" fg:w="1854"/><text x="24.2179%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (123 samples, 0.09%)</title><rect x="25.1874%" y="325" width="0.0867%" height="15" fill="rgb(215,211,28)" fg:x="35751" fg:w="123"/><text x="25.4374%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (224 samples, 0.16%)</title><rect x="25.2741%" y="357" width="0.1578%" height="15" fill="rgb(238,59,32)" fg:x="35874" fg:w="224"/><text x="25.5241%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (3,173 samples, 2.24%)</title><rect x="23.2190%" y="373" width="2.2355%" height="15" fill="rgb(226,82,3)" fg:x="32957" fg:w="3173"/><text x="23.4690%" y="383.50">b..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (32 samples, 0.02%)</title><rect x="25.4319%" y="357" width="0.0225%" height="15" fill="rgb(240,164,32)" fg:x="36098" fg:w="32"/><text x="25.6819%" y="367.50"></text></g><g><title>binary_to_types`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,396 samples, 0.98%)</title><rect x="25.4544%" y="373" width="0.9835%" height="15" fill="rgb(232,46,7)" fg:x="36130" fg:w="1396"/><text x="25.7044%" y="383.50"></text></g><g><title>binary_to_types`DYLD-STUB$$malloc (105 samples, 0.07%)</title><rect x="26.4379%" y="373" width="0.0740%" height="15" fill="rgb(229,129,53)" fg:x="37526" fg:w="105"/><text x="26.6879%" y="383.50"></text></g><g><title>binary_to_types`DYLD-STUB$$memcpy (93 samples, 0.07%)</title><rect x="26.5133%" y="373" width="0.0655%" height="15" fill="rgb(234,188,29)" fg:x="37633" fg:w="93"/><text x="26.7633%" y="383.50"></text></g><g><title>binary_to_types`__rdl_alloc (96 samples, 0.07%)</title><rect x="26.5788%" y="373" width="0.0676%" height="15" fill="rgb(246,141,4)" fg:x="37726" fg:w="96"/><text x="26.8288%" y="383.50"></text></g><g><title>binary_to_types`core::hash::BuildHasher::hash_one (943 samples, 0.66%)</title><rect x="26.6465%" y="373" width="0.6644%" height="15" fill="rgb(229,23,39)" fg:x="37822" fg:w="943"/><text x="26.8965%" y="383.50"></text></g><g><title>binary_to_types`hashbrown::raw::RawTable&lt;T,A&gt;::find (212 samples, 0.15%)</title><rect x="27.3108%" y="373" width="0.1494%" height="15" fill="rgb(206,12,3)" fg:x="38765" fg:w="212"/><text x="27.5608%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (107 samples, 0.08%)</title><rect x="27.4602%" y="373" width="0.0754%" height="15" fill="rgb(252,226,20)" fg:x="38977" fg:w="107"/><text x="27.7102%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (891 samples, 0.63%)</title><rect x="28.4592%" y="357" width="0.6277%" height="15" fill="rgb(216,123,35)" fg:x="40395" fg:w="891"/><text x="28.7092%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (2,251 samples, 1.59%)</title><rect x="27.5356%" y="373" width="1.5859%" height="15" fill="rgb(212,68,40)" fg:x="39084" fg:w="2251"/><text x="27.7856%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (49 samples, 0.03%)</title><rect x="29.0869%" y="357" width="0.0345%" height="15" fill="rgb(254,125,32)" fg:x="41286" fg:w="49"/><text x="29.3369%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (104 samples, 0.07%)</title><rect x="29.1215%" y="373" width="0.0733%" height="15" fill="rgb(253,97,22)" fg:x="41335" fg:w="104"/><text x="29.3715%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (716 samples, 0.50%)</title><rect x="29.1947%" y="373" width="0.5044%" height="15" fill="rgb(241,101,14)" fg:x="41439" fg:w="716"/><text x="29.4447%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (156 samples, 0.11%)</title><rect x="29.6992%" y="373" width="0.1099%" height="15" fill="rgb(238,103,29)" fg:x="42155" fg:w="156"/><text x="29.9492%" y="383.50"></text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::Context&lt;R,P,S,C&gt;::should_generate_for_block (10,015 samples, 7.06%)</title><rect x="23.0407%" y="389" width="7.0558%" height="15" fill="rgb(233,195,47)" fg:x="32704" fg:w="10015"/><text x="23.2907%" y="399.50">binary_to..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (403 samples, 0.28%)</title><rect x="29.8126%" y="373" width="0.2839%" height="15" fill="rgb(246,218,30)" fg:x="42316" fg:w="403"/><text x="30.0626%" y="383.50"></text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::NodeContext&lt;R,P,S,C&gt;::build_addressing_representation (26 samples, 0.02%)</title><rect x="30.0965%" y="389" width="0.0183%" height="15" fill="rgb(219,145,47)" fg:x="42719" fg:w="26"/><text x="30.3465%" y="399.50"></text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::NodeContext&lt;R,P,S,C&gt;::evaluate_expression (23 samples, 0.02%)</title><rect x="30.1148%" y="389" width="0.0162%" height="15" fill="rgb(243,12,26)" fg:x="42745" fg:w="23"/><text x="30.3648%" y="399.50"></text></g><g><title>binary_to_types`core::hash::BuildHasher::hash_one (783 samples, 0.55%)</title><rect x="30.1388%" y="389" width="0.5516%" height="15" fill="rgb(214,87,16)" fg:x="42779" fg:w="783"/><text x="30.3888%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (55 samples, 0.04%)</title><rect x="30.7137%" y="341" width="0.0387%" height="15" fill="rgb(208,99,42)" fg:x="43595" fg:w="55"/><text x="30.9637%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.01%)</title><rect x="30.7419%" y="325" width="0.0106%" height="15" fill="rgb(253,99,2)" fg:x="43635" fg:w="15"/><text x="30.9919%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (38 samples, 0.03%)</title><rect x="30.7898%" y="309" width="0.0268%" height="15" fill="rgb(220,168,23)" fg:x="43703" fg:w="38"/><text x="31.0398%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (127 samples, 0.09%)</title><rect x="30.7524%" y="341" width="0.0895%" height="15" fill="rgb(242,38,24)" fg:x="43650" fg:w="127"/><text x="31.0024%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (105 samples, 0.07%)</title><rect x="30.7679%" y="325" width="0.0740%" height="15" fill="rgb(225,182,9)" fg:x="43672" fg:w="105"/><text x="31.0179%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (36 samples, 0.03%)</title><rect x="30.8165%" y="309" width="0.0254%" height="15" fill="rgb(243,178,37)" fg:x="43741" fg:w="36"/><text x="31.0665%" y="319.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (229 samples, 0.16%)</title><rect x="30.6947%" y="357" width="0.1613%" height="15" fill="rgb(232,139,19)" fg:x="43568" fg:w="229"/><text x="30.9447%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.01%)</title><rect x="30.8764%" y="341" width="0.0113%" height="15" fill="rgb(225,201,24)" fg:x="43826" fg:w="16"/><text x="31.1264%" y="351.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (48 samples, 0.03%)</title><rect x="30.8574%" y="357" width="0.0338%" height="15" fill="rgb(221,47,46)" fg:x="43799" fg:w="48"/><text x="31.1074%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.01%)</title><rect x="30.9131%" y="341" width="0.0120%" height="15" fill="rgb(249,23,13)" fg:x="43878" fg:w="17"/><text x="31.1631%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (45 samples, 0.03%)</title><rect x="30.8940%" y="357" width="0.0317%" height="15" fill="rgb(219,9,5)" fg:x="43851" fg:w="45"/><text x="31.1440%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (362 samples, 0.26%)</title><rect x="30.6904%" y="373" width="0.2550%" height="15" fill="rgb(254,171,16)" fg:x="43562" fg:w="362"/><text x="30.9404%" y="383.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::node_context::points_to::PointerState&gt; (17 samples, 0.01%)</title><rect x="30.9574%" y="373" width="0.0120%" height="15" fill="rgb(230,171,20)" fg:x="43941" fg:w="17"/><text x="31.2074%" y="383.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::constraint_generation::NodeContext&lt;binary_type_inference::node_context::register_map::RegisterContext,binary_type_inference::node_context::points_to::PointsToContext,binary_type_inference::node_context::subproc_loc::ProcedureContext,binary_type_inference::node_context::GhidraConstantResolver&gt;&gt; (416 samples, 0.29%)</title><rect x="30.6904%" y="389" width="0.2931%" height="15" fill="rgb(210,71,41)" fg:x="43562" fg:w="416"/><text x="30.9404%" y="399.50"></text></g><g><title>binary_to_types`hashbrown::raw::RawTable&lt;T,A&gt;::find (61 samples, 0.04%)</title><rect x="30.9835%" y="389" width="0.0430%" height="15" fill="rgb(206,173,20)" fg:x="43978" fg:w="61"/><text x="31.2335%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (200 samples, 0.14%)</title><rect x="31.0265%" y="389" width="0.1409%" height="15" fill="rgb(233,88,34)" fg:x="44039" fg:w="200"/><text x="31.2765%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (246 samples, 0.17%)</title><rect x="31.1674%" y="389" width="0.1733%" height="15" fill="rgb(223,209,46)" fg:x="44239" fg:w="246"/><text x="31.4174%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (219 samples, 0.15%)</title><rect x="31.3407%" y="389" width="0.1543%" height="15" fill="rgb(250,43,18)" fg:x="44485" fg:w="219"/><text x="31.5907%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (196 samples, 0.14%)</title><rect x="31.4950%" y="389" width="0.1381%" height="15" fill="rgb(208,13,10)" fg:x="44704" fg:w="196"/><text x="31.7450%" y="399.50"></text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::Context&lt;R,P,S,C&gt;::generate_constraints_for_node (17,314 samples, 12.20%)</title><rect x="19.4364%" y="405" width="12.1981%" height="15" fill="rgb(212,200,36)" fg:x="27588" fg:w="17314"/><text x="19.6864%" y="415.50">binary_to_types`bi..</text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::Context&lt;R,P,S,C&gt;::should_generate_for_block (56 samples, 0.04%)</title><rect x="31.6345%" y="405" width="0.0395%" height="15" fill="rgb(225,90,30)" fg:x="44902" fg:w="56"/><text x="31.8845%" y="415.50"></text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::Context&lt;R,P,S,C&gt;::generate_constraints (17,982 samples, 12.67%)</title><rect x="19.0059%" y="421" width="12.6687%" height="15" fill="rgb(236,182,39)" fg:x="26977" fg:w="17982"/><text x="19.2559%" y="431.50">binary_to_types`bin..</text></g><g><title>binary_to_types`binary_type_inference::constraint_generation::Context&lt;R,P,S,C&gt;::generate_constraints_for_node (90 samples, 0.06%)</title><rect x="31.6747%" y="421" width="0.0634%" height="15" fill="rgb(212,144,35)" fg:x="44959" fg:w="90"/><text x="31.9247%" y="431.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::VHat as core::clone::Clone&gt;::clone (34 samples, 0.02%)</title><rect x="31.7599%" y="357" width="0.0240%" height="15" fill="rgb(228,63,44)" fg:x="45080" fg:w="34"/><text x="32.0099%" y="367.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::generate_start_and_stop_edges_for_state (42 samples, 0.03%)</title><rect x="31.7578%" y="373" width="0.0296%" height="15" fill="rgb(228,109,6)" fg:x="45077" fg:w="42"/><text x="32.0078%" y="383.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::VHat as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="31.8057%" y="341" width="0.0120%" height="15" fill="rgb(238,117,24)" fg:x="45145" fg:w="17"/><text x="32.0557%" y="351.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::EdgeDefinition::flip_edge (16 samples, 0.01%)</title><rect x="31.8212%" y="341" width="0.0113%" height="15" fill="rgb(242,26,26)" fg:x="45167" fg:w="16"/><text x="32.0712%" y="351.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::generate_push_pop_edges_for_state (54 samples, 0.04%)</title><rect x="31.7986%" y="357" width="0.0380%" height="15" fill="rgb(221,92,48)" fg:x="45135" fg:w="54"/><text x="32.0486%" y="367.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (98 samples, 0.07%)</title><rect x="31.7874%" y="373" width="0.0690%" height="15" fill="rgb(209,209,32)" fg:x="45119" fg:w="98"/><text x="32.0374%" y="383.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (159 samples, 0.11%)</title><rect x="31.7507%" y="389" width="0.1120%" height="15" fill="rgb(221,70,22)" fg:x="45067" fg:w="159"/><text x="32.0007%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.01%)</title><rect x="31.8698%" y="389" width="0.0148%" height="15" fill="rgb(248,145,5)" fg:x="45236" fg:w="21"/><text x="32.1198%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (197 samples, 0.14%)</title><rect x="31.7493%" y="405" width="0.1388%" height="15" fill="rgb(226,116,26)" fg:x="45065" fg:w="197"/><text x="31.9993%" y="415.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::constraints::TypeVariable as core::cmp::Ord&gt;::cmp (15 samples, 0.01%)</title><rect x="31.9304%" y="373" width="0.0106%" height="15" fill="rgb(244,5,17)" fg:x="45322" fg:w="15"/><text x="32.1804%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (106 samples, 0.07%)</title><rect x="31.9022%" y="389" width="0.0747%" height="15" fill="rgb(252,159,33)" fg:x="45282" fg:w="106"/><text x="32.1522%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (45 samples, 0.03%)</title><rect x="31.9452%" y="373" width="0.0317%" height="15" fill="rgb(206,71,0)" fg:x="45343" fg:w="45"/><text x="32.1952%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.01%)</title><rect x="31.9811%" y="389" width="0.0106%" height="15" fill="rgb(233,118,54)" fg:x="45394" fg:w="15"/><text x="32.2311%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (150 samples, 0.11%)</title><rect x="31.8895%" y="405" width="0.1057%" height="15" fill="rgb(234,83,48)" fg:x="45264" fg:w="150"/><text x="32.1395%" y="415.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (36 samples, 0.03%)</title><rect x="32.0178%" y="373" width="0.0254%" height="15" fill="rgb(228,3,54)" fg:x="45446" fg:w="36"/><text x="32.2678%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (21 samples, 0.01%)</title><rect x="32.0283%" y="357" width="0.0148%" height="15" fill="rgb(226,155,13)" fg:x="45461" fg:w="21"/><text x="32.2783%" y="367.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::constraints::TypeVariable as core::cmp::Ord&gt;::cmp (15 samples, 0.01%)</title><rect x="32.0621%" y="357" width="0.0106%" height="15" fill="rgb(241,28,37)" fg:x="45509" fg:w="15"/><text x="32.3121%" y="367.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (71 samples, 0.05%)</title><rect x="32.0431%" y="373" width="0.0500%" height="15" fill="rgb(233,93,10)" fg:x="45482" fg:w="71"/><text x="32.2931%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (28 samples, 0.02%)</title><rect x="32.0734%" y="357" width="0.0197%" height="15" fill="rgb(225,113,19)" fg:x="45525" fg:w="28"/><text x="32.3234%" y="367.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::get_or_insert_nd (154 samples, 0.11%)</title><rect x="32.0086%" y="389" width="0.1085%" height="15" fill="rgb(241,2,18)" fg:x="45433" fg:w="154"/><text x="32.2586%" y="399.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::insert_edge (163 samples, 0.11%)</title><rect x="32.0051%" y="405" width="0.1148%" height="15" fill="rgb(228,207,21)" fg:x="45428" fg:w="163"/><text x="32.2551%" y="415.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::sub_type_edge (20 samples, 0.01%)</title><rect x="32.1213%" y="357" width="0.0141%" height="15" fill="rgb(213,211,35)" fg:x="45593" fg:w="20"/><text x="32.3713%" y="367.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 0.02%)</title><rect x="32.1206%" y="373" width="0.0155%" height="15" fill="rgb(209,83,10)" fg:x="45592" fg:w="22"/><text x="32.3706%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 0.02%)</title><rect x="32.1199%" y="389" width="0.0190%" height="15" fill="rgb(209,164,1)" fg:x="45591" fg:w="27"/><text x="32.3699%" y="399.50"></text></g><g><title>binary_to_types`core::iter::adapters::try_process (28 samples, 0.02%)</title><rect x="32.1199%" y="405" width="0.0197%" height="15" fill="rgb(213,184,43)" fg:x="45591" fg:w="28"/><text x="32.3699%" y="415.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::new (605 samples, 0.43%)</title><rect x="31.7416%" y="421" width="0.4262%" height="15" fill="rgb(231,61,34)" fg:x="45054" fg:w="605"/><text x="31.9916%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.01%)</title><rect x="32.1565%" y="405" width="0.0113%" height="15" fill="rgb(235,75,3)" fg:x="45643" fg:w="16"/><text x="32.4065%" y="415.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::VHat as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="32.2037%" y="373" width="0.0113%" height="15" fill="rgb(220,106,47)" fg:x="45710" fg:w="16"/><text x="32.4537%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (20 samples, 0.01%)</title><rect x="32.2200%" y="357" width="0.0141%" height="15" fill="rgb(210,196,33)" fg:x="45733" fg:w="20"/><text x="32.4700%" y="367.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (28 samples, 0.02%)</title><rect x="32.2150%" y="373" width="0.0197%" height="15" fill="rgb(229,154,42)" fg:x="45726" fg:w="28"/><text x="32.4650%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (63 samples, 0.04%)</title><rect x="32.2347%" y="373" width="0.0444%" height="15" fill="rgb(228,114,26)" fg:x="45754" fg:w="63"/><text x="32.4847%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (21 samples, 0.01%)</title><rect x="32.2643%" y="357" width="0.0148%" height="15" fill="rgb(208,144,1)" fg:x="45796" fg:w="21"/><text x="32.5143%" y="367.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::add_cant_push_node (120 samples, 0.08%)</title><rect x="32.2016%" y="389" width="0.0845%" height="15" fill="rgb(239,112,37)" fg:x="45707" fg:w="120"/><text x="32.4516%" y="399.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::intersect_with_pop_push (175 samples, 0.12%)</title><rect x="32.1763%" y="405" width="0.1233%" height="15" fill="rgb(210,96,50)" fg:x="45671" fg:w="175"/><text x="32.4263%" y="415.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::remove_unreachable (39 samples, 0.03%)</title><rect x="32.2996%" y="405" width="0.0275%" height="15" fill="rgb(222,178,2)" fg:x="45846" fg:w="39"/><text x="32.5496%" y="415.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::FiniteState as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="32.4320%" y="293" width="0.0155%" height="15" fill="rgb(226,74,18)" fg:x="46034" fg:w="22"/><text x="32.6820%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.01%)</title><rect x="32.4475%" y="293" width="0.0106%" height="15" fill="rgb(225,67,54)" fg:x="46056" fg:w="15"/><text x="32.6975%" y="303.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (57 samples, 0.04%)</title><rect x="32.4193%" y="309" width="0.0402%" height="15" fill="rgb(251,92,32)" fg:x="46016" fg:w="57"/><text x="32.6693%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.01%)</title><rect x="32.4736%" y="261" width="0.0113%" height="15" fill="rgb(228,149,22)" fg:x="46093" fg:w="16"/><text x="32.7236%" y="271.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="32.4729%" y="277" width="0.0127%" height="15" fill="rgb(243,54,13)" fg:x="46092" fg:w="18"/><text x="32.7229%" y="287.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::EdgeDefinition as core::clone::Clone&gt;::clone (51 samples, 0.04%)</title><rect x="32.4609%" y="309" width="0.0359%" height="15" fill="rgb(243,180,28)" fg:x="46075" fg:w="51"/><text x="32.7109%" y="319.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::FiniteState as core::clone::Clone&gt;::clone (46 samples, 0.03%)</title><rect x="32.4644%" y="293" width="0.0324%" height="15" fill="rgb(208,167,24)" fg:x="46080" fg:w="46"/><text x="32.7144%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.01%)</title><rect x="32.5025%" y="309" width="0.0134%" height="15" fill="rgb(245,73,45)" fg:x="46134" fg:w="19"/><text x="32.7525%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.01%)</title><rect x="32.5039%" y="293" width="0.0120%" height="15" fill="rgb(237,203,48)" fg:x="46136" fg:w="17"/><text x="32.7539%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (17 samples, 0.01%)</title><rect x="32.5039%" y="277" width="0.0120%" height="15" fill="rgb(211,197,16)" fg:x="46136" fg:w="17"/><text x="32.7539%" y="287.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (151 samples, 0.11%)</title><rect x="32.4102%" y="325" width="0.1064%" height="15" fill="rgb(243,99,51)" fg:x="46003" fg:w="151"/><text x="32.6602%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.02%)</title><rect x="32.5398%" y="277" width="0.0197%" height="15" fill="rgb(215,123,29)" fg:x="46187" fg:w="28"/><text x="32.7898%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.02%)</title><rect x="32.5440%" y="261" width="0.0155%" height="15" fill="rgb(239,186,37)" fg:x="46193" fg:w="22"/><text x="32.7940%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.01%)</title><rect x="32.5469%" y="245" width="0.0127%" height="15" fill="rgb(252,136,39)" fg:x="46197" fg:w="18"/><text x="32.7969%" y="255.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (33 samples, 0.02%)</title><rect x="32.5391%" y="293" width="0.0232%" height="15" fill="rgb(223,213,32)" fg:x="46186" fg:w="33"/><text x="32.7891%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.01%)</title><rect x="32.5708%" y="277" width="0.0120%" height="15" fill="rgb(233,115,5)" fg:x="46231" fg:w="17"/><text x="32.8208%" y="287.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (30 samples, 0.02%)</title><rect x="32.5624%" y="293" width="0.0211%" height="15" fill="rgb(207,226,44)" fg:x="46219" fg:w="30"/><text x="32.8124%" y="303.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::EdgeDefinition as core::clone::Clone&gt;::clone (106 samples, 0.07%)</title><rect x="32.5173%" y="325" width="0.0747%" height="15" fill="rgb(208,126,0)" fg:x="46155" fg:w="106"/><text x="32.7673%" y="335.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::FiniteState as core::clone::Clone&gt;::clone (99 samples, 0.07%)</title><rect x="32.5222%" y="309" width="0.0697%" height="15" fill="rgb(244,66,21)" fg:x="46162" fg:w="99"/><text x="32.7722%" y="319.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::FiniteState as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="32.5919%" y="325" width="0.0176%" height="15" fill="rgb(222,97,12)" fg:x="46261" fg:w="25"/><text x="32.8419%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (301 samples, 0.21%)</title><rect x="32.4067%" y="341" width="0.2121%" height="15" fill="rgb(219,213,19)" fg:x="45998" fg:w="301"/><text x="32.6567%" y="351.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::EdgeDefinition as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="32.6187%" y="341" width="0.0148%" height="15" fill="rgb(252,169,30)" fg:x="46299" fg:w="21"/><text x="32.8687%" y="351.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::FiniteState as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="32.6229%" y="325" width="0.0106%" height="15" fill="rgb(206,32,51)" fg:x="46305" fg:w="15"/><text x="32.8729%" y="335.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::constraint_graph::FiniteState as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="32.6335%" y="341" width="0.0162%" height="15" fill="rgb(250,172,42)" fg:x="46320" fg:w="23"/><text x="32.8835%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (357 samples, 0.25%)</title><rect x="32.4045%" y="357" width="0.2515%" height="15" fill="rgb(209,34,43)" fg:x="45995" fg:w="357"/><text x="32.6545%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (372 samples, 0.26%)</title><rect x="32.3982%" y="373" width="0.2621%" height="15" fill="rgb(223,11,35)" fg:x="45986" fg:w="372"/><text x="32.6482%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::cmp::PartialEq&gt;::eq (22 samples, 0.02%)</title><rect x="32.6603%" y="373" width="0.0155%" height="15" fill="rgb(251,219,26)" fg:x="46358" fg:w="22"/><text x="32.9103%" y="383.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::constraint_graph::FiniteState&gt; (17 samples, 0.01%)</title><rect x="32.6927%" y="325" width="0.0120%" height="15" fill="rgb(231,119,3)" fg:x="46404" fg:w="17"/><text x="32.9427%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_small (22 samples, 0.02%)</title><rect x="32.7138%" y="325" width="0.0155%" height="15" fill="rgb(216,97,11)" fg:x="46434" fg:w="22"/><text x="32.9638%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.05%)</title><rect x="32.6892%" y="341" width="0.0465%" height="15" fill="rgb(223,59,9)" fg:x="46399" fg:w="66"/><text x="32.9392%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free_small (19 samples, 0.01%)</title><rect x="32.7498%" y="341" width="0.0134%" height="15" fill="rgb(233,93,31)" fg:x="46485" fg:w="19"/><text x="32.9998%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (122 samples, 0.09%)</title><rect x="32.6800%" y="357" width="0.0860%" height="15" fill="rgb(239,81,33)" fg:x="46386" fg:w="122"/><text x="32.9300%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.01%)</title><rect x="32.7751%" y="341" width="0.0113%" height="15" fill="rgb(213,120,34)" fg:x="46521" fg:w="16"/><text x="33.0251%" y="351.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::constraint_graph::FiniteState&gt; (24 samples, 0.02%)</title><rect x="32.7730%" y="357" width="0.0169%" height="15" fill="rgb(243,49,53)" fg:x="46518" fg:w="24"/><text x="33.0230%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (170 samples, 0.12%)</title><rect x="32.6758%" y="373" width="0.1198%" height="15" fill="rgb(247,216,33)" fg:x="46380" fg:w="170"/><text x="32.9258%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.01%)</title><rect x="32.7955%" y="373" width="0.0134%" height="15" fill="rgb(226,26,14)" fg:x="46550" fg:w="19"/><text x="33.0455%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (28 samples, 0.02%)</title><rect x="32.8343%" y="325" width="0.0197%" height="15" fill="rgb(215,49,53)" fg:x="46605" fg:w="28"/><text x="33.0843%" y="335.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::constraint_graph::FiniteState&gt; (59 samples, 0.04%)</title><rect x="32.8258%" y="341" width="0.0416%" height="15" fill="rgb(245,162,40)" fg:x="46593" fg:w="59"/><text x="33.0758%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.01%)</title><rect x="32.8688%" y="341" width="0.0106%" height="15" fill="rgb(229,68,17)" fg:x="46654" fg:w="15"/><text x="33.1188%" y="351.50"></text></g><g><title>binary_to_types`core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (96 samples, 0.07%)</title><rect x="32.8209%" y="357" width="0.0676%" height="15" fill="rgb(213,182,10)" fg:x="46586" fg:w="96"/><text x="33.0709%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (124 samples, 0.09%)</title><rect x="32.8089%" y="373" width="0.0874%" height="15" fill="rgb(245,125,30)" fg:x="46569" fg:w="124"/><text x="33.0589%" y="383.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (27 samples, 0.02%)</title><rect x="32.9026%" y="341" width="0.0190%" height="15" fill="rgb(232,202,2)" fg:x="46702" fg:w="27"/><text x="33.1526%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (52 samples, 0.04%)</title><rect x="32.8977%" y="357" width="0.0366%" height="15" fill="rgb(237,140,51)" fg:x="46695" fg:w="52"/><text x="33.1477%" y="367.50"></text></g><g><title>binary_to_types`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (23 samples, 0.02%)</title><rect x="32.9350%" y="357" width="0.0162%" height="15" fill="rgb(236,157,25)" fg:x="46748" fg:w="23"/><text x="33.1850%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (94 samples, 0.07%)</title><rect x="32.8963%" y="373" width="0.0662%" height="15" fill="rgb(219,209,0)" fg:x="46693" fg:w="94"/><text x="33.1463%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.02%)</title><rect x="32.9625%" y="357" width="0.0190%" height="15" fill="rgb(240,116,54)" fg:x="46787" fg:w="27"/><text x="33.2125%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.02%)</title><rect x="32.9653%" y="341" width="0.0162%" height="15" fill="rgb(216,10,36)" fg:x="46791" fg:w="23"/><text x="33.2153%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.01%)</title><rect x="32.9696%" y="325" width="0.0120%" height="15" fill="rgb(222,72,44)" fg:x="46797" fg:w="17"/><text x="33.2196%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (28 samples, 0.02%)</title><rect x="32.9625%" y="373" width="0.0197%" height="15" fill="rgb(232,159,9)" fg:x="46787" fg:w="28"/><text x="33.2125%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.02%)</title><rect x="32.9907%" y="357" width="0.0169%" height="15" fill="rgb(210,39,32)" fg:x="46827" fg:w="24"/><text x="33.2407%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (37 samples, 0.03%)</title><rect x="32.9822%" y="373" width="0.0261%" height="15" fill="rgb(216,194,45)" fg:x="46815" fg:w="37"/><text x="33.2322%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (41 samples, 0.03%)</title><rect x="33.0449%" y="357" width="0.0289%" height="15" fill="rgb(218,18,35)" fg:x="46904" fg:w="41"/><text x="33.2949%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.02%)</title><rect x="33.0583%" y="341" width="0.0155%" height="15" fill="rgb(207,83,51)" fg:x="46923" fg:w="22"/><text x="33.3083%" y="351.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::constraints::TypeVariable as core::cmp::Ord&gt;::cmp (30 samples, 0.02%)</title><rect x="33.1330%" y="341" width="0.0211%" height="15" fill="rgb(225,63,43)" fg:x="47029" fg:w="30"/><text x="33.3830%" y="351.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (227 samples, 0.16%)</title><rect x="33.0738%" y="357" width="0.1599%" height="15" fill="rgb(207,57,36)" fg:x="46945" fg:w="227"/><text x="33.3238%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (105 samples, 0.07%)</title><rect x="33.1598%" y="341" width="0.0740%" height="15" fill="rgb(216,99,33)" fg:x="47067" fg:w="105"/><text x="33.4098%" y="351.50"></text></g><g><title>binary_to_types`core::slice::cmp::_&lt;impl core::cmp::PartialOrd for [T]&gt;::partial_cmp (27 samples, 0.02%)</title><rect x="33.2338%" y="357" width="0.0190%" height="15" fill="rgb(225,42,16)" fg:x="47172" fg:w="27"/><text x="33.4838%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.02%)</title><rect x="33.2528%" y="357" width="0.0183%" height="15" fill="rgb(220,201,45)" fg:x="47199" fg:w="26"/><text x="33.5028%" y="367.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (360 samples, 0.25%)</title><rect x="33.0294%" y="373" width="0.2536%" height="15" fill="rgb(225,33,4)" fg:x="46882" fg:w="360"/><text x="33.2794%" y="383.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::constraints::TypeVariable as core::cmp::Ord&gt;::cmp (47 samples, 0.03%)</title><rect x="33.3993%" y="357" width="0.0331%" height="15" fill="rgb(224,33,50)" fg:x="47407" fg:w="47"/><text x="33.6493%" y="367.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (340 samples, 0.24%)</title><rect x="33.3021%" y="373" width="0.2395%" height="15" fill="rgb(246,198,51)" fg:x="47269" fg:w="340"/><text x="33.5521%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (143 samples, 0.10%)</title><rect x="33.4409%" y="357" width="0.1007%" height="15" fill="rgb(205,22,4)" fg:x="47466" fg:w="143"/><text x="33.6909%" y="367.50"></text></g><g><title>binary_to_types`core::slice::cmp::_&lt;impl core::cmp::PartialOrd for [T]&gt;::partial_cmp (22 samples, 0.02%)</title><rect x="33.5459%" y="373" width="0.0155%" height="15" fill="rgb(206,3,8)" fg:x="47615" fg:w="22"/><text x="33.7959%" y="383.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::get_saturation_edges (1,787 samples, 1.26%)</title><rect x="32.3425%" y="389" width="1.2590%" height="15" fill="rgb(251,23,15)" fg:x="45907" fg:w="1787"/><text x="32.5925%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.01%)</title><rect x="33.5888%" y="373" width="0.0127%" height="15" fill="rgb(252,88,28)" fg:x="47676" fg:w="18"/><text x="33.8388%" y="383.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::saturate (1,827 samples, 1.29%)</title><rect x="32.3270%" y="405" width="1.2872%" height="15" fill="rgb(212,127,14)" fg:x="45885" fg:w="1827"/><text x="32.5770%" y="415.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::simplify_graph (2,065 samples, 1.45%)</title><rect x="32.1678%" y="421" width="1.4548%" height="15" fill="rgb(247,145,37)" fg:x="45659" fg:w="2065"/><text x="32.4178%" y="431.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (24 samples, 0.02%)</title><rect x="33.6269%" y="357" width="0.0169%" height="15" fill="rgb(209,117,53)" fg:x="47730" fg:w="24"/><text x="33.8769%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (38 samples, 0.03%)</title><rect x="33.6227%" y="389" width="0.0268%" height="15" fill="rgb(212,90,42)" fg:x="47724" fg:w="38"/><text x="33.8727%" y="399.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.03%)</title><rect x="33.6227%" y="373" width="0.0268%" height="15" fill="rgb(218,164,37)" fg:x="47724" fg:w="38"/><text x="33.8727%" y="383.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::constraint_graph::FSA::walk_constraints (41 samples, 0.03%)</title><rect x="33.6227%" y="421" width="0.0289%" height="15" fill="rgb(246,65,34)" fg:x="47724" fg:w="41"/><text x="33.8727%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (41 samples, 0.03%)</title><rect x="33.6227%" y="405" width="0.0289%" height="15" fill="rgb(231,100,33)" fg:x="47724" fg:w="41"/><text x="33.8727%" y="415.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::scc_constraint_generation::insert_missed_formals (21 samples, 0.01%)</title><rect x="33.6515%" y="421" width="0.0148%" height="15" fill="rgb(228,126,14)" fg:x="47765" fg:w="21"/><text x="33.9015%" y="431.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="33.6840%" y="405" width="0.0120%" height="15" fill="rgb(215,173,21)" fg:x="47811" fg:w="17"/><text x="33.9340%" y="415.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33 samples, 0.02%)</title><rect x="33.7142%" y="389" width="0.0232%" height="15" fill="rgb(210,6,40)" fg:x="47854" fg:w="33"/><text x="33.9642%" y="399.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.01%)</title><rect x="33.7424%" y="373" width="0.0127%" height="15" fill="rgb(212,48,18)" fg:x="47894" fg:w="18"/><text x="33.9924%" y="383.50"></text></g><g><title>binary_to_types`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (19 samples, 0.01%)</title><rect x="33.7424%" y="389" width="0.0134%" height="15" fill="rgb(230,214,11)" fg:x="47894" fg:w="19"/><text x="33.9924%" y="399.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::quoetient_graph (93 samples, 0.07%)</title><rect x="33.6980%" y="405" width="0.0655%" height="15" fill="rgb(254,105,39)" fg:x="47831" fg:w="93"/><text x="33.9480%" y="415.50"></text></g><g><title>binary_to_types`&lt;itertools::adaptors::Product&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39 samples, 0.03%)</title><rect x="33.7981%" y="373" width="0.0275%" height="15" fill="rgb(245,158,5)" fg:x="47973" fg:w="39"/><text x="34.0481%" y="383.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::generate_quotient_groups_for_initial_set (67 samples, 0.05%)</title><rect x="33.7826%" y="389" width="0.0472%" height="15" fill="rgb(249,208,11)" fg:x="47951" fg:w="67"/><text x="34.0326%" y="399.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::generate_quotient_groups (85 samples, 0.06%)</title><rect x="33.7734%" y="405" width="0.0599%" height="15" fill="rgb(210,39,28)" fg:x="47938" fg:w="85"/><text x="34.0234%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="33.8439%" y="373" width="0.0113%" height="15" fill="rgb(211,56,53)" fg:x="48038" fg:w="16"/><text x="34.0939%" y="383.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="33.8439%" y="389" width="0.0155%" height="15" fill="rgb(226,201,30)" fg:x="48038" fg:w="22"/><text x="34.0939%" y="399.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement as alga::general::lattice::JoinSemilattice&gt;::join (20 samples, 0.01%)</title><rect x="33.8692%" y="373" width="0.0141%" height="15" fill="rgb(239,101,34)" fg:x="48074" fg:w="20"/><text x="34.1192%" y="383.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement as alga::general::lattice::MeetSemilattice&gt;::meet (21 samples, 0.01%)</title><rect x="33.8833%" y="373" width="0.0148%" height="15" fill="rgb(226,209,5)" fg:x="48094" fg:w="21"/><text x="34.1333%" y="383.50"></text></g><g><title>binary_to_types`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 0.01%)</title><rect x="33.9115%" y="373" width="0.0113%" height="15" fill="rgb(250,105,47)" fg:x="48134" fg:w="16"/><text x="34.1615%" y="383.50"></text></g><g><title>binary_to_types`binary_type_inference::graph_algos::mapping_graph::MappingGraph&lt;W,N,E&gt;::add_node (99 samples, 0.07%)</title><rect x="33.8608%" y="389" width="0.0697%" height="15" fill="rgb(230,72,3)" fg:x="48062" fg:w="99"/><text x="34.1108%" y="399.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::insert_dtv (147 samples, 0.10%)</title><rect x="33.8333%" y="405" width="0.1036%" height="15" fill="rgb(232,218,39)" fg:x="48023" fg:w="147"/><text x="34.0833%" y="415.50"></text></g><g><title>binary_to_types`binary_type_inference::solver::type_sketch::SketchBuilder&lt;U,T,V&gt;::build_and_label_constraints (391 samples, 0.28%)</title><rect x="33.6734%" y="421" width="0.2755%" height="15" fill="rgb(248,166,6)" fg:x="47796" fg:w="391"/><text x="33.9234%" y="431.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::constraint_graph::FSA&gt; (15 samples, 0.01%)</title><rect x="33.9489%" y="421" width="0.0106%" height="15" fill="rgb(247,89,20)" fg:x="48187" fg:w="15"/><text x="34.1989%" y="431.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::type_sketch::SketchGraph&lt;binary_type_inference::solver::type_sketch::LatticeBounds&lt;binary_type_inference::solver::type_lattice::CustomLatticeElement&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="33.9594%" y="421" width="0.0113%" height="15" fill="rgb(248,130,54)" fg:x="48202" fg:w="16"/><text x="34.2094%" y="431.50"></text></g><g><title>binary_to_types`core::iter::adapters::try_process (22,685 samples, 15.98%)</title><rect x="18.0027%" y="485" width="15.9821%" height="15" fill="rgb(234,196,4)" fg:x="25553" fg:w="22685"/><text x="18.2527%" y="495.50">binary_to_types`core::ite..</text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22,685 samples, 15.98%)</title><rect x="18.0027%" y="469" width="15.9821%" height="15" fill="rgb(250,143,31)" fg:x="25553" fg:w="22685"/><text x="18.2527%" y="479.50">binary_to_types`&lt;alloc::v..</text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22,685 samples, 15.98%)</title><rect x="18.0027%" y="453" width="15.9821%" height="15" fill="rgb(211,110,34)" fg:x="25553" fg:w="22685"/><text x="18.2527%" y="463.50">binary_to_types`&lt;core::it..</text></g><g><title>binary_to_types`binary_type_inference::solver::scc_constraint_generation::Context&lt;R,P,S,C,T,U&gt;::simplify_scc (22,434 samples, 15.81%)</title><rect x="18.1795%" y="437" width="15.8053%" height="15" fill="rgb(215,124,48)" fg:x="25804" fg:w="22434"/><text x="18.4295%" y="447.50">binary_to_types`binary_t..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.01%)</title><rect x="33.9735%" y="421" width="0.0113%" height="15" fill="rgb(216,46,13)" fg:x="48222" fg:w="16"/><text x="34.2235%" y="431.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (23 samples, 0.02%)</title><rect x="34.0108%" y="421" width="0.0162%" height="15" fill="rgb(205,184,25)" fg:x="48275" fg:w="23"/><text x="34.2608%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 0.03%)</title><rect x="34.0271%" y="421" width="0.0254%" height="15" fill="rgb(228,1,10)" fg:x="48298" fg:w="36"/><text x="34.2771%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (26 samples, 0.02%)</title><rect x="34.0341%" y="405" width="0.0183%" height="15" fill="rgb(213,116,27)" fg:x="48308" fg:w="26"/><text x="34.2841%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (22 samples, 0.02%)</title><rect x="34.0369%" y="389" width="0.0155%" height="15" fill="rgb(241,95,50)" fg:x="48312" fg:w="22"/><text x="34.2869%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (62 samples, 0.04%)</title><rect x="34.1271%" y="389" width="0.0437%" height="15" fill="rgb(238,48,32)" fg:x="48440" fg:w="62"/><text x="34.3771%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (18 samples, 0.01%)</title><rect x="34.1835%" y="389" width="0.0127%" height="15" fill="rgb(235,113,49)" fg:x="48520" fg:w="18"/><text x="34.4335%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (210 samples, 0.15%)</title><rect x="34.0559%" y="405" width="0.1479%" height="15" fill="rgb(205,127,43)" fg:x="48339" fg:w="210"/><text x="34.3059%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (217 samples, 0.15%)</title><rect x="34.0524%" y="421" width="0.1529%" height="15" fill="rgb(250,162,2)" fg:x="48334" fg:w="217"/><text x="34.3024%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (305 samples, 0.21%)</title><rect x="34.0052%" y="437" width="0.2149%" height="15" fill="rgb(220,13,41)" fg:x="48267" fg:w="305"/><text x="34.2552%" y="447.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (93 samples, 0.07%)</title><rect x="34.2208%" y="437" width="0.0655%" height="15" fill="rgb(249,221,25)" fg:x="48573" fg:w="93"/><text x="34.4708%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (70 samples, 0.05%)</title><rect x="34.2370%" y="421" width="0.0493%" height="15" fill="rgb(215,208,19)" fg:x="48596" fg:w="70"/><text x="34.4870%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (70 samples, 0.05%)</title><rect x="34.2370%" y="405" width="0.0493%" height="15" fill="rgb(236,175,2)" fg:x="48596" fg:w="70"/><text x="34.4870%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (59 samples, 0.04%)</title><rect x="34.2448%" y="389" width="0.0416%" height="15" fill="rgb(241,52,2)" fg:x="48607" fg:w="59"/><text x="34.4948%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`madvise (58 samples, 0.04%)</title><rect x="34.2455%" y="373" width="0.0409%" height="15" fill="rgb(248,140,14)" fg:x="48608" fg:w="58"/><text x="34.4955%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.01%)</title><rect x="34.2870%" y="437" width="0.0127%" height="15" fill="rgb(253,22,42)" fg:x="48667" fg:w="18"/><text x="34.5370%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (49 samples, 0.03%)</title><rect x="34.2997%" y="437" width="0.0345%" height="15" fill="rgb(234,61,47)" fg:x="48685" fg:w="49"/><text x="34.5497%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (47 samples, 0.03%)</title><rect x="34.3011%" y="421" width="0.0331%" height="15" fill="rgb(208,226,15)" fg:x="48687" fg:w="47"/><text x="34.5511%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (29 samples, 0.02%)</title><rect x="34.3138%" y="405" width="0.0204%" height="15" fill="rgb(217,221,4)" fg:x="48705" fg:w="29"/><text x="34.5638%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (28 samples, 0.02%)</title><rect x="34.3145%" y="389" width="0.0197%" height="15" fill="rgb(212,174,34)" fg:x="48706" fg:w="28"/><text x="34.5645%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (506 samples, 0.36%)</title><rect x="33.9869%" y="453" width="0.3565%" height="15" fill="rgb(253,83,4)" fg:x="48241" fg:w="506"/><text x="34.2369%" y="463.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::node_context::points_to::PointerState&gt; (26 samples, 0.02%)</title><rect x="34.3441%" y="453" width="0.0183%" height="15" fill="rgb(250,195,49)" fg:x="48748" fg:w="26"/><text x="34.5941%" y="463.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (21 samples, 0.01%)</title><rect x="34.3476%" y="437" width="0.0148%" height="15" fill="rgb(241,192,25)" fg:x="48753" fg:w="21"/><text x="34.5976%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="34.3476%" y="421" width="0.0148%" height="15" fill="rgb(208,124,10)" fg:x="48753" fg:w="21"/><text x="34.5976%" y="431.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::intermediate_representation::def::Def&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="34.3638%" y="373" width="0.0134%" height="15" fill="rgb(222,33,0)" fg:x="48776" fg:w="19"/><text x="34.6138%" y="383.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::project::Project&gt; (47 samples, 0.03%)</title><rect x="34.3624%" y="453" width="0.0331%" height="15" fill="rgb(234,209,28)" fg:x="48774" fg:w="47"/><text x="34.6124%" y="463.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::program::Program&gt; (47 samples, 0.03%)</title><rect x="34.3624%" y="437" width="0.0331%" height="15" fill="rgb(224,11,23)" fg:x="48774" fg:w="47"/><text x="34.6124%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.03%)</title><rect x="34.3624%" y="421" width="0.0331%" height="15" fill="rgb(232,99,1)" fg:x="48774" fg:w="47"/><text x="34.6124%" y="431.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::sub::Sub&gt; (47 samples, 0.03%)</title><rect x="34.3624%" y="405" width="0.0331%" height="15" fill="rgb(237,95,45)" fg:x="48774" fg:w="47"/><text x="34.6124%" y="415.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::intermediate_representation::blk::Blk&gt;&gt; (46 samples, 0.03%)</title><rect x="34.3631%" y="389" width="0.0324%" height="15" fill="rgb(208,109,11)" fg:x="48775" fg:w="46"/><text x="34.6131%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.01%)</title><rect x="34.3814%" y="373" width="0.0141%" height="15" fill="rgb(216,190,48)" fg:x="48801" fg:w="20"/><text x="34.6314%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (20 samples, 0.01%)</title><rect x="34.3814%" y="357" width="0.0141%" height="15" fill="rgb(251,171,36)" fg:x="48801" fg:w="20"/><text x="34.6314%" y="367.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;(petgraph::graph_impl::NodeIndex,binary_type_inference::constraint_generation::NodeContext&lt;binary_type_inference::node_context::register_map::RegisterContext,binary_type_inference::node_context::points_to::PointsToContext,binary_type_inference::node_context::subproc_loc::ProcedureContext,binary_type_inference::node_context::GhidraConstantResolver&gt;)&gt; (588 samples, 0.41%)</title><rect x="33.9862%" y="469" width="0.4143%" height="15" fill="rgb(230,62,22)" fg:x="48240" fg:w="588"/><text x="34.2362%" y="479.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::solver::scc_constraint_generation::Context&lt;binary_type_inference::node_context::register_map::RegisterContext,binary_type_inference::node_context::points_to::PointsToContext,binary_type_inference::node_context::subproc_loc::ProcedureContext,binary_type_inference::node_context::GhidraConstantResolver,binary_type_inference::solver::type_lattice::EnumeratedNamedLattice,binary_type_inference::solver::type_lattice::CustomLatticeElement&gt;&gt; (590 samples, 0.42%)</title><rect x="33.9855%" y="485" width="0.4157%" height="15" fill="rgb(225,114,35)" fg:x="48239" fg:w="590"/><text x="34.2355%" y="495.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="34.4033%" y="405" width="0.0155%" height="15" fill="rgb(215,118,42)" fg:x="48832" fg:w="22"/><text x="34.6533%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="34.4026%" y="421" width="0.0197%" height="15" fill="rgb(243,119,21)" fg:x="48831" fg:w="28"/><text x="34.6526%" y="431.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="34.4012%" y="469" width="0.0218%" height="15" fill="rgb(252,177,53)" fg:x="48829" fg:w="31"/><text x="34.6512%" y="479.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::analysis::function_signature::state::State&gt; (29 samples, 0.02%)</title><rect x="34.4026%" y="453" width="0.0204%" height="15" fill="rgb(237,209,29)" fg:x="48831" fg:w="29"/><text x="34.6526%" y="463.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (29 samples, 0.02%)</title><rect x="34.4026%" y="437" width="0.0204%" height="15" fill="rgb(212,65,23)" fg:x="48831" fg:w="29"/><text x="34.6526%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (30 samples, 0.02%)</title><rect x="34.4448%" y="389" width="0.0211%" height="15" fill="rgb(230,222,46)" fg:x="48891" fg:w="30"/><text x="34.6948%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (39 samples, 0.03%)</title><rect x="34.4441%" y="405" width="0.0275%" height="15" fill="rgb(215,135,32)" fg:x="48890" fg:w="39"/><text x="34.6941%" y="415.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as core::ops::deref::DerefMut&gt;::deref_mut (40 samples, 0.03%)</title><rect x="34.4441%" y="421" width="0.0282%" height="15" fill="rgb(246,101,22)" fg:x="48890" fg:w="40"/><text x="34.6941%" y="431.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::function_signature::state::State::set_register (46 samples, 0.03%)</title><rect x="34.4434%" y="437" width="0.0324%" height="15" fill="rgb(206,107,13)" fg:x="48889" fg:w="46"/><text x="34.6934%" y="447.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::function_signature::context::Context as cwe_checker_lib::analysis::forward_interprocedural_fixpoint::Context&gt;::update_def (68 samples, 0.05%)</title><rect x="34.4286%" y="453" width="0.0479%" height="15" fill="rgb(250,100,44)" fg:x="48868" fg:w="68"/><text x="34.6786%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="34.4829%" y="421" width="0.0106%" height="15" fill="rgb(231,147,38)" fg:x="48945" fg:w="15"/><text x="34.7329%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="34.4822%" y="437" width="0.0211%" height="15" fill="rgb(229,8,40)" fg:x="48944" fg:w="30"/><text x="34.7322%" y="447.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (32 samples, 0.02%)</title><rect x="34.4822%" y="453" width="0.0225%" height="15" fill="rgb(221,135,30)" fg:x="48944" fg:w="32"/><text x="34.7322%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::compute_with_max_steps (116 samples, 0.08%)</title><rect x="34.4244%" y="469" width="0.0817%" height="15" fill="rgb(249,193,18)" fg:x="48862" fg:w="116"/><text x="34.6744%" y="479.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::function_signature::compute_function_signatures (180 samples, 0.13%)</title><rect x="34.4012%" y="485" width="0.1268%" height="15" fill="rgb(209,133,39)" fg:x="48829" fg:w="180"/><text x="34.6512%" y="495.50"></text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::get_simplified_constraints (46,983 samples, 33.10%)</title><rect x="1.4295%" y="501" width="33.1006%" height="15" fill="rgb(232,100,14)" fg:x="2029" fg:w="46983"/><text x="1.6795%" y="511.50">binary_to_types`binary_type_inference::inference_job::..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (65 samples, 0.05%)</title><rect x="34.6189%" y="389" width="0.0458%" height="15" fill="rgb(224,185,1)" fg:x="49138" fg:w="65"/><text x="34.8689%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (64 samples, 0.05%)</title><rect x="34.6196%" y="373" width="0.0451%" height="15" fill="rgb(223,139,8)" fg:x="49139" fg:w="64"/><text x="34.8696%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (55 samples, 0.04%)</title><rect x="34.6259%" y="357" width="0.0387%" height="15" fill="rgb(232,213,38)" fg:x="49148" fg:w="55"/><text x="34.8759%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (68 samples, 0.05%)</title><rect x="34.6174%" y="405" width="0.0479%" height="15" fill="rgb(207,94,22)" fg:x="49136" fg:w="68"/><text x="34.8674%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (122 samples, 0.09%)</title><rect x="34.5801%" y="421" width="0.0860%" height="15" fill="rgb(219,183,54)" fg:x="49083" fg:w="122"/><text x="34.8301%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.01%)</title><rect x="34.6661%" y="405" width="0.0127%" height="15" fill="rgb(216,185,54)" fg:x="49205" fg:w="18"/><text x="34.9161%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="34.6661%" y="421" width="0.0134%" height="15" fill="rgb(254,217,39)" fg:x="49205" fg:w="19"/><text x="34.9161%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.01%)</title><rect x="34.6816%" y="421" width="0.0141%" height="15" fill="rgb(240,178,23)" fg:x="49227" fg:w="20"/><text x="34.9316%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (189 samples, 0.13%)</title><rect x="34.5660%" y="437" width="0.1332%" height="15" fill="rgb(218,11,47)" fg:x="49063" fg:w="189"/><text x="34.8160%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (218 samples, 0.15%)</title><rect x="34.5498%" y="453" width="0.1536%" height="15" fill="rgb(218,51,51)" fg:x="49040" fg:w="218"/><text x="34.7998%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (243 samples, 0.17%)</title><rect x="34.5336%" y="469" width="0.1712%" height="15" fill="rgb(238,126,27)" fg:x="49017" fg:w="243"/><text x="34.7836%" y="479.50"></text></g><g><title>binary_to_types`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (246 samples, 0.17%)</title><rect x="34.5329%" y="485" width="0.1733%" height="15" fill="rgb(249,202,22)" fg:x="49016" fg:w="246"/><text x="34.7829%" y="495.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (48 samples, 0.03%)</title><rect x="34.7583%" y="437" width="0.0338%" height="15" fill="rgb(254,195,49)" fg:x="49336" fg:w="48"/><text x="35.0083%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (63 samples, 0.04%)</title><rect x="34.7922%" y="437" width="0.0444%" height="15" fill="rgb(208,123,14)" fg:x="49384" fg:w="63"/><text x="35.0422%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (34 samples, 0.02%)</title><rect x="34.8126%" y="421" width="0.0240%" height="15" fill="rgb(224,200,8)" fg:x="49413" fg:w="34"/><text x="35.0626%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (26 samples, 0.02%)</title><rect x="34.8182%" y="405" width="0.0183%" height="15" fill="rgb(217,61,36)" fg:x="49421" fg:w="26"/><text x="35.0682%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (190 samples, 0.13%)</title><rect x="34.9528%" y="405" width="0.1339%" height="15" fill="rgb(206,35,45)" fg:x="49612" fg:w="190"/><text x="35.2028%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (19 samples, 0.01%)</title><rect x="35.0867%" y="405" width="0.0134%" height="15" fill="rgb(217,65,33)" fg:x="49802" fg:w="19"/><text x="35.3367%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (37 samples, 0.03%)</title><rect x="35.1099%" y="405" width="0.0261%" height="15" fill="rgb(222,158,48)" fg:x="49835" fg:w="37"/><text x="35.3599%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.01%)</title><rect x="35.1233%" y="389" width="0.0127%" height="15" fill="rgb(254,2,54)" fg:x="49854" fg:w="18"/><text x="35.3733%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (409 samples, 0.29%)</title><rect x="34.8612%" y="421" width="0.2881%" height="15" fill="rgb(250,143,38)" fg:x="49482" fg:w="409"/><text x="35.1112%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (19 samples, 0.01%)</title><rect x="35.1360%" y="405" width="0.0134%" height="15" fill="rgb(248,25,0)" fg:x="49872" fg:w="19"/><text x="35.3860%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (447 samples, 0.31%)</title><rect x="34.8366%" y="437" width="0.3149%" height="15" fill="rgb(206,152,27)" fg:x="49447" fg:w="447"/><text x="35.0866%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (624 samples, 0.44%)</title><rect x="34.7414%" y="453" width="0.4396%" height="15" fill="rgb(240,77,30)" fg:x="49312" fg:w="624"/><text x="34.9914%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (64 samples, 0.05%)</title><rect x="35.2071%" y="437" width="0.0451%" height="15" fill="rgb(231,5,3)" fg:x="49973" fg:w="64"/><text x="35.4571%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (62 samples, 0.04%)</title><rect x="35.2085%" y="421" width="0.0437%" height="15" fill="rgb(207,226,32)" fg:x="49975" fg:w="62"/><text x="35.4585%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (42 samples, 0.03%)</title><rect x="35.2226%" y="405" width="0.0296%" height="15" fill="rgb(222,207,47)" fg:x="49995" fg:w="42"/><text x="35.4726%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (40 samples, 0.03%)</title><rect x="35.2240%" y="389" width="0.0282%" height="15" fill="rgb(229,115,45)" fg:x="49997" fg:w="40"/><text x="35.4740%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (100 samples, 0.07%)</title><rect x="35.1825%" y="453" width="0.0705%" height="15" fill="rgb(224,191,6)" fg:x="49938" fg:w="100"/><text x="35.4325%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 0.03%)</title><rect x="35.2564%" y="453" width="0.0254%" height="15" fill="rgb(230,227,24)" fg:x="50043" fg:w="36"/><text x="35.5064%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (16 samples, 0.01%)</title><rect x="35.2867%" y="421" width="0.0113%" height="15" fill="rgb(228,80,19)" fg:x="50086" fg:w="16"/><text x="35.5367%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (16 samples, 0.01%)</title><rect x="35.2867%" y="405" width="0.0113%" height="15" fill="rgb(247,229,0)" fg:x="50086" fg:w="16"/><text x="35.5367%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (74 samples, 0.05%)</title><rect x="35.2832%" y="437" width="0.0521%" height="15" fill="rgb(237,194,15)" fg:x="50081" fg:w="74"/><text x="35.5332%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (49 samples, 0.03%)</title><rect x="35.3008%" y="421" width="0.0345%" height="15" fill="rgb(219,203,20)" fg:x="50106" fg:w="49"/><text x="35.5508%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`madvise (49 samples, 0.03%)</title><rect x="35.3008%" y="405" width="0.0345%" height="15" fill="rgb(234,128,8)" fg:x="50106" fg:w="49"/><text x="35.5508%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (77 samples, 0.05%)</title><rect x="35.2818%" y="453" width="0.0542%" height="15" fill="rgb(248,202,8)" fg:x="50079" fg:w="77"/><text x="35.5318%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (919 samples, 0.65%)</title><rect x="34.7062%" y="469" width="0.6475%" height="15" fill="rgb(206,104,37)" fg:x="49262" fg:w="919"/><text x="34.9562%" y="479.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::intermediate_representation::def::Def&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="35.3565%" y="389" width="0.0134%" height="15" fill="rgb(223,8,27)" fg:x="50185" fg:w="19"/><text x="35.6065%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (22 samples, 0.02%)</title><rect x="35.3748%" y="389" width="0.0155%" height="15" fill="rgb(216,217,28)" fg:x="50211" fg:w="22"/><text x="35.6248%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.02%)</title><rect x="35.3748%" y="373" width="0.0155%" height="15" fill="rgb(249,199,1)" fg:x="50211" fg:w="22"/><text x="35.6248%" y="383.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::sub::Sub&gt; (49 samples, 0.03%)</title><rect x="35.3565%" y="421" width="0.0345%" height="15" fill="rgb(240,85,17)" fg:x="50185" fg:w="49"/><text x="35.6065%" y="431.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::intermediate_representation::blk::Blk&gt;&gt; (49 samples, 0.03%)</title><rect x="35.3565%" y="405" width="0.0345%" height="15" fill="rgb(206,108,45)" fg:x="50185" fg:w="49"/><text x="35.6065%" y="415.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::project::Project&gt; (52 samples, 0.04%)</title><rect x="35.3558%" y="469" width="0.0366%" height="15" fill="rgb(245,210,41)" fg:x="50184" fg:w="52"/><text x="35.6058%" y="479.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::program::Program&gt; (52 samples, 0.04%)</title><rect x="35.3558%" y="453" width="0.0366%" height="15" fill="rgb(206,13,37)" fg:x="50184" fg:w="52"/><text x="35.6058%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.04%)</title><rect x="35.3558%" y="437" width="0.0366%" height="15" fill="rgb(250,61,18)" fg:x="50184" fg:w="52"/><text x="35.6058%" y="447.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (985 samples, 0.69%)</title><rect x="34.7062%" y="485" width="0.6940%" height="15" fill="rgb(235,172,48)" fg:x="49262" fg:w="985"/><text x="34.9562%" y="495.50"></text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::graph_from_project (28 samples, 0.02%)</title><rect x="35.4037%" y="485" width="0.0197%" height="15" fill="rgb(249,201,17)" fg:x="50252" fg:w="28"/><text x="35.6537%" y="495.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::graph::get_program_cfg (27 samples, 0.02%)</title><rect x="35.4044%" y="469" width="0.0190%" height="15" fill="rgb(219,208,6)" fg:x="50253" fg:w="27"/><text x="35.6544%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (40 samples, 0.03%)</title><rect x="35.4262%" y="405" width="0.0282%" height="15" fill="rgb(248,31,23)" fg:x="50284" fg:w="40"/><text x="35.6762%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (43 samples, 0.03%)</title><rect x="35.4248%" y="437" width="0.0303%" height="15" fill="rgb(245,15,42)" fg:x="50282" fg:w="43"/><text x="35.6748%" y="447.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;T&gt; as core::clone::Clone&gt;::clone (42 samples, 0.03%)</title><rect x="35.4255%" y="421" width="0.0296%" height="15" fill="rgb(222,217,39)" fg:x="50283" fg:w="42"/><text x="35.6755%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (44 samples, 0.03%)</title><rect x="35.4248%" y="469" width="0.0310%" height="15" fill="rgb(210,219,27)" fg:x="50282" fg:w="44"/><text x="35.6748%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (44 samples, 0.03%)</title><rect x="35.4248%" y="453" width="0.0310%" height="15" fill="rgb(252,166,36)" fg:x="50282" fg:w="44"/><text x="35.6748%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (37 samples, 0.03%)</title><rect x="35.4629%" y="389" width="0.0261%" height="15" fill="rgb(245,132,34)" fg:x="50336" fg:w="37"/><text x="35.7129%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (42 samples, 0.03%)</title><rect x="35.4622%" y="405" width="0.0296%" height="15" fill="rgb(236,54,3)" fg:x="50335" fg:w="42"/><text x="35.7122%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (44 samples, 0.03%)</title><rect x="35.4615%" y="421" width="0.0310%" height="15" fill="rgb(241,173,43)" fg:x="50334" fg:w="44"/><text x="35.7115%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20 samples, 0.01%)</title><rect x="35.5066%" y="405" width="0.0141%" height="15" fill="rgb(215,190,9)" fg:x="50398" fg:w="20"/><text x="35.7566%" y="415.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::analysis::reaching_definitions::TermSet as cwe_checker_lib::abstract_domain::AbstractDomain&gt;::merge (46 samples, 0.03%)</title><rect x="35.5058%" y="421" width="0.0324%" height="15" fill="rgb(242,101,16)" fg:x="50397" fg:w="46"/><text x="35.7558%" y="431.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as cwe_checker_lib::abstract_domain::AbstractDomain&gt;::merge (137 samples, 0.10%)</title><rect x="35.4608%" y="437" width="0.0965%" height="15" fill="rgb(223,190,21)" fg:x="50333" fg:w="137"/><text x="35.7108%" y="447.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (40 samples, 0.03%)</title><rect x="35.5636%" y="389" width="0.0282%" height="15" fill="rgb(215,228,25)" fg:x="50479" fg:w="40"/><text x="35.8136%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (26 samples, 0.02%)</title><rect x="35.5918%" y="389" width="0.0183%" height="15" fill="rgb(225,36,22)" fg:x="50519" fg:w="26"/><text x="35.8418%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (35 samples, 0.02%)</title><rect x="35.6186%" y="373" width="0.0247%" height="15" fill="rgb(251,106,46)" fg:x="50557" fg:w="35"/><text x="35.8686%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (30 samples, 0.02%)</title><rect x="35.6432%" y="373" width="0.0211%" height="15" fill="rgb(208,90,1)" fg:x="50592" fg:w="30"/><text x="35.8932%" y="383.50"></text></g><g><title>binary_to_types`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (116 samples, 0.08%)</title><rect x="35.6108%" y="389" width="0.0817%" height="15" fill="rgb(243,10,4)" fg:x="50546" fg:w="116"/><text x="35.8608%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (40 samples, 0.03%)</title><rect x="35.6644%" y="373" width="0.0282%" height="15" fill="rgb(212,137,27)" fg:x="50622" fg:w="40"/><text x="35.9144%" y="383.50"></text></g><g><title>binary_to_types`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 0.02%)</title><rect x="35.6925%" y="389" width="0.0162%" height="15" fill="rgb(231,220,49)" fg:x="50662" fg:w="23"/><text x="35.9425%" y="399.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (248 samples, 0.17%)</title><rect x="35.5580%" y="405" width="0.1747%" height="15" fill="rgb(237,96,20)" fg:x="50471" fg:w="248"/><text x="35.8080%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (34 samples, 0.02%)</title><rect x="35.7088%" y="389" width="0.0240%" height="15" fill="rgb(239,229,30)" fg:x="50685" fg:w="34"/><text x="35.9588%" y="399.50"></text></g><g><title>binary_to_types`core::cmp::PartialOrd::le (255 samples, 0.18%)</title><rect x="35.5580%" y="437" width="0.1797%" height="15" fill="rgb(219,65,33)" fg:x="50471" fg:w="255"/><text x="35.8080%" y="447.50"></text></g><g><title>binary_to_types`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (255 samples, 0.18%)</title><rect x="35.5580%" y="421" width="0.1797%" height="15" fill="rgb(243,134,7)" fg:x="50471" fg:w="255"/><text x="35.8080%" y="431.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::forward_interprocedural_fixpoint::GeneralizedContext&lt;T&gt; as cwe_checker_lib::analysis::fixpoint::Context&gt;::merge (394 samples, 0.28%)</title><rect x="35.4608%" y="469" width="0.2776%" height="15" fill="rgb(216,177,54)" fg:x="50333" fg:w="394"/><text x="35.7108%" y="479.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::analysis::reaching_definitions::Context as cwe_checker_lib::analysis::forward_interprocedural_fixpoint::Context&gt;::merge (394 samples, 0.28%)</title><rect x="35.4608%" y="453" width="0.2776%" height="15" fill="rgb(211,160,20)" fg:x="50333" fg:w="394"/><text x="35.7108%" y="463.50"></text></g><g><title>binary_to_types`&lt;binary_type_inference::analysis::reaching_definitions::Context as cwe_checker_lib::analysis::forward_interprocedural_fixpoint::Context&gt;::update_call_stub (15 samples, 0.01%)</title><rect x="35.7419%" y="453" width="0.0106%" height="15" fill="rgb(239,85,39)" fg:x="50732" fg:w="15"/><text x="35.9919%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (49 samples, 0.03%)</title><rect x="35.7729%" y="405" width="0.0345%" height="15" fill="rgb(232,125,22)" fg:x="50776" fg:w="49"/><text x="36.0229%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.02%)</title><rect x="35.7912%" y="389" width="0.0162%" height="15" fill="rgb(244,57,34)" fg:x="50802" fg:w="23"/><text x="36.0412%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (18 samples, 0.01%)</title><rect x="35.7947%" y="373" width="0.0127%" height="15" fill="rgb(214,203,32)" fg:x="50807" fg:w="18"/><text x="36.0447%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (34 samples, 0.02%)</title><rect x="35.8504%" y="373" width="0.0240%" height="15" fill="rgb(207,58,43)" fg:x="50886" fg:w="34"/><text x="36.1004%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (116 samples, 0.08%)</title><rect x="35.8074%" y="405" width="0.0817%" height="15" fill="rgb(215,193,15)" fg:x="50825" fg:w="116"/><text x="36.0574%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (93 samples, 0.07%)</title><rect x="35.8236%" y="389" width="0.0655%" height="15" fill="rgb(232,15,44)" fg:x="50848" fg:w="93"/><text x="36.0736%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (21 samples, 0.01%)</title><rect x="35.8743%" y="373" width="0.0148%" height="15" fill="rgb(212,3,48)" fg:x="50920" fg:w="21"/><text x="36.1243%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (210 samples, 0.15%)</title><rect x="35.7581%" y="421" width="0.1479%" height="15" fill="rgb(218,128,7)" fg:x="50755" fg:w="210"/><text x="36.0081%" y="431.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (32 samples, 0.02%)</title><rect x="35.9067%" y="421" width="0.0225%" height="15" fill="rgb(226,216,39)" fg:x="50966" fg:w="32"/><text x="36.1567%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (39 samples, 0.03%)</title><rect x="35.9335%" y="421" width="0.0275%" height="15" fill="rgb(243,47,51)" fg:x="51004" fg:w="39"/><text x="36.1835%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.01%)</title><rect x="35.9701%" y="421" width="0.0120%" height="15" fill="rgb(241,183,40)" fg:x="51056" fg:w="17"/><text x="36.2201%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (330 samples, 0.23%)</title><rect x="35.7538%" y="437" width="0.2325%" height="15" fill="rgb(231,217,32)" fg:x="50749" fg:w="330"/><text x="36.0038%" y="447.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (345 samples, 0.24%)</title><rect x="35.7538%" y="453" width="0.2431%" height="15" fill="rgb(229,61,38)" fg:x="50749" fg:w="345"/><text x="36.0038%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (36 samples, 0.03%)</title><rect x="36.1054%" y="309" width="0.0254%" height="15" fill="rgb(225,210,5)" fg:x="51248" fg:w="36"/><text x="36.3554%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (100 samples, 0.07%)</title><rect x="36.0927%" y="341" width="0.0705%" height="15" fill="rgb(231,79,45)" fg:x="51230" fg:w="100"/><text x="36.3427%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (94 samples, 0.07%)</title><rect x="36.0969%" y="325" width="0.0662%" height="15" fill="rgb(224,100,7)" fg:x="51236" fg:w="94"/><text x="36.3469%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (46 samples, 0.03%)</title><rect x="36.1308%" y="309" width="0.0324%" height="15" fill="rgb(241,198,18)" fg:x="51284" fg:w="46"/><text x="36.3808%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (118 samples, 0.08%)</title><rect x="36.0814%" y="357" width="0.0831%" height="15" fill="rgb(252,97,53)" fg:x="51214" fg:w="118"/><text x="36.3314%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (198 samples, 0.14%)</title><rect x="36.0314%" y="373" width="0.1395%" height="15" fill="rgb(220,88,7)" fg:x="51143" fg:w="198"/><text x="36.2814%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (26 samples, 0.02%)</title><rect x="36.1928%" y="325" width="0.0183%" height="15" fill="rgb(213,176,14)" fg:x="51372" fg:w="26"/><text x="36.4428%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (54 samples, 0.04%)</title><rect x="36.1751%" y="357" width="0.0380%" height="15" fill="rgb(246,73,7)" fg:x="51347" fg:w="54"/><text x="36.4251%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (35 samples, 0.02%)</title><rect x="36.1885%" y="341" width="0.0247%" height="15" fill="rgb(245,64,36)" fg:x="51366" fg:w="35"/><text x="36.4385%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (65 samples, 0.05%)</title><rect x="36.1709%" y="373" width="0.0458%" height="15" fill="rgb(245,80,10)" fg:x="51341" fg:w="65"/><text x="36.4209%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.02%)</title><rect x="36.2266%" y="357" width="0.0211%" height="15" fill="rgb(232,107,50)" fg:x="51420" fg:w="30"/><text x="36.4766%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (30 samples, 0.02%)</title><rect x="36.2266%" y="341" width="0.0211%" height="15" fill="rgb(253,3,0)" fg:x="51420" fg:w="30"/><text x="36.4766%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (41 samples, 0.03%)</title><rect x="36.2195%" y="373" width="0.0289%" height="15" fill="rgb(212,99,53)" fg:x="51410" fg:w="41"/><text x="36.4695%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (385 samples, 0.27%)</title><rect x="36.0061%" y="389" width="0.2712%" height="15" fill="rgb(249,111,54)" fg:x="51107" fg:w="385"/><text x="36.2561%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (39 samples, 0.03%)</title><rect x="36.2498%" y="373" width="0.0275%" height="15" fill="rgb(249,55,30)" fg:x="51453" fg:w="39"/><text x="36.4998%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (421 samples, 0.30%)</title><rect x="36.0004%" y="405" width="0.2966%" height="15" fill="rgb(237,47,42)" fg:x="51099" fg:w="421"/><text x="36.2504%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (425 samples, 0.30%)</title><rect x="36.0004%" y="421" width="0.2994%" height="15" fill="rgb(211,20,18)" fg:x="51099" fg:w="425"/><text x="36.2504%" y="431.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as core::ops::deref::DerefMut&gt;::deref_mut (429 samples, 0.30%)</title><rect x="36.0004%" y="437" width="0.3022%" height="15" fill="rgb(231,203,46)" fg:x="51099" fg:w="429"/><text x="36.2504%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::analysis::reaching_definitions::apply_def (444 samples, 0.31%)</title><rect x="35.9969%" y="453" width="0.3128%" height="15" fill="rgb(237,142,3)" fg:x="51094" fg:w="444"/><text x="36.2469%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (15 samples, 0.01%)</title><rect x="36.3189%" y="389" width="0.0106%" height="15" fill="rgb(241,107,1)" fg:x="51551" fg:w="15"/><text x="36.5689%" y="399.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::abstract_domain::domain_map::DomainMap&lt;K,V,S&gt; as core::ops::deref::DerefMut&gt;::deref_mut (22 samples, 0.02%)</title><rect x="36.3175%" y="437" width="0.0155%" height="15" fill="rgb(229,83,13)" fg:x="51549" fg:w="22"/><text x="36.5675%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (22 samples, 0.02%)</title><rect x="36.3175%" y="421" width="0.0155%" height="15" fill="rgb(241,91,40)" fg:x="51549" fg:w="22"/><text x="36.5675%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (21 samples, 0.01%)</title><rect x="36.3182%" y="405" width="0.0148%" height="15" fill="rgb(225,3,45)" fg:x="51550" fg:w="21"/><text x="36.5682%" y="415.50"></text></g><g><title>binary_to_types`binary_type_inference::analysis::reaching_definitions::apply_return (46 samples, 0.03%)</title><rect x="36.3097%" y="453" width="0.0324%" height="15" fill="rgb(244,223,14)" fg:x="51538" fg:w="46"/><text x="36.5597%" y="463.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::forward_interprocedural_fixpoint::GeneralizedContext&lt;T&gt; as cwe_checker_lib::analysis::fixpoint::Context&gt;::update_edge (862 samples, 0.61%)</title><rect x="35.7383%" y="469" width="0.6073%" height="15" fill="rgb(224,124,37)" fg:x="50727" fg:w="862"/><text x="35.9883%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (71 samples, 0.05%)</title><rect x="36.6077%" y="341" width="0.0500%" height="15" fill="rgb(251,171,30)" fg:x="51961" fg:w="71"/><text x="36.8577%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (102 samples, 0.07%)</title><rect x="36.5915%" y="373" width="0.0719%" height="15" fill="rgb(236,46,54)" fg:x="51938" fg:w="102"/><text x="36.8415%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (95 samples, 0.07%)</title><rect x="36.5964%" y="357" width="0.0669%" height="15" fill="rgb(245,213,5)" fg:x="51945" fg:w="95"/><text x="36.8464%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (115 samples, 0.08%)</title><rect x="36.5873%" y="389" width="0.0810%" height="15" fill="rgb(230,144,27)" fg:x="51932" fg:w="115"/><text x="36.8373%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (319 samples, 0.22%)</title><rect x="36.4450%" y="405" width="0.2247%" height="15" fill="rgb(220,86,6)" fg:x="51730" fg:w="319"/><text x="36.6950%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.01%)</title><rect x="36.6859%" y="357" width="0.0141%" height="15" fill="rgb(240,20,13)" fg:x="52072" fg:w="20"/><text x="36.9359%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (41 samples, 0.03%)</title><rect x="36.6732%" y="389" width="0.0289%" height="15" fill="rgb(217,89,34)" fg:x="52054" fg:w="41"/><text x="36.9232%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (26 samples, 0.02%)</title><rect x="36.6838%" y="373" width="0.0183%" height="15" fill="rgb(229,13,5)" fg:x="52069" fg:w="26"/><text x="36.9338%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (48 samples, 0.03%)</title><rect x="36.6697%" y="405" width="0.0338%" height="15" fill="rgb(244,67,35)" fg:x="52049" fg:w="48"/><text x="36.9197%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.02%)</title><rect x="36.7099%" y="389" width="0.0176%" height="15" fill="rgb(221,40,2)" fg:x="52106" fg:w="25"/><text x="36.9599%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.02%)</title><rect x="36.7113%" y="373" width="0.0162%" height="15" fill="rgb(237,157,21)" fg:x="52108" fg:w="23"/><text x="36.9613%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.02%)</title><rect x="36.7064%" y="405" width="0.0218%" height="15" fill="rgb(222,94,11)" fg:x="52101" fg:w="31"/><text x="36.9564%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (499 samples, 0.35%)</title><rect x="36.3851%" y="421" width="0.3516%" height="15" fill="rgb(249,113,6)" fg:x="51645" fg:w="499"/><text x="36.6351%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (555 samples, 0.39%)</title><rect x="36.3618%" y="437" width="0.3910%" height="15" fill="rgb(238,137,36)" fg:x="51612" fg:w="555"/><text x="36.6118%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (581 samples, 0.41%)</title><rect x="36.3456%" y="453" width="0.4093%" height="15" fill="rgb(210,102,26)" fg:x="51589" fg:w="581"/><text x="36.5956%" y="463.50"></text></g><g><title>binary_to_types`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (583 samples, 0.41%)</title><rect x="36.3456%" y="469" width="0.4107%" height="15" fill="rgb(218,30,30)" fg:x="51589" fg:w="583"/><text x="36.5956%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (42 samples, 0.03%)</title><rect x="36.7712%" y="405" width="0.0296%" height="15" fill="rgb(214,67,26)" fg:x="52193" fg:w="42"/><text x="37.0212%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (21 samples, 0.01%)</title><rect x="36.7860%" y="389" width="0.0148%" height="15" fill="rgb(251,9,53)" fg:x="52214" fg:w="21"/><text x="37.0360%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.01%)</title><rect x="36.7902%" y="373" width="0.0106%" height="15" fill="rgb(228,204,25)" fg:x="52220" fg:w="15"/><text x="37.0402%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (88 samples, 0.06%)</title><rect x="36.8508%" y="373" width="0.0620%" height="15" fill="rgb(207,153,8)" fg:x="52306" fg:w="88"/><text x="37.1008%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (192 samples, 0.14%)</title><rect x="36.8008%" y="405" width="0.1353%" height="15" fill="rgb(242,9,16)" fg:x="52235" fg:w="192"/><text x="37.0508%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (172 samples, 0.12%)</title><rect x="36.8149%" y="389" width="0.1212%" height="15" fill="rgb(217,211,10)" fg:x="52255" fg:w="172"/><text x="37.0649%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (266 samples, 0.19%)</title><rect x="36.7599%" y="421" width="0.1874%" height="15" fill="rgb(219,228,52)" fg:x="52177" fg:w="266"/><text x="37.0099%" y="431.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (20 samples, 0.01%)</title><rect x="36.9473%" y="421" width="0.0141%" height="15" fill="rgb(231,92,29)" fg:x="52443" fg:w="20"/><text x="37.1973%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.01%)</title><rect x="36.9713%" y="421" width="0.0113%" height="15" fill="rgb(232,8,23)" fg:x="52477" fg:w="16"/><text x="37.2213%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (333 samples, 0.23%)</title><rect x="36.7585%" y="437" width="0.2346%" height="15" fill="rgb(216,211,34)" fg:x="52175" fg:w="333"/><text x="37.0085%" y="447.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (348 samples, 0.25%)</title><rect x="36.7564%" y="469" width="0.2452%" height="15" fill="rgb(236,151,0)" fg:x="52172" fg:w="348"/><text x="37.0064%" y="479.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (345 samples, 0.24%)</title><rect x="36.7585%" y="453" width="0.2431%" height="15" fill="rgb(209,168,3)" fg:x="52175" fg:w="345"/><text x="37.0085%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::set_node_value (19 samples, 0.01%)</title><rect x="37.0347%" y="469" width="0.0134%" height="15" fill="rgb(208,129,28)" fg:x="52567" fg:w="19"/><text x="37.2847%" y="479.50"></text></g><g><title>binary_to_types`alloc::sync::Arc&lt;T&gt;::drop_slow (18 samples, 0.01%)</title><rect x="37.0354%" y="453" width="0.0127%" height="15" fill="rgb(229,78,22)" fg:x="52568" fg:w="18"/><text x="37.2854%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="37.0354%" y="437" width="0.0127%" height="15" fill="rgb(228,187,13)" fg:x="52568" fg:w="18"/><text x="37.2854%" y="447.50"></text></g><g><title>binary_to_types`binary_type_inference::node_context::register_map::run_analysis (2,316 samples, 1.63%)</title><rect x="35.4234%" y="485" width="1.6317%" height="15" fill="rgb(240,119,24)" fg:x="50280" fg:w="2316"/><text x="35.6734%" y="495.50"></text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::infer_ctypes (52,595 samples, 37.05%)</title><rect x="0.0014%" y="517" width="37.0544%" height="15" fill="rgb(209,194,42)" fg:x="2" fg:w="52595"/><text x="0.2514%" y="527.50">binary_to_types`binary_type_inference::inference_job::Infere..</text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::recover_additional_shared_returns (3,582 samples, 2.52%)</title><rect x="34.5322%" y="501" width="2.5236%" height="15" fill="rgb(247,200,46)" fg:x="49015" fg:w="3582"/><text x="34.7822%" y="511.50">bi..</text></g><g><title>binary_to_types`cwe_checker_lib::pcode::expressions::_&lt;impl core::convert::From&lt;cwe_checker_lib::pcode::expressions::Expression&gt; for cwe_checker_lib::intermediate_representation::expression::Expression&gt;::from (19 samples, 0.01%)</title><rect x="37.0882%" y="277" width="0.0134%" height="15" fill="rgb(218,76,16)" fg:x="52643" fg:w="19"/><text x="37.3382%" y="287.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::Def::into_ir_def (24 samples, 0.02%)</title><rect x="37.0861%" y="293" width="0.0169%" height="15" fill="rgb(225,21,48)" fg:x="52640" fg:w="24"/><text x="37.3361%" y="303.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (42 samples, 0.03%)</title><rect x="37.0840%" y="309" width="0.0296%" height="15" fill="rgb(239,223,50)" fg:x="52637" fg:w="42"/><text x="37.3340%" y="319.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::Blk::into_ir_blk (50 samples, 0.04%)</title><rect x="37.0840%" y="341" width="0.0352%" height="15" fill="rgb(244,45,21)" fg:x="52637" fg:w="50"/><text x="37.3340%" y="351.50"></text></g><g><title>binary_to_types`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (50 samples, 0.04%)</title><rect x="37.0840%" y="325" width="0.0352%" height="15" fill="rgb(232,33,43)" fg:x="52637" fg:w="50"/><text x="37.3340%" y="335.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::Program::into_ir_program (52 samples, 0.04%)</title><rect x="37.0833%" y="453" width="0.0366%" height="15" fill="rgb(209,8,3)" fg:x="52636" fg:w="52"/><text x="37.3333%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (52 samples, 0.04%)</title><rect x="37.0833%" y="437" width="0.0366%" height="15" fill="rgb(214,25,53)" fg:x="52636" fg:w="52"/><text x="37.3333%" y="447.50"></text></g><g><title>binary_to_types`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (52 samples, 0.04%)</title><rect x="37.0833%" y="421" width="0.0366%" height="15" fill="rgb(254,186,54)" fg:x="52636" fg:w="52"/><text x="37.3333%" y="431.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (52 samples, 0.04%)</title><rect x="37.0833%" y="405" width="0.0366%" height="15" fill="rgb(208,174,49)" fg:x="52636" fg:w="52"/><text x="37.3333%" y="415.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::_&lt;impl cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::pcode::term::Sub&gt;&gt;::into_ir_sub_term (51 samples, 0.04%)</title><rect x="37.0840%" y="389" width="0.0359%" height="15" fill="rgb(233,191,51)" fg:x="52637" fg:w="51"/><text x="37.3340%" y="399.50"></text></g><g><title>binary_to_types`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (51 samples, 0.04%)</title><rect x="37.0840%" y="373" width="0.0359%" height="15" fill="rgb(222,134,10)" fg:x="52637" fg:w="51"/><text x="37.3340%" y="383.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (51 samples, 0.04%)</title><rect x="37.0840%" y="357" width="0.0359%" height="15" fill="rgb(230,226,20)" fg:x="52637" fg:w="51"/><text x="37.3340%" y="367.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::Project::into_ir_project (76 samples, 0.05%)</title><rect x="37.0671%" y="469" width="0.0535%" height="15" fill="rgb(251,111,25)" fg:x="52613" fg:w="76"/><text x="37.3171%" y="479.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="37.1298%" y="453" width="0.0106%" height="15" fill="rgb(224,40,46)" fg:x="52702" fg:w="15"/><text x="37.3798%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::Project::normalize (57 samples, 0.04%)</title><rect x="37.1206%" y="469" width="0.0402%" height="15" fill="rgb(236,108,47)" fg:x="52689" fg:w="57"/><text x="37.3706%" y="479.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (33 samples, 0.02%)</title><rect x="37.1615%" y="389" width="0.0232%" height="15" fill="rgb(234,93,0)" fg:x="52747" fg:w="33"/><text x="37.4115%" y="399.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="37.1742%" y="373" width="0.0106%" height="15" fill="rgb(224,213,32)" fg:x="52765" fg:w="15"/><text x="37.4242%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`read (15 samples, 0.01%)</title><rect x="37.1742%" y="357" width="0.0106%" height="15" fill="rgb(251,11,48)" fg:x="52765" fg:w="15"/><text x="37.4242%" y="367.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (34 samples, 0.02%)</title><rect x="37.1615%" y="437" width="0.0240%" height="15" fill="rgb(236,173,5)" fg:x="52747" fg:w="34"/><text x="37.4115%" y="447.50"></text></g><g><title>binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (34 samples, 0.02%)</title><rect x="37.1615%" y="421" width="0.0240%" height="15" fill="rgb(230,95,12)" fg:x="52747" fg:w="34"/><text x="37.4115%" y="431.50"></text></g><g><title>binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (34 samples, 0.02%)</title><rect x="37.1615%" y="405" width="0.0240%" height="15" fill="rgb(232,209,1)" fg:x="52747" fg:w="34"/><text x="37.4115%" y="415.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="37.1960%" y="277" width="0.0176%" height="15" fill="rgb(232,6,1)" fg:x="52796" fg:w="25"/><text x="37.4460%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`read (25 samples, 0.02%)</title><rect x="37.1960%" y="261" width="0.0176%" height="15" fill="rgb(210,224,50)" fg:x="52796" fg:w="25"/><text x="37.4460%" y="271.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.02%)</title><rect x="37.2291%" y="245" width="0.0240%" height="15" fill="rgb(228,127,35)" fg:x="52843" fg:w="34"/><text x="37.4791%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`read (34 samples, 0.02%)</title><rect x="37.2291%" y="229" width="0.0240%" height="15" fill="rgb(245,102,45)" fg:x="52843" fg:w="34"/><text x="37.4791%" y="239.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (92 samples, 0.06%)</title><rect x="37.1911%" y="293" width="0.0648%" height="15" fill="rgb(214,1,49)" fg:x="52789" fg:w="92"/><text x="37.4411%" y="303.50"></text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (52 samples, 0.04%)</title><rect x="37.2192%" y="277" width="0.0366%" height="15" fill="rgb(226,163,40)" fg:x="52829" fg:w="52"/><text x="37.4692%" y="287.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (52 samples, 0.04%)</title><rect x="37.2192%" y="261" width="0.0366%" height="15" fill="rgb(239,212,28)" fg:x="52829" fg:w="52"/><text x="37.4692%" y="271.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (122 samples, 0.09%)</title><rect x="37.1875%" y="341" width="0.0860%" height="15" fill="rgb(220,20,13)" fg:x="52784" fg:w="122"/><text x="37.4375%" y="351.50"></text></g><g><title>binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (122 samples, 0.09%)</title><rect x="37.1875%" y="325" width="0.0860%" height="15" fill="rgb(210,164,35)" fg:x="52784" fg:w="122"/><text x="37.4375%" y="335.50"></text></g><g><title>binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (122 samples, 0.09%)</title><rect x="37.1875%" y="309" width="0.0860%" height="15" fill="rgb(248,109,41)" fg:x="52784" fg:w="122"/><text x="37.4375%" y="319.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="37.2559%" y="293" width="0.0176%" height="15" fill="rgb(238,23,50)" fg:x="52881" fg:w="25"/><text x="37.5059%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`read (25 samples, 0.02%)</title><rect x="37.2559%" y="277" width="0.0176%" height="15" fill="rgb(211,48,49)" fg:x="52881" fg:w="25"/><text x="37.5059%" y="287.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2,470 samples, 1.74%)</title><rect x="37.3771%" y="149" width="1.7402%" height="15" fill="rgb(223,36,21)" fg:x="53053" fg:w="2470"/><text x="37.6271%" y="159.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,449 samples, 1.73%)</title><rect x="37.3919%" y="133" width="1.7254%" height="15" fill="rgb(207,123,46)" fg:x="53074" fg:w="2449"/><text x="37.6419%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (2,432 samples, 1.71%)</title><rect x="37.4038%" y="117" width="1.7134%" height="15" fill="rgb(240,218,32)" fg:x="53091" fg:w="2432"/><text x="37.6538%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (367 samples, 0.26%)</title><rect x="39.1172%" y="149" width="0.2586%" height="15" fill="rgb(252,5,43)" fg:x="55523" fg:w="367"/><text x="39.3672%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (364 samples, 0.26%)</title><rect x="39.1193%" y="133" width="0.2564%" height="15" fill="rgb(252,84,19)" fg:x="55526" fg:w="364"/><text x="39.3693%" y="143.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (2,849 samples, 2.01%)</title><rect x="37.3742%" y="165" width="2.0072%" height="15" fill="rgb(243,152,39)" fg:x="53049" fg:w="2849"/><text x="37.6242%" y="175.50">b..</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1,756 samples, 1.24%)</title><rect x="39.4195%" y="149" width="1.2371%" height="15" fill="rgb(234,160,15)" fg:x="55952" fg:w="1756"/><text x="39.6695%" y="159.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,745 samples, 1.23%)</title><rect x="39.4272%" y="133" width="1.2294%" height="15" fill="rgb(237,34,20)" fg:x="55963" fg:w="1745"/><text x="39.6772%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (1,732 samples, 1.22%)</title><rect x="39.4364%" y="117" width="1.2202%" height="15" fill="rgb(229,97,13)" fg:x="55976" fg:w="1732"/><text x="39.6864%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (26 samples, 0.02%)</title><rect x="40.6876%" y="133" width="0.0183%" height="15" fill="rgb(234,71,50)" fg:x="57752" fg:w="26"/><text x="40.9376%" y="143.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,954 samples, 6.31%)</title><rect x="40.6608%" y="149" width="6.3083%" height="15" fill="rgb(253,155,4)" fg:x="57714" fg:w="8954"/><text x="40.9108%" y="159.50">binary_t..</text></g><g><title>libsystem_kernel.dylib`read (8,884 samples, 6.26%)</title><rect x="40.7102%" y="133" width="6.2590%" height="15" fill="rgb(222,185,37)" fg:x="57784" fg:w="8884"/><text x="40.9602%" y="143.50">libsyste..</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (586 samples, 0.41%)</title><rect x="46.9790%" y="117" width="0.4129%" height="15" fill="rgb(251,177,13)" fg:x="66682" fg:w="586"/><text x="47.2290%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (581 samples, 0.41%)</title><rect x="46.9825%" y="101" width="0.4093%" height="15" fill="rgb(250,179,40)" fg:x="66687" fg:w="581"/><text x="47.2325%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (580 samples, 0.41%)</title><rect x="46.9832%" y="85" width="0.4086%" height="15" fill="rgb(242,44,2)" fg:x="66688" fg:w="580"/><text x="47.2332%" y="95.50"></text></g><g><title>binary_to_types`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (592 samples, 0.42%)</title><rect x="46.9755%" y="133" width="0.4171%" height="15" fill="rgb(216,177,13)" fg:x="66677" fg:w="592"/><text x="47.2255%" y="143.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::expressions::_::_&lt;impl serde::de::Deserialize for cwe_checker_lib::pcode::expressions::ExpressionType&gt;::deserialize (775 samples, 0.55%)</title><rect x="46.9727%" y="149" width="0.5460%" height="15" fill="rgb(216,106,43)" fg:x="66673" fg:w="775"/><text x="47.2227%" y="159.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (178 samples, 0.13%)</title><rect x="47.3933%" y="133" width="0.1254%" height="15" fill="rgb(216,183,2)" fg:x="67270" fg:w="178"/><text x="47.6433%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (178 samples, 0.13%)</title><rect x="47.3933%" y="117" width="0.1254%" height="15" fill="rgb(249,75,3)" fg:x="67270" fg:w="178"/><text x="47.6433%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (325 samples, 0.23%)</title><rect x="47.5941%" y="101" width="0.2290%" height="15" fill="rgb(219,67,39)" fg:x="67555" fg:w="325"/><text x="47.8441%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (323 samples, 0.23%)</title><rect x="47.5955%" y="85" width="0.2276%" height="15" fill="rgb(253,228,2)" fg:x="67557" fg:w="323"/><text x="47.8455%" y="95.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_bool (858 samples, 0.60%)</title><rect x="47.5877%" y="117" width="0.6045%" height="15" fill="rgb(235,138,27)" fg:x="67546" fg:w="858"/><text x="47.8377%" y="127.50"></text></g><g><title>binary_to_types`serde_json::de::Deserializer&lt;R&gt;::parse_ident (524 samples, 0.37%)</title><rect x="47.8230%" y="101" width="0.3692%" height="15" fill="rgb(236,97,51)" fg:x="67880" fg:w="524"/><text x="48.0730%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (520 samples, 0.37%)</title><rect x="47.8258%" y="85" width="0.3664%" height="15" fill="rgb(240,80,30)" fg:x="67884" fg:w="520"/><text x="48.0758%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (515 samples, 0.36%)</title><rect x="47.8294%" y="69" width="0.3628%" height="15" fill="rgb(230,178,19)" fg:x="67889" fg:w="515"/><text x="48.0794%" y="79.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (282 samples, 0.20%)</title><rect x="48.1964%" y="101" width="0.1987%" height="15" fill="rgb(210,190,27)" fg:x="68410" fg:w="282"/><text x="48.4464%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (280 samples, 0.20%)</title><rect x="48.1978%" y="85" width="0.1973%" height="15" fill="rgb(222,107,31)" fg:x="68412" fg:w="280"/><text x="48.4478%" y="95.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_u64 (442 samples, 0.31%)</title><rect x="48.1922%" y="117" width="0.3114%" height="15" fill="rgb(216,127,34)" fg:x="68404" fg:w="442"/><text x="48.4422%" y="127.50"></text></g><g><title>binary_to_types`serde_json::de::Deserializer&lt;R&gt;::parse_integer (154 samples, 0.11%)</title><rect x="48.3951%" y="101" width="0.1085%" height="15" fill="rgb(234,116,52)" fg:x="68692" fg:w="154"/><text x="48.6451%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (151 samples, 0.11%)</title><rect x="48.3972%" y="85" width="0.1064%" height="15" fill="rgb(222,124,15)" fg:x="68695" fg:w="151"/><text x="48.6472%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (150 samples, 0.11%)</title><rect x="48.3979%" y="69" width="0.1057%" height="15" fill="rgb(231,179,28)" fg:x="68696" fg:w="150"/><text x="48.6479%" y="79.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (3,108 samples, 2.19%)</title><rect x="48.5036%" y="117" width="2.1897%" height="15" fill="rgb(226,93,45)" fg:x="68846" fg:w="3108"/><text x="48.7536%" y="127.50">b..</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,080 samples, 2.17%)</title><rect x="48.5233%" y="101" width="2.1699%" height="15" fill="rgb(215,8,51)" fg:x="68874" fg:w="3080"/><text x="48.7733%" y="111.50">b..</text></g><g><title>libsystem_kernel.dylib`read (3,049 samples, 2.15%)</title><rect x="48.5452%" y="85" width="2.1481%" height="15" fill="rgb(223,106,5)" fg:x="68905" fg:w="3049"/><text x="48.7952%" y="95.50">l..</text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (18 samples, 0.01%)</title><rect x="50.6933%" y="117" width="0.0127%" height="15" fill="rgb(250,191,5)" fg:x="71954" fg:w="18"/><text x="50.9433%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (39 samples, 0.03%)</title><rect x="50.7496%" y="101" width="0.0275%" height="15" fill="rgb(242,132,44)" fg:x="72034" fg:w="39"/><text x="50.9996%" y="111.50"></text></g><g><title>binary_to_types`DYLD-STUB$$read (16 samples, 0.01%)</title><rect x="50.7771%" y="101" width="0.0113%" height="15" fill="rgb(251,152,29)" fg:x="72073" fg:w="16"/><text x="51.0271%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (17,690 samples, 12.46%)</title><rect x="50.7059%" y="117" width="12.4630%" height="15" fill="rgb(218,179,5)" fg:x="71972" fg:w="17690"/><text x="50.9559%" y="127.50">binary_to_types`&lt;st..</text></g><g><title>libsystem_kernel.dylib`read (17,573 samples, 12.38%)</title><rect x="50.7884%" y="101" width="12.3806%" height="15" fill="rgb(227,67,19)" fg:x="72089" fg:w="17573"/><text x="51.0384%" y="111.50">libsystem_kernel.d..</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1,052 samples, 0.74%)</title><rect x="63.1837%" y="85" width="0.7412%" height="15" fill="rgb(233,119,31)" fg:x="89683" fg:w="1052"/><text x="63.4337%" y="95.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,041 samples, 0.73%)</title><rect x="63.1915%" y="69" width="0.7334%" height="15" fill="rgb(241,120,22)" fg:x="89694" fg:w="1041"/><text x="63.4415%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (1,038 samples, 0.73%)</title><rect x="63.1936%" y="53" width="0.7313%" height="15" fill="rgb(224,102,30)" fg:x="89697" fg:w="1038"/><text x="63.4436%" y="63.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1,065 samples, 0.75%)</title><rect x="63.1823%" y="101" width="0.7503%" height="15" fill="rgb(210,164,37)" fg:x="89681" fg:w="1065"/><text x="63.4323%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (292 samples, 0.21%)</title><rect x="63.9326%" y="101" width="0.2057%" height="15" fill="rgb(226,191,16)" fg:x="90746" fg:w="292"/><text x="64.1826%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (291 samples, 0.21%)</title><rect x="63.9334%" y="85" width="0.2050%" height="15" fill="rgb(214,40,45)" fg:x="90747" fg:w="291"/><text x="64.1834%" y="95.50"></text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (1,365 samples, 0.96%)</title><rect x="63.1781%" y="117" width="0.9617%" height="15" fill="rgb(244,29,26)" fg:x="89675" fg:w="1365"/><text x="63.4281%" y="127.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (23,585 samples, 16.62%)</title><rect x="47.5250%" y="133" width="16.6162%" height="15" fill="rgb(216,16,5)" fg:x="67457" fg:w="23585"/><text x="47.7750%" y="143.50">binary_to_types`&lt;&amp;mut serd..</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (280 samples, 0.20%)</title><rect x="64.1454%" y="133" width="0.1973%" height="15" fill="rgb(249,76,35)" fg:x="91048" fg:w="280"/><text x="64.3954%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (263 samples, 0.19%)</title><rect x="64.1574%" y="117" width="0.1853%" height="15" fill="rgb(207,11,44)" fg:x="91065" fg:w="263"/><text x="64.4074%" y="127.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (35,431 samples, 24.96%)</title><rect x="39.3814%" y="165" width="24.9620%" height="15" fill="rgb(228,190,49)" fg:x="55898" fg:w="35431"/><text x="39.6314%" y="175.50">binary_to_types`&lt;&amp;mut serde_json::de::De..</text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (23,881 samples, 16.82%)</title><rect x="47.5187%" y="149" width="16.8247%" height="15" fill="rgb(214,173,12)" fg:x="67448" fg:w="23881"/><text x="47.7687%" y="159.50">binary_to_types`serde::de:..</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1,907 samples, 1.34%)</title><rect x="64.3434%" y="165" width="1.3435%" height="15" fill="rgb(218,26,35)" fg:x="91329" fg:w="1907"/><text x="64.5934%" y="175.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,889 samples, 1.33%)</title><rect x="64.3561%" y="149" width="1.3308%" height="15" fill="rgb(220,200,19)" fg:x="91347" fg:w="1889"/><text x="64.6061%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (1,874 samples, 1.32%)</title><rect x="64.3666%" y="133" width="1.3203%" height="15" fill="rgb(239,95,49)" fg:x="91362" fg:w="1874"/><text x="64.6166%" y="143.50"></text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (17 samples, 0.01%)</title><rect x="65.6869%" y="165" width="0.0120%" height="15" fill="rgb(235,85,53)" fg:x="93236" fg:w="17"/><text x="65.9369%" y="175.50"></text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (26 samples, 0.02%)</title><rect x="65.7440%" y="149" width="0.0183%" height="15" fill="rgb(233,133,31)" fg:x="93317" fg:w="26"/><text x="65.9940%" y="159.50"></text></g><g><title>binary_to_types`DYLD-STUB$$read (17 samples, 0.01%)</title><rect x="65.7623%" y="149" width="0.0120%" height="15" fill="rgb(218,25,20)" fg:x="93343" fg:w="17"/><text x="66.0123%" y="159.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (14,971 samples, 10.55%)</title><rect x="65.6989%" y="165" width="10.5474%" height="15" fill="rgb(252,210,38)" fg:x="93253" fg:w="14971"/><text x="65.9489%" y="175.50">binary_to_types..</text></g><g><title>libsystem_kernel.dylib`read (14,864 samples, 10.47%)</title><rect x="65.7743%" y="149" width="10.4720%" height="15" fill="rgb(242,134,21)" fg:x="93360" fg:w="14864"/><text x="66.0243%" y="159.50">libsystem_kerne..</text></g><g><title>binary_to_types`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (76 samples, 0.05%)</title><rect x="76.2541%" y="149" width="0.0535%" height="15" fill="rgb(213,28,48)" fg:x="108235" fg:w="76"/><text x="76.5041%" y="159.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (76 samples, 0.05%)</title><rect x="76.2541%" y="133" width="0.0535%" height="15" fill="rgb(250,196,2)" fg:x="108235" fg:w="76"/><text x="76.5041%" y="143.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.05%)</title><rect x="76.2548%" y="117" width="0.0528%" height="15" fill="rgb(227,5,17)" fg:x="108236" fg:w="75"/><text x="76.5048%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (75 samples, 0.05%)</title><rect x="76.2548%" y="101" width="0.0528%" height="15" fill="rgb(221,226,24)" fg:x="108236" fg:w="75"/><text x="76.5048%" y="111.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::_::_&lt;impl serde::de::Deserialize for cwe_checker_lib::pcode::term::JmpType&gt;::deserialize (104 samples, 0.07%)</title><rect x="76.2533%" y="165" width="0.0733%" height="15" fill="rgb(211,5,48)" fg:x="108234" fg:w="104"/><text x="76.5033%" y="175.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.02%)</title><rect x="76.3076%" y="149" width="0.0190%" height="15" fill="rgb(219,150,6)" fg:x="108311" fg:w="27"/><text x="76.5576%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (27 samples, 0.02%)</title><rect x="76.3076%" y="133" width="0.0190%" height="15" fill="rgb(251,46,16)" fg:x="108311" fg:w="27"/><text x="76.5576%" y="143.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (161 samples, 0.11%)</title><rect x="76.3759%" y="117" width="0.1134%" height="15" fill="rgb(220,204,40)" fg:x="108408" fg:w="161"/><text x="76.6259%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (160 samples, 0.11%)</title><rect x="76.3766%" y="101" width="0.1127%" height="15" fill="rgb(211,85,2)" fg:x="108409" fg:w="160"/><text x="76.6266%" y="111.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_bool (404 samples, 0.28%)</title><rect x="76.3731%" y="133" width="0.2846%" height="15" fill="rgb(229,17,7)" fg:x="108404" fg:w="404"/><text x="76.6231%" y="143.50"></text></g><g><title>binary_to_types`serde_json::de::Deserializer&lt;R&gt;::parse_ident (239 samples, 0.17%)</title><rect x="76.4894%" y="117" width="0.1684%" height="15" fill="rgb(239,72,28)" fg:x="108569" fg:w="239"/><text x="76.7394%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (239 samples, 0.17%)</title><rect x="76.4894%" y="101" width="0.1684%" height="15" fill="rgb(230,47,54)" fg:x="108569" fg:w="239"/><text x="76.7394%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (239 samples, 0.17%)</title><rect x="76.4894%" y="85" width="0.1684%" height="15" fill="rgb(214,50,8)" fg:x="108569" fg:w="239"/><text x="76.7394%" y="95.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (170 samples, 0.12%)</title><rect x="76.6592%" y="117" width="0.1198%" height="15" fill="rgb(216,198,43)" fg:x="108810" fg:w="170"/><text x="76.9092%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (165 samples, 0.12%)</title><rect x="76.6627%" y="101" width="0.1162%" height="15" fill="rgb(234,20,35)" fg:x="108815" fg:w="165"/><text x="76.9127%" y="111.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_u64 (252 samples, 0.18%)</title><rect x="76.6577%" y="133" width="0.1775%" height="15" fill="rgb(254,45,19)" fg:x="108808" fg:w="252"/><text x="76.9077%" y="143.50"></text></g><g><title>binary_to_types`serde_json::de::Deserializer&lt;R&gt;::parse_integer (80 samples, 0.06%)</title><rect x="76.7789%" y="117" width="0.0564%" height="15" fill="rgb(219,14,44)" fg:x="108980" fg:w="80"/><text x="77.0289%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 0.06%)</title><rect x="76.7789%" y="101" width="0.0564%" height="15" fill="rgb(217,220,26)" fg:x="108980" fg:w="80"/><text x="77.0289%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (79 samples, 0.06%)</title><rect x="76.7796%" y="85" width="0.0557%" height="15" fill="rgb(213,158,28)" fg:x="108981" fg:w="79"/><text x="77.0296%" y="95.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1,646 samples, 1.16%)</title><rect x="76.8353%" y="133" width="1.1596%" height="15" fill="rgb(252,51,52)" fg:x="109060" fg:w="1646"/><text x="77.0853%" y="143.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,638 samples, 1.15%)</title><rect x="76.8409%" y="117" width="1.1540%" height="15" fill="rgb(246,89,16)" fg:x="109068" fg:w="1638"/><text x="77.0909%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (1,622 samples, 1.14%)</title><rect x="76.8522%" y="101" width="1.1427%" height="15" fill="rgb(216,158,49)" fg:x="109084" fg:w="1622"/><text x="77.1022%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (21 samples, 0.01%)</title><rect x="78.0238%" y="117" width="0.0148%" height="15" fill="rgb(236,107,19)" fg:x="110747" fg:w="21"/><text x="78.2738%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,892 samples, 6.26%)</title><rect x="78.0027%" y="133" width="6.2646%" height="15" fill="rgb(228,185,30)" fg:x="110717" fg:w="8892"/><text x="78.2527%" y="143.50">binary_t..</text></g><g><title>libsystem_kernel.dylib`read (8,831 samples, 6.22%)</title><rect x="78.0457%" y="117" width="6.2216%" height="15" fill="rgb(246,134,8)" fg:x="110778" fg:w="8831"/><text x="78.2957%" y="127.50">libsyste..</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (405 samples, 0.29%)</title><rect x="84.2729%" y="101" width="0.2853%" height="15" fill="rgb(214,143,50)" fg:x="119617" fg:w="405"/><text x="84.5229%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (403 samples, 0.28%)</title><rect x="84.2743%" y="85" width="0.2839%" height="15" fill="rgb(228,75,8)" fg:x="119619" fg:w="403"/><text x="84.5243%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (400 samples, 0.28%)</title><rect x="84.2765%" y="69" width="0.2818%" height="15" fill="rgb(207,175,4)" fg:x="119622" fg:w="400"/><text x="84.5265%" y="79.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (412 samples, 0.29%)</title><rect x="84.2729%" y="117" width="0.2903%" height="15" fill="rgb(205,108,24)" fg:x="119617" fg:w="412"/><text x="84.5229%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (170 samples, 0.12%)</title><rect x="84.5632%" y="117" width="0.1198%" height="15" fill="rgb(244,120,49)" fg:x="120029" fg:w="170"/><text x="84.8132%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (168 samples, 0.12%)</title><rect x="84.5646%" y="101" width="0.1184%" height="15" fill="rgb(223,47,38)" fg:x="120031" fg:w="168"/><text x="84.8146%" y="111.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (193 samples, 0.14%)</title><rect x="84.6886%" y="69" width="0.1360%" height="15" fill="rgb(229,179,11)" fg:x="120207" fg:w="193"/><text x="84.9386%" y="79.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (193 samples, 0.14%)</title><rect x="84.6886%" y="53" width="0.1360%" height="15" fill="rgb(231,122,1)" fg:x="120207" fg:w="193"/><text x="84.9386%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (191 samples, 0.13%)</title><rect x="84.6900%" y="37" width="0.1346%" height="15" fill="rgb(245,119,9)" fg:x="120209" fg:w="191"/><text x="84.9400%" y="47.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.02%)</title><rect x="84.8246%" y="69" width="0.0232%" height="15" fill="rgb(241,163,25)" fg:x="120400" fg:w="33"/><text x="85.0746%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (33 samples, 0.02%)</title><rect x="84.8246%" y="53" width="0.0232%" height="15" fill="rgb(217,214,3)" fg:x="120400" fg:w="33"/><text x="85.0746%" y="63.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (228 samples, 0.16%)</title><rect x="84.6886%" y="85" width="0.1606%" height="15" fill="rgb(240,86,28)" fg:x="120207" fg:w="228"/><text x="84.9386%" y="95.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (111 samples, 0.08%)</title><rect x="84.8506%" y="85" width="0.0782%" height="15" fill="rgb(215,47,9)" fg:x="120437" fg:w="111"/><text x="85.1006%" y="95.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (111 samples, 0.08%)</title><rect x="84.8506%" y="69" width="0.0782%" height="15" fill="rgb(252,25,45)" fg:x="120437" fg:w="111"/><text x="85.1006%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (110 samples, 0.08%)</title><rect x="84.8513%" y="53" width="0.0775%" height="15" fill="rgb(251,164,9)" fg:x="120438" fg:w="110"/><text x="85.1013%" y="63.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (816 samples, 0.57%)</title><rect x="84.9288%" y="85" width="0.5749%" height="15" fill="rgb(233,194,0)" fg:x="120548" fg:w="816"/><text x="85.1788%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (810 samples, 0.57%)</title><rect x="84.9331%" y="69" width="0.5707%" height="15" fill="rgb(249,111,24)" fg:x="120554" fg:w="810"/><text x="85.1831%" y="79.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,166 samples, 0.82%)</title><rect x="84.6837%" y="101" width="0.8215%" height="15" fill="rgb(250,223,3)" fg:x="120200" fg:w="1166"/><text x="84.9337%" y="111.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (71 samples, 0.05%)</title><rect x="85.5080%" y="69" width="0.0500%" height="15" fill="rgb(236,178,37)" fg:x="121370" fg:w="71"/><text x="85.7580%" y="79.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.05%)</title><rect x="85.5094%" y="53" width="0.0486%" height="15" fill="rgb(241,158,50)" fg:x="121372" fg:w="69"/><text x="85.7594%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (69 samples, 0.05%)</title><rect x="85.5094%" y="37" width="0.0486%" height="15" fill="rgb(213,121,41)" fg:x="121372" fg:w="69"/><text x="85.7594%" y="47.50"></text></g><g><title>binary_to_types`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (361 samples, 0.25%)</title><rect x="85.5051%" y="85" width="0.2543%" height="15" fill="rgb(240,92,3)" fg:x="121366" fg:w="361"/><text x="85.7551%" y="95.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (286 samples, 0.20%)</title><rect x="85.5580%" y="69" width="0.2015%" height="15" fill="rgb(205,123,3)" fg:x="121441" fg:w="286"/><text x="85.8080%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (284 samples, 0.20%)</title><rect x="85.5594%" y="53" width="0.2001%" height="15" fill="rgb(205,97,47)" fg:x="121443" fg:w="284"/><text x="85.8094%" y="63.50"></text></g><g><title>binary_to_types`&lt;serde_json::de::VariantAccess&lt;R&gt; as serde::de::EnumAccess&gt;::variant_seed (369 samples, 0.26%)</title><rect x="85.5051%" y="101" width="0.2600%" height="15" fill="rgb(247,152,14)" fg:x="121366" fg:w="369"/><text x="85.7551%" y="111.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (13,624 samples, 9.60%)</title><rect x="76.3400%" y="149" width="9.5984%" height="15" fill="rgb(248,195,53)" fg:x="108357" fg:w="13624"/><text x="76.5900%" y="159.50">binary_to_type..</text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (2,367 samples, 1.67%)</title><rect x="84.2708%" y="133" width="1.6676%" height="15" fill="rgb(226,201,16)" fg:x="119614" fg:w="2367"/><text x="84.5208%" y="143.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::_::_&lt;impl serde::de::Deserialize for cwe_checker_lib::pcode::term::Label&gt;::deserialize (1,782 samples, 1.26%)</title><rect x="84.6830%" y="117" width="1.2555%" height="15" fill="rgb(205,98,0)" fg:x="120199" fg:w="1782"/><text x="84.9330%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (245 samples, 0.17%)</title><rect x="85.7658%" y="101" width="0.1726%" height="15" fill="rgb(214,191,48)" fg:x="121736" fg:w="245"/><text x="86.0158%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (244 samples, 0.17%)</title><rect x="85.7665%" y="85" width="0.1719%" height="15" fill="rgb(237,112,39)" fg:x="121737" fg:w="244"/><text x="86.0165%" y="95.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (189 samples, 0.13%)</title><rect x="85.9412%" y="149" width="0.1332%" height="15" fill="rgb(247,203,27)" fg:x="121985" fg:w="189"/><text x="86.1912%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (181 samples, 0.13%)</title><rect x="85.9469%" y="133" width="0.1275%" height="15" fill="rgb(235,124,28)" fg:x="121993" fg:w="181"/><text x="86.1969%" y="143.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (149 samples, 0.10%)</title><rect x="86.0807%" y="101" width="0.1050%" height="15" fill="rgb(208,207,46)" fg:x="122183" fg:w="149"/><text x="86.3307%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (148 samples, 0.10%)</title><rect x="86.0814%" y="85" width="0.1043%" height="15" fill="rgb(234,176,4)" fg:x="122184" fg:w="148"/><text x="86.3314%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (147 samples, 0.10%)</title><rect x="86.0821%" y="69" width="0.1036%" height="15" fill="rgb(230,133,28)" fg:x="122185" fg:w="147"/><text x="86.3321%" y="79.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (181 samples, 0.13%)</title><rect x="86.0807%" y="117" width="0.1275%" height="15" fill="rgb(211,137,40)" fg:x="122183" fg:w="181"/><text x="86.3307%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.02%)</title><rect x="86.1857%" y="101" width="0.0225%" height="15" fill="rgb(254,35,13)" fg:x="122332" fg:w="32"/><text x="86.4357%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (32 samples, 0.02%)</title><rect x="86.1857%" y="85" width="0.0225%" height="15" fill="rgb(225,49,51)" fg:x="122332" fg:w="32"/><text x="86.4357%" y="95.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (87 samples, 0.06%)</title><rect x="86.2083%" y="117" width="0.0613%" height="15" fill="rgb(251,10,15)" fg:x="122364" fg:w="87"/><text x="86.4583%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.06%)</title><rect x="86.2111%" y="101" width="0.0585%" height="15" fill="rgb(228,207,15)" fg:x="122368" fg:w="83"/><text x="86.4611%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (81 samples, 0.06%)</title><rect x="86.2125%" y="85" width="0.0571%" height="15" fill="rgb(241,99,19)" fg:x="122370" fg:w="81"/><text x="86.4625%" y="95.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (732 samples, 0.52%)</title><rect x="86.2703%" y="117" width="0.5157%" height="15" fill="rgb(207,104,49)" fg:x="122452" fg:w="732"/><text x="86.5203%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (729 samples, 0.51%)</title><rect x="86.2724%" y="101" width="0.5136%" height="15" fill="rgb(234,99,18)" fg:x="122455" fg:w="729"/><text x="86.5224%" y="111.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,014 samples, 0.71%)</title><rect x="86.0758%" y="133" width="0.7144%" height="15" fill="rgb(213,191,49)" fg:x="122176" fg:w="1014"/><text x="86.3258%" y="143.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (53 samples, 0.04%)</title><rect x="86.7902%" y="101" width="0.0373%" height="15" fill="rgb(210,226,19)" fg:x="123190" fg:w="53"/><text x="87.0402%" y="111.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.04%)</title><rect x="86.7909%" y="85" width="0.0366%" height="15" fill="rgb(229,97,18)" fg:x="123191" fg:w="52"/><text x="87.0409%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (52 samples, 0.04%)</title><rect x="86.7909%" y="69" width="0.0366%" height="15" fill="rgb(211,167,15)" fg:x="123191" fg:w="52"/><text x="87.0409%" y="79.50"></text></g><g><title>binary_to_types`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (251 samples, 0.18%)</title><rect x="86.7902%" y="117" width="0.1768%" height="15" fill="rgb(210,169,34)" fg:x="123190" fg:w="251"/><text x="87.0402%" y="127.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (198 samples, 0.14%)</title><rect x="86.8275%" y="101" width="0.1395%" height="15" fill="rgb(241,121,31)" fg:x="123243" fg:w="198"/><text x="87.0775%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (197 samples, 0.14%)</title><rect x="86.8282%" y="85" width="0.1388%" height="15" fill="rgb(232,40,11)" fg:x="123244" fg:w="197"/><text x="87.0782%" y="95.50"></text></g><g><title>binary_to_types`&lt;serde_json::de::VariantAccess&lt;R&gt; as serde::de::EnumAccess&gt;::variant_seed (261 samples, 0.18%)</title><rect x="86.7902%" y="133" width="0.1839%" height="15" fill="rgb(205,86,26)" fg:x="123190" fg:w="261"/><text x="87.0402%" y="143.50"></text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (15,309 samples, 10.79%)</title><rect x="76.3266%" y="165" width="10.7855%" height="15" fill="rgb(231,126,28)" fg:x="108338" fg:w="15309"/><text x="76.5766%" y="175.50">binary_to_types`..</text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::_::_&lt;impl serde::de::Deserialize for cwe_checker_lib::pcode::term::Label&gt;::deserialize (1,473 samples, 1.04%)</title><rect x="86.0744%" y="149" width="1.0378%" height="15" fill="rgb(219,221,18)" fg:x="122174" fg:w="1473"/><text x="86.3244%" y="159.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (196 samples, 0.14%)</title><rect x="86.9741%" y="133" width="0.1381%" height="15" fill="rgb(211,40,0)" fg:x="123451" fg:w="196"/><text x="87.2241%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (194 samples, 0.14%)</title><rect x="86.9755%" y="117" width="0.1367%" height="15" fill="rgb(239,85,43)" fg:x="123453" fg:w="194"/><text x="87.2255%" y="127.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (70,686 samples, 49.80%)</title><rect x="37.3129%" y="181" width="49.7999%" height="15" fill="rgb(231,55,21)" fg:x="52962" fg:w="70686"/><text x="37.5629%" y="191.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;:..</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (211 samples, 0.15%)</title><rect x="87.1150%" y="181" width="0.1487%" height="15" fill="rgb(225,184,43)" fg:x="123651" fg:w="211"/><text x="87.3650%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (189 samples, 0.13%)</title><rect x="87.1305%" y="165" width="0.1332%" height="15" fill="rgb(251,158,41)" fg:x="123673" fg:w="189"/><text x="87.3805%" y="175.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (831 samples, 0.59%)</title><rect x="87.2883%" y="165" width="0.5855%" height="15" fill="rgb(234,159,37)" fg:x="123897" fg:w="831"/><text x="87.5383%" y="175.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (819 samples, 0.58%)</title><rect x="87.2967%" y="149" width="0.5770%" height="15" fill="rgb(216,204,22)" fg:x="123909" fg:w="819"/><text x="87.5467%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (818 samples, 0.58%)</title><rect x="87.2974%" y="133" width="0.5763%" height="15" fill="rgb(214,17,3)" fg:x="123910" fg:w="818"/><text x="87.5474%" y="143.50"></text></g><g><title>binary_to_types`&lt;std::fs::File as std::io::Read&gt;::read (18 samples, 0.01%)</title><rect x="87.8921%" y="149" width="0.0127%" height="15" fill="rgb(212,111,17)" fg:x="124754" fg:w="18"/><text x="88.1421%" y="159.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,503 samples, 4.58%)</title><rect x="87.8773%" y="165" width="4.5815%" height="15" fill="rgb(221,157,24)" fg:x="124733" fg:w="6503"/><text x="88.1273%" y="175.50">binar..</text></g><g><title>libsystem_kernel.dylib`read (6,460 samples, 4.55%)</title><rect x="87.9076%" y="149" width="4.5512%" height="15" fill="rgb(252,16,13)" fg:x="124776" fg:w="6460"/><text x="88.1576%" y="159.50">libsy..</text></g><g><title>binary_to_types`serde::de::MapAccess::next_key (7,377 samples, 5.20%)</title><rect x="87.2636%" y="181" width="5.1973%" height="15" fill="rgb(221,62,2)" fg:x="123862" fg:w="7377"/><text x="87.5136%" y="191.50">binary..</text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (78,292 samples, 55.16%)</title><rect x="37.3038%" y="197" width="55.1585%" height="15" fill="rgb(247,87,22)" fg:x="52949" fg:w="78292"/><text x="37.5538%" y="207.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserial..</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,497 samples, 1.76%)</title><rect x="92.4637%" y="197" width="1.7592%" height="15" fill="rgb(215,73,9)" fg:x="131243" fg:w="2497"/><text x="92.7137%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (2,471 samples, 1.74%)</title><rect x="92.4820%" y="181" width="1.7409%" height="15" fill="rgb(207,175,33)" fg:x="131269" fg:w="2471"/><text x="92.7320%" y="191.50"></text></g><g><title>binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (80,816 samples, 56.94%)</title><rect x="37.2939%" y="213" width="56.9367%" height="15" fill="rgb(243,129,54)" fg:x="52935" fg:w="80816"/><text x="37.5439%" y="223.50">binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed</text></g><g><title>binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (80,828 samples, 56.95%)</title><rect x="37.2925%" y="229" width="56.9452%" height="15" fill="rgb(227,119,45)" fg:x="52933" fg:w="80828"/><text x="37.5425%" y="239.50">binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deser..</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 0.03%)</title><rect x="94.2377%" y="229" width="0.0345%" height="15" fill="rgb(205,109,36)" fg:x="133761" fg:w="49"/><text x="94.4877%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (49 samples, 0.03%)</title><rect x="94.2377%" y="213" width="0.0345%" height="15" fill="rgb(205,6,39)" fg:x="133761" fg:w="49"/><text x="94.4877%" y="223.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (80,926 samples, 57.01%)</title><rect x="37.2897%" y="245" width="57.0142%" height="15" fill="rgb(221,32,16)" fg:x="52929" fg:w="80926"/><text x="37.5397%" y="255.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (45 samples, 0.03%)</title><rect x="94.2722%" y="229" width="0.0317%" height="15" fill="rgb(228,144,50)" fg:x="133810" fg:w="45"/><text x="94.5222%" y="239.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (232 samples, 0.16%)</title><rect x="94.3039%" y="229" width="0.1634%" height="15" fill="rgb(229,201,53)" fg:x="133855" fg:w="232"/><text x="94.5539%" y="239.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (231 samples, 0.16%)</title><rect x="94.3046%" y="213" width="0.1627%" height="15" fill="rgb(249,153,27)" fg:x="133856" fg:w="231"/><text x="94.5546%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`read (229 samples, 0.16%)</title><rect x="94.3060%" y="197" width="0.1613%" height="15" fill="rgb(227,106,25)" fg:x="133858" fg:w="229"/><text x="94.5560%" y="207.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 0.03%)</title><rect x="94.4674%" y="229" width="0.0345%" height="15" fill="rgb(230,65,29)" fg:x="134087" fg:w="49"/><text x="94.7174%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (49 samples, 0.03%)</title><rect x="94.4674%" y="213" width="0.0345%" height="15" fill="rgb(221,57,46)" fg:x="134087" fg:w="49"/><text x="94.7174%" y="223.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (282 samples, 0.20%)</title><rect x="94.3039%" y="245" width="0.1987%" height="15" fill="rgb(229,161,17)" fg:x="133855" fg:w="282"/><text x="94.5539%" y="255.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (207 samples, 0.15%)</title><rect x="94.5026%" y="245" width="0.1458%" height="15" fill="rgb(222,213,11)" fg:x="134137" fg:w="207"/><text x="94.7526%" y="255.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (206 samples, 0.15%)</title><rect x="94.5033%" y="229" width="0.1451%" height="15" fill="rgb(235,35,13)" fg:x="134138" fg:w="206"/><text x="94.7533%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (205 samples, 0.14%)</title><rect x="94.5040%" y="213" width="0.1444%" height="15" fill="rgb(233,158,34)" fg:x="134139" fg:w="205"/><text x="94.7540%" y="223.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,329 samples, 0.94%)</title><rect x="94.6499%" y="245" width="0.9363%" height="15" fill="rgb(215,151,48)" fg:x="134346" fg:w="1329"/><text x="94.8999%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`read (1,321 samples, 0.93%)</title><rect x="94.6555%" y="229" width="0.9307%" height="15" fill="rgb(229,84,14)" fg:x="134354" fg:w="1321"/><text x="94.9055%" y="239.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (82,756 samples, 58.30%)</title><rect x="37.2834%" y="261" width="58.3035%" height="15" fill="rgb(229,68,14)" fg:x="52920" fg:w="82756"/><text x="37.5334%" y="271.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_s..</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (33 samples, 0.02%)</title><rect x="95.5869%" y="261" width="0.0232%" height="15" fill="rgb(243,106,26)" fg:x="135676" fg:w="33"/><text x="95.8369%" y="271.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.02%)</title><rect x="95.5876%" y="245" width="0.0225%" height="15" fill="rgb(206,45,38)" fg:x="135677" fg:w="32"/><text x="95.8376%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`read (32 samples, 0.02%)</title><rect x="95.5876%" y="229" width="0.0225%" height="15" fill="rgb(226,6,15)" fg:x="135677" fg:w="32"/><text x="95.8376%" y="239.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (169 samples, 0.12%)</title><rect x="95.6101%" y="261" width="0.1191%" height="15" fill="rgb(232,22,54)" fg:x="135709" fg:w="169"/><text x="95.8601%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`read (164 samples, 0.12%)</title><rect x="95.6136%" y="245" width="0.1155%" height="15" fill="rgb(229,222,32)" fg:x="135714" fg:w="164"/><text x="95.8636%" y="255.50"></text></g><g><title>binary_to_types`cwe_checker_lib::pcode::term::_::_&lt;impl serde::de::Deserialize for cwe_checker_lib::pcode::term::ArgIntent&gt;::deserialize (17 samples, 0.01%)</title><rect x="95.7292%" y="261" width="0.0120%" height="15" fill="rgb(228,62,29)" fg:x="135878" fg:w="17"/><text x="95.9792%" y="271.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (85 samples, 0.06%)</title><rect x="95.7461%" y="245" width="0.0599%" height="15" fill="rgb(251,103,34)" fg:x="135902" fg:w="85"/><text x="95.9961%" y="255.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.06%)</title><rect x="95.7468%" y="229" width="0.0592%" height="15" fill="rgb(233,12,30)" fg:x="135903" fg:w="84"/><text x="95.9968%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (82 samples, 0.06%)</title><rect x="95.7482%" y="213" width="0.0578%" height="15" fill="rgb(238,52,0)" fg:x="135905" fg:w="82"/><text x="95.9982%" y="223.50"></text></g><g><title>binary_to_types`serde::de::MapAccess::next_key (685 samples, 0.48%)</title><rect x="95.7412%" y="261" width="0.4826%" height="15" fill="rgb(223,98,5)" fg:x="135895" fg:w="685"/><text x="95.9912%" y="271.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (593 samples, 0.42%)</title><rect x="95.8060%" y="245" width="0.4178%" height="15" fill="rgb(228,75,37)" fg:x="135987" fg:w="593"/><text x="96.0560%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`read (586 samples, 0.41%)</title><rect x="95.8109%" y="229" width="0.4129%" height="15" fill="rgb(205,115,49)" fg:x="135994" fg:w="586"/><text x="96.0609%" y="239.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (50 samples, 0.04%)</title><rect x="96.2350%" y="229" width="0.0352%" height="15" fill="rgb(250,154,43)" fg:x="136596" fg:w="50"/><text x="96.4850%" y="239.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.04%)</title><rect x="96.2350%" y="213" width="0.0352%" height="15" fill="rgb(226,43,29)" fg:x="136596" fg:w="50"/><text x="96.4850%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`read (50 samples, 0.04%)</title><rect x="96.2350%" y="197" width="0.0352%" height="15" fill="rgb(249,228,39)" fg:x="136596" fg:w="50"/><text x="96.4850%" y="207.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (161 samples, 0.11%)</title><rect x="96.2703%" y="229" width="0.1134%" height="15" fill="rgb(216,79,43)" fg:x="136646" fg:w="161"/><text x="96.5203%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (160 samples, 0.11%)</title><rect x="96.2710%" y="213" width="0.1127%" height="15" fill="rgb(228,95,12)" fg:x="136647" fg:w="160"/><text x="96.5210%" y="223.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (24 samples, 0.02%)</title><rect x="96.4020%" y="197" width="0.0169%" height="15" fill="rgb(249,221,15)" fg:x="136833" fg:w="24"/><text x="96.6520%" y="207.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="96.4020%" y="181" width="0.0169%" height="15" fill="rgb(233,34,13)" fg:x="136833" fg:w="24"/><text x="96.6520%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (24 samples, 0.02%)</title><rect x="96.4020%" y="165" width="0.0169%" height="15" fill="rgb(214,103,39)" fg:x="136833" fg:w="24"/><text x="96.6520%" y="175.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (119 samples, 0.08%)</title><rect x="96.4189%" y="197" width="0.0838%" height="15" fill="rgb(251,126,39)" fg:x="136857" fg:w="119"/><text x="96.6689%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (119 samples, 0.08%)</title><rect x="96.4189%" y="181" width="0.0838%" height="15" fill="rgb(214,216,36)" fg:x="136857" fg:w="119"/><text x="96.6689%" y="191.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (160 samples, 0.11%)</title><rect x="96.3935%" y="213" width="0.1127%" height="15" fill="rgb(220,221,8)" fg:x="136821" fg:w="160"/><text x="96.6435%" y="223.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (401 samples, 0.28%)</title><rect x="96.2245%" y="245" width="0.2825%" height="15" fill="rgb(240,216,3)" fg:x="136581" fg:w="401"/><text x="96.4745%" y="255.50"></text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (163 samples, 0.11%)</title><rect x="96.3921%" y="229" width="0.1148%" height="15" fill="rgb(232,218,17)" fg:x="136819" fg:w="163"/><text x="96.6421%" y="239.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (84,069 samples, 59.23%)</title><rect x="37.2812%" y="277" width="59.2285%" height="15" fill="rgb(229,163,45)" fg:x="52917" fg:w="84069"/><text x="37.5312%" y="287.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str..</text></g><g><title>binary_to_types`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (406 samples, 0.29%)</title><rect x="96.2238%" y="261" width="0.2860%" height="15" fill="rgb(231,110,42)" fg:x="136580" fg:w="406"/><text x="96.4738%" y="271.50"></text></g><g><title>binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (84,313 samples, 59.40%)</title><rect x="37.2812%" y="293" width="59.4005%" height="15" fill="rgb(208,170,48)" fg:x="52917" fg:w="84313"/><text x="37.5312%" y="303.50">binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (243 samples, 0.17%)</title><rect x="96.5105%" y="277" width="0.1712%" height="15" fill="rgb(239,116,25)" fg:x="136987" fg:w="243"/><text x="96.7605%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`read (242 samples, 0.17%)</title><rect x="96.5112%" y="261" width="0.1705%" height="15" fill="rgb(219,200,50)" fg:x="136988" fg:w="242"/><text x="96.7612%" y="271.50"></text></g><g><title>binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (84,319 samples, 59.40%)</title><rect x="37.2798%" y="309" width="59.4047%" height="15" fill="rgb(245,200,0)" fg:x="52915" fg:w="84319"/><text x="37.5298%" y="319.50">binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deseriali..</text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (84,325 samples, 59.41%)</title><rect x="37.2798%" y="325" width="59.4089%" height="15" fill="rgb(245,119,33)" fg:x="52915" fg:w="84325"/><text x="37.5298%" y="335.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (39 samples, 0.03%)</title><rect x="96.6894%" y="309" width="0.0275%" height="15" fill="rgb(231,125,12)" fg:x="137241" fg:w="39"/><text x="96.9394%" y="319.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.03%)</title><rect x="96.6894%" y="293" width="0.0275%" height="15" fill="rgb(216,96,41)" fg:x="137241" fg:w="39"/><text x="96.9394%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`read (39 samples, 0.03%)</title><rect x="96.6894%" y="277" width="0.0275%" height="15" fill="rgb(248,43,45)" fg:x="137241" fg:w="39"/><text x="96.9394%" y="287.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (45 samples, 0.03%)</title><rect x="96.6887%" y="325" width="0.0317%" height="15" fill="rgb(217,222,7)" fg:x="137240" fg:w="45"/><text x="96.9387%" y="335.50"></text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (37 samples, 0.03%)</title><rect x="96.7211%" y="325" width="0.0261%" height="15" fill="rgb(233,28,6)" fg:x="137286" fg:w="37"/><text x="96.9711%" y="335.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.03%)</title><rect x="96.7211%" y="309" width="0.0261%" height="15" fill="rgb(231,218,15)" fg:x="137286" fg:w="37"/><text x="96.9711%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`read (36 samples, 0.03%)</title><rect x="96.7219%" y="293" width="0.0254%" height="15" fill="rgb(226,171,48)" fg:x="137287" fg:w="36"/><text x="96.9719%" y="303.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 0.07%)</title><rect x="96.7472%" y="325" width="0.0655%" height="15" fill="rgb(235,201,9)" fg:x="137323" fg:w="93"/><text x="96.9972%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`read (92 samples, 0.06%)</title><rect x="96.7479%" y="309" width="0.0648%" height="15" fill="rgb(217,80,15)" fg:x="137324" fg:w="92"/><text x="96.9979%" y="319.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (84,506 samples, 59.54%)</title><rect x="37.2784%" y="341" width="59.5364%" height="15" fill="rgb(219,152,8)" fg:x="52913" fg:w="84506"/><text x="37.5284%" y="351.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str..</text></g><g><title>binary_to_types`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (15 samples, 0.01%)</title><rect x="96.8149%" y="341" width="0.0106%" height="15" fill="rgb(243,107,38)" fg:x="137419" fg:w="15"/><text x="97.0649%" y="351.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="96.8149%" y="325" width="0.0106%" height="15" fill="rgb(231,17,5)" fg:x="137419" fg:w="15"/><text x="97.0649%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`read (15 samples, 0.01%)</title><rect x="96.8149%" y="309" width="0.0106%" height="15" fill="rgb(209,25,54)" fg:x="137419" fg:w="15"/><text x="97.0649%" y="319.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.03%)</title><rect x="96.8254%" y="341" width="0.0303%" height="15" fill="rgb(219,0,2)" fg:x="137434" fg:w="43"/><text x="97.0754%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`read (43 samples, 0.03%)</title><rect x="96.8254%" y="325" width="0.0303%" height="15" fill="rgb(246,9,5)" fg:x="137434" fg:w="43"/><text x="97.0754%" y="335.50"></text></g><g><title>binary_to_types`serde::de::MapAccess::next_key (32 samples, 0.02%)</title><rect x="96.8557%" y="341" width="0.0225%" height="15" fill="rgb(226,159,4)" fg:x="137477" fg:w="32"/><text x="97.1057%" y="351.50"></text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.01%)</title><rect x="96.8635%" y="325" width="0.0148%" height="15" fill="rgb(219,175,34)" fg:x="137488" fg:w="21"/><text x="97.1135%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`read (20 samples, 0.01%)</title><rect x="96.8642%" y="309" width="0.0141%" height="15" fill="rgb(236,10,46)" fg:x="137489" fg:w="20"/><text x="97.1142%" y="319.50"></text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (84,734 samples, 59.70%)</title><rect x="37.1854%" y="357" width="59.6971%" height="15" fill="rgb(240,211,16)" fg:x="52781" fg:w="84734"/><text x="37.4354%" y="367.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_stru..</text></g><g><title>binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (84,750 samples, 59.71%)</title><rect x="37.1854%" y="373" width="59.7083%" height="15" fill="rgb(205,3,43)" fg:x="52781" fg:w="84750"/><text x="37.4354%" y="383.50">binary_to_types`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed</text></g><g><title>binary_to_types`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="96.8825%" y="357" width="0.0113%" height="15" fill="rgb(245,7,22)" fg:x="137515" fg:w="16"/><text x="97.1325%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`read (16 samples, 0.01%)</title><rect x="96.8825%" y="341" width="0.0113%" height="15" fill="rgb(239,132,32)" fg:x="137515" fg:w="16"/><text x="97.1325%" y="351.50"></text></g><g><title>binary_to_types`serde_json::de::from_reader (84,785 samples, 59.73%)</title><rect x="37.1615%" y="469" width="59.7330%" height="15" fill="rgb(228,202,34)" fg:x="52747" fg:w="84785"/><text x="37.4115%" y="479.50">binary_to_types`serde_json::de::from_reader</text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (84,785 samples, 59.73%)</title><rect x="37.1615%" y="453" width="59.7330%" height="15" fill="rgb(254,200,22)" fg:x="52747" fg:w="84785"/><text x="37.4115%" y="463.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_stru..</text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (84,751 samples, 59.71%)</title><rect x="37.1854%" y="437" width="59.7090%" height="15" fill="rgb(219,10,39)" fg:x="52781" fg:w="84751"/><text x="37.4354%" y="447.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_stru..</text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (84,751 samples, 59.71%)</title><rect x="37.1854%" y="421" width="59.7090%" height="15" fill="rgb(226,210,39)" fg:x="52781" fg:w="84751"/><text x="37.4354%" y="431.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_stru..</text></g><g><title>binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (84,751 samples, 59.71%)</title><rect x="37.1854%" y="405" width="59.7090%" height="15" fill="rgb(208,219,16)" fg:x="52781" fg:w="84751"/><text x="37.4354%" y="415.50">binary_to_types`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq</text></g><g><title>binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (84,751 samples, 59.71%)</title><rect x="37.1854%" y="389" width="59.7090%" height="15" fill="rgb(216,158,51)" fg:x="52781" fg:w="84751"/><text x="37.4354%" y="399.50">binary_to_types`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserializ..</text></g><g><title>binary_to_types`binary_type_inference::util::get_intermediate_representation_for_reader (84,927 samples, 59.83%)</title><rect x="37.0657%" y="485" width="59.8330%" height="15" fill="rgb(233,14,44)" fg:x="52611" fg:w="84927"/><text x="37.3157%" y="495.50">binary_to_types`binary_type_inference::util::get_intermediate_representation_for_reader</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.02%)</title><rect x="96.9452%" y="373" width="0.0169%" height="15" fill="rgb(237,97,39)" fg:x="137604" fg:w="24"/><text x="97.1952%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (52 samples, 0.04%)</title><rect x="96.9262%" y="421" width="0.0366%" height="15" fill="rgb(218,198,43)" fg:x="137577" fg:w="52"/><text x="97.1762%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (47 samples, 0.03%)</title><rect x="96.9297%" y="405" width="0.0331%" height="15" fill="rgb(231,104,20)" fg:x="137582" fg:w="47"/><text x="97.1797%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.02%)</title><rect x="96.9417%" y="389" width="0.0211%" height="15" fill="rgb(254,36,13)" fg:x="137599" fg:w="30"/><text x="97.1917%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (101 samples, 0.07%)</title><rect x="96.9149%" y="437" width="0.0712%" height="15" fill="rgb(248,14,50)" fg:x="137561" fg:w="101"/><text x="97.1649%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.01%)</title><rect x="96.9755%" y="421" width="0.0106%" height="15" fill="rgb(217,107,29)" fg:x="137647" fg:w="15"/><text x="97.2255%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (112 samples, 0.08%)</title><rect x="96.9114%" y="453" width="0.0789%" height="15" fill="rgb(251,169,33)" fg:x="137556" fg:w="112"/><text x="97.1614%" y="463.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (19 samples, 0.01%)</title><rect x="96.9931%" y="437" width="0.0134%" height="15" fill="rgb(217,108,32)" fg:x="137672" fg:w="19"/><text x="97.2431%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.02%)</title><rect x="97.0065%" y="437" width="0.0190%" height="15" fill="rgb(219,66,42)" fg:x="137691" fg:w="27"/><text x="97.2565%" y="447.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (68 samples, 0.05%)</title><rect x="96.9903%" y="453" width="0.0479%" height="15" fill="rgb(206,180,7)" fg:x="137668" fg:w="68"/><text x="97.2403%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (22 samples, 0.02%)</title><rect x="97.0699%" y="405" width="0.0155%" height="15" fill="rgb(208,226,31)" fg:x="137781" fg:w="22"/><text x="97.3199%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (20 samples, 0.01%)</title><rect x="97.0713%" y="389" width="0.0141%" height="15" fill="rgb(218,26,49)" fg:x="137783" fg:w="20"/><text x="97.3213%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (40 samples, 0.03%)</title><rect x="97.0586%" y="421" width="0.0282%" height="15" fill="rgb(233,197,48)" fg:x="137765" fg:w="40"/><text x="97.3086%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.01%)</title><rect x="97.1037%" y="405" width="0.0127%" height="15" fill="rgb(252,181,51)" fg:x="137829" fg:w="18"/><text x="97.3537%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (42 samples, 0.03%)</title><rect x="97.0875%" y="421" width="0.0296%" height="15" fill="rgb(253,90,19)" fg:x="137806" fg:w="42"/><text x="97.3375%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (30 samples, 0.02%)</title><rect x="97.1171%" y="421" width="0.0211%" height="15" fill="rgb(215,171,30)" fg:x="137848" fg:w="30"/><text x="97.3671%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (30 samples, 0.02%)</title><rect x="97.1171%" y="405" width="0.0211%" height="15" fill="rgb(214,222,9)" fg:x="137848" fg:w="30"/><text x="97.3671%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (24 samples, 0.02%)</title><rect x="97.1213%" y="389" width="0.0169%" height="15" fill="rgb(223,3,22)" fg:x="137854" fg:w="24"/><text x="97.3713%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`madvise (24 samples, 0.02%)</title><rect x="97.1213%" y="373" width="0.0169%" height="15" fill="rgb(225,196,46)" fg:x="137854" fg:w="24"/><text x="97.3713%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (16 samples, 0.01%)</title><rect x="97.1382%" y="421" width="0.0113%" height="15" fill="rgb(209,110,37)" fg:x="137878" fg:w="16"/><text x="97.3882%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (137 samples, 0.10%)</title><rect x="97.0565%" y="437" width="0.0965%" height="15" fill="rgb(249,89,12)" fg:x="137762" fg:w="137"/><text x="97.3065%" y="447.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (157 samples, 0.11%)</title><rect x="97.0565%" y="453" width="0.1106%" height="15" fill="rgb(226,27,33)" fg:x="137762" fg:w="157"/><text x="97.3065%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::dead_variable_elimination::alive_vars_computation::update_alive_vars_by_def (56 samples, 0.04%)</title><rect x="97.1890%" y="453" width="0.0395%" height="15" fill="rgb(213,82,22)" fg:x="137950" fg:w="56"/><text x="97.4390%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (56 samples, 0.04%)</title><rect x="97.2834%" y="357" width="0.0395%" height="15" fill="rgb(248,140,0)" fg:x="138084" fg:w="56"/><text x="97.5334%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (84 samples, 0.06%)</title><rect x="97.2672%" y="389" width="0.0592%" height="15" fill="rgb(228,106,3)" fg:x="138061" fg:w="84"/><text x="97.5172%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (68 samples, 0.05%)</title><rect x="97.2784%" y="373" width="0.0479%" height="15" fill="rgb(209,23,37)" fg:x="138077" fg:w="68"/><text x="97.5284%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (94 samples, 0.07%)</title><rect x="97.2636%" y="405" width="0.0662%" height="15" fill="rgb(241,93,50)" fg:x="138056" fg:w="94"/><text x="97.5136%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (161 samples, 0.11%)</title><rect x="97.2397%" y="421" width="0.1134%" height="15" fill="rgb(253,46,43)" fg:x="138022" fg:w="161"/><text x="97.4897%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.01%)</title><rect x="97.3397%" y="405" width="0.0134%" height="15" fill="rgb(226,206,43)" fg:x="138164" fg:w="19"/><text x="97.5897%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (186 samples, 0.13%)</title><rect x="97.2284%" y="437" width="0.1310%" height="15" fill="rgb(217,54,7)" fg:x="138006" fg:w="186"/><text x="97.4784%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (51 samples, 0.04%)</title><rect x="97.3897%" y="389" width="0.0359%" height="15" fill="rgb(223,5,52)" fg:x="138235" fg:w="51"/><text x="97.6397%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (46 samples, 0.03%)</title><rect x="97.3933%" y="373" width="0.0324%" height="15" fill="rgb(206,52,46)" fg:x="138240" fg:w="46"/><text x="97.6433%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (78 samples, 0.05%)</title><rect x="97.3749%" y="405" width="0.0550%" height="15" fill="rgb(253,136,11)" fg:x="138214" fg:w="78"/><text x="97.6249%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (51 samples, 0.04%)</title><rect x="97.4841%" y="389" width="0.0359%" height="15" fill="rgb(208,106,33)" fg:x="138369" fg:w="51"/><text x="97.7341%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (129 samples, 0.09%)</title><rect x="97.4299%" y="405" width="0.0909%" height="15" fill="rgb(206,54,4)" fg:x="138292" fg:w="129"/><text x="97.6799%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (15 samples, 0.01%)</title><rect x="97.5229%" y="373" width="0.0106%" height="15" fill="rgb(213,3,15)" fg:x="138424" fg:w="15"/><text x="97.7729%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (15 samples, 0.01%)</title><rect x="97.5229%" y="357" width="0.0106%" height="15" fill="rgb(252,211,39)" fg:x="138424" fg:w="15"/><text x="97.7729%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`madvise (23 samples, 0.02%)</title><rect x="97.5370%" y="357" width="0.0162%" height="15" fill="rgb(223,6,36)" fg:x="138444" fg:w="23"/><text x="97.7870%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (47 samples, 0.03%)</title><rect x="97.5208%" y="405" width="0.0331%" height="15" fill="rgb(252,169,45)" fg:x="138421" fg:w="47"/><text x="97.7708%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (45 samples, 0.03%)</title><rect x="97.5222%" y="389" width="0.0317%" height="15" fill="rgb(212,48,26)" fg:x="138423" fg:w="45"/><text x="97.7722%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (24 samples, 0.02%)</title><rect x="97.5370%" y="373" width="0.0169%" height="15" fill="rgb(251,102,48)" fg:x="138444" fg:w="24"/><text x="97.7870%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (56 samples, 0.04%)</title><rect x="97.5602%" y="405" width="0.0395%" height="15" fill="rgb(243,208,16)" fg:x="138477" fg:w="56"/><text x="97.8102%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (349 samples, 0.25%)</title><rect x="97.3609%" y="421" width="0.2459%" height="15" fill="rgb(219,96,24)" fg:x="138194" fg:w="349"/><text x="97.6109%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.01%)</title><rect x="97.6180%" y="421" width="0.0134%" height="15" fill="rgb(219,33,29)" fg:x="138559" fg:w="19"/><text x="97.8680%" y="431.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (399 samples, 0.28%)</title><rect x="97.3609%" y="437" width="0.2811%" height="15" fill="rgb(223,176,5)" fg:x="138194" fg:w="399"/><text x="97.6109%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.01%)</title><rect x="97.6694%" y="389" width="0.0113%" height="15" fill="rgb(228,140,14)" fg:x="138632" fg:w="16"/><text x="97.9194%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.01%)</title><rect x="97.6701%" y="373" width="0.0106%" height="15" fill="rgb(217,179,31)" fg:x="138633" fg:w="15"/><text x="97.9201%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (30 samples, 0.02%)</title><rect x="97.6603%" y="405" width="0.0211%" height="15" fill="rgb(230,9,30)" fg:x="138619" fg:w="30"/><text x="97.9103%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (23 samples, 0.02%)</title><rect x="97.7209%" y="389" width="0.0162%" height="15" fill="rgb(230,136,20)" fg:x="138705" fg:w="23"/><text x="97.9709%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (80 samples, 0.06%)</title><rect x="97.6814%" y="405" width="0.0564%" height="15" fill="rgb(215,210,22)" fg:x="138649" fg:w="80"/><text x="97.9314%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (30 samples, 0.02%)</title><rect x="97.7399%" y="405" width="0.0211%" height="15" fill="rgb(218,43,5)" fg:x="138732" fg:w="30"/><text x="97.9899%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (162 samples, 0.11%)</title><rect x="97.6532%" y="421" width="0.1141%" height="15" fill="rgb(216,11,5)" fg:x="138609" fg:w="162"/><text x="97.9032%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (44 samples, 0.03%)</title><rect x="97.8146%" y="325" width="0.0310%" height="15" fill="rgb(209,82,29)" fg:x="138838" fg:w="44"/><text x="98.0646%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (93 samples, 0.07%)</title><rect x="97.7822%" y="357" width="0.0655%" height="15" fill="rgb(244,115,12)" fg:x="138792" fg:w="93"/><text x="98.0322%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (57 samples, 0.04%)</title><rect x="97.8075%" y="341" width="0.0402%" height="15" fill="rgb(222,82,18)" fg:x="138828" fg:w="57"/><text x="98.0575%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (105 samples, 0.07%)</title><rect x="97.7808%" y="373" width="0.0740%" height="15" fill="rgb(249,227,8)" fg:x="138790" fg:w="105"/><text x="98.0308%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::merge_iter::MergeIterInner&lt;I&gt;::nexts (18 samples, 0.01%)</title><rect x="97.8660%" y="373" width="0.0127%" height="15" fill="rgb(253,141,45)" fg:x="138911" fg:w="18"/><text x="98.1160%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (16 samples, 0.01%)</title><rect x="97.8822%" y="373" width="0.0113%" height="15" fill="rgb(234,184,4)" fg:x="138934" fg:w="16"/><text x="98.1322%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (188 samples, 0.13%)</title><rect x="97.7737%" y="389" width="0.1325%" height="15" fill="rgb(218,194,23)" fg:x="138780" fg:w="188"/><text x="98.0237%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.01%)</title><rect x="97.8935%" y="373" width="0.0127%" height="15" fill="rgb(235,66,41)" fg:x="138950" fg:w="18"/><text x="98.1435%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.05%)</title><rect x="97.9357%" y="357" width="0.0542%" height="15" fill="rgb(245,217,1)" fg:x="139010" fg:w="77"/><text x="98.1857%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.01%)</title><rect x="97.9907%" y="357" width="0.0106%" height="15" fill="rgb(229,91,1)" fg:x="139088" fg:w="15"/><text x="98.2407%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.01%)</title><rect x="97.9907%" y="341" width="0.0106%" height="15" fill="rgb(207,101,30)" fg:x="139088" fg:w="15"/><text x="98.2407%" y="351.50"></text></g><g><title>binary_to_types`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (137 samples, 0.10%)</title><rect x="97.9125%" y="373" width="0.0965%" height="15" fill="rgb(223,82,49)" fg:x="138977" fg:w="137"/><text x="98.1625%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::bulk_build_from_sorted_iter (146 samples, 0.10%)</title><rect x="97.9076%" y="389" width="0.1029%" height="15" fill="rgb(218,167,17)" fg:x="138970" fg:w="146"/><text x="98.1576%" y="399.50"></text></g><g><title>binary_to_types`alloc::slice::merge_sort (17 samples, 0.01%)</title><rect x="98.0154%" y="389" width="0.0120%" height="15" fill="rgb(208,103,14)" fg:x="139123" fg:w="17"/><text x="98.2654%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (387 samples, 0.27%)</title><rect x="97.7702%" y="405" width="0.2727%" height="15" fill="rgb(238,20,8)" fg:x="138775" fg:w="387"/><text x="98.0202%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (22 samples, 0.02%)</title><rect x="98.0273%" y="389" width="0.0155%" height="15" fill="rgb(218,80,54)" fg:x="139140" fg:w="22"/><text x="98.2773%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::bulk_build_from_sorted_iter (16 samples, 0.01%)</title><rect x="98.0576%" y="373" width="0.0113%" height="15" fill="rgb(240,144,17)" fg:x="139183" fg:w="16"/><text x="98.3076%" y="383.50"></text></g><g><title>binary_to_types`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (15 samples, 0.01%)</title><rect x="98.0583%" y="357" width="0.0106%" height="15" fill="rgb(245,27,50)" fg:x="139184" fg:w="15"/><text x="98.3083%" y="367.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::backward_interprocedural_fixpoint::GeneralizedContext&lt;T&gt; as cwe_checker_lib::analysis::fixpoint::Context&gt;::merge (429 samples, 0.30%)</title><rect x="97.7695%" y="421" width="0.3022%" height="15" fill="rgb(251,51,7)" fg:x="138774" fg:w="429"/><text x="98.0195%" y="431.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::interprocedural_fixpoint_generic::merge_option (40 samples, 0.03%)</title><rect x="98.0435%" y="405" width="0.0282%" height="15" fill="rgb(245,217,29)" fg:x="139163" fg:w="40"/><text x="98.2935%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (33 samples, 0.02%)</title><rect x="98.0485%" y="389" width="0.0232%" height="15" fill="rgb(221,176,29)" fg:x="139170" fg:w="33"/><text x="98.2985%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (31 samples, 0.02%)</title><rect x="98.1069%" y="325" width="0.0218%" height="15" fill="rgb(212,180,24)" fg:x="139253" fg:w="31"/><text x="98.3569%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (62 samples, 0.04%)</title><rect x="98.0858%" y="357" width="0.0437%" height="15" fill="rgb(254,24,2)" fg:x="139223" fg:w="62"/><text x="98.3358%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (39 samples, 0.03%)</title><rect x="98.1020%" y="341" width="0.0275%" height="15" fill="rgb(230,100,2)" fg:x="139246" fg:w="39"/><text x="98.3520%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (73 samples, 0.05%)</title><rect x="98.0823%" y="373" width="0.0514%" height="15" fill="rgb(219,142,25)" fg:x="139218" fg:w="73"/><text x="98.3323%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.01%)</title><rect x="98.1415%" y="373" width="0.0127%" height="15" fill="rgb(240,73,43)" fg:x="139302" fg:w="18"/><text x="98.3915%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (149 samples, 0.10%)</title><rect x="98.0731%" y="389" width="0.1050%" height="15" fill="rgb(214,114,15)" fg:x="139205" fg:w="149"/><text x="98.3231%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (30 samples, 0.02%)</title><rect x="98.1570%" y="373" width="0.0211%" height="15" fill="rgb(207,130,4)" fg:x="139324" fg:w="30"/><text x="98.4070%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (165 samples, 0.12%)</title><rect x="98.0724%" y="405" width="0.1162%" height="15" fill="rgb(221,25,40)" fg:x="139204" fg:w="165"/><text x="98.3224%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.02%)</title><rect x="98.2507%" y="293" width="0.0190%" height="15" fill="rgb(241,184,7)" fg:x="139457" fg:w="27"/><text x="98.5007%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (47 samples, 0.03%)</title><rect x="98.2380%" y="325" width="0.0331%" height="15" fill="rgb(235,159,4)" fg:x="139439" fg:w="47"/><text x="98.4880%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (33 samples, 0.02%)</title><rect x="98.2479%" y="309" width="0.0232%" height="15" fill="rgb(214,87,48)" fg:x="139453" fg:w="33"/><text x="98.4979%" y="319.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (56 samples, 0.04%)</title><rect x="98.2352%" y="341" width="0.0395%" height="15" fill="rgb(246,198,24)" fg:x="139435" fg:w="56"/><text x="98.4852%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.01%)</title><rect x="98.2803%" y="325" width="0.0134%" height="15" fill="rgb(209,66,40)" fg:x="139499" fg:w="19"/><text x="98.5303%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.01%)</title><rect x="98.2803%" y="309" width="0.0134%" height="15" fill="rgb(233,147,39)" fg:x="139499" fg:w="19"/><text x="98.5303%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.02%)</title><rect x="98.2789%" y="341" width="0.0162%" height="15" fill="rgb(231,145,52)" fg:x="139497" fg:w="23"/><text x="98.5289%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (114 samples, 0.08%)</title><rect x="98.2288%" y="357" width="0.0803%" height="15" fill="rgb(206,20,26)" fg:x="139426" fg:w="114"/><text x="98.4788%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.01%)</title><rect x="98.2965%" y="341" width="0.0127%" height="15" fill="rgb(238,220,4)" fg:x="139522" fg:w="18"/><text x="98.5465%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.01%)</title><rect x="98.3824%" y="325" width="0.0127%" height="15" fill="rgb(252,195,42)" fg:x="139644" fg:w="18"/><text x="98.6324%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (39 samples, 0.03%)</title><rect x="98.5071%" y="293" width="0.0275%" height="15" fill="rgb(209,10,6)" fg:x="139821" fg:w="39"/><text x="98.7571%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (186 samples, 0.13%)</title><rect x="98.4191%" y="309" width="0.1310%" height="15" fill="rgb(229,3,52)" fg:x="139696" fg:w="186"/><text x="98.6691%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (22 samples, 0.02%)</title><rect x="98.5346%" y="293" width="0.0155%" height="15" fill="rgb(253,49,37)" fg:x="139860" fg:w="22"/><text x="98.7846%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (325 samples, 0.23%)</title><rect x="98.3296%" y="341" width="0.2290%" height="15" fill="rgb(240,103,49)" fg:x="139569" fg:w="325"/><text x="98.5796%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (232 samples, 0.16%)</title><rect x="98.3951%" y="325" width="0.1634%" height="15" fill="rgb(250,182,30)" fg:x="139662" fg:w="232"/><text x="98.6451%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (20 samples, 0.01%)</title><rect x="98.5585%" y="341" width="0.0141%" height="15" fill="rgb(248,8,30)" fg:x="139894" fg:w="20"/><text x="98.8085%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (375 samples, 0.26%)</title><rect x="98.3091%" y="357" width="0.2642%" height="15" fill="rgb(237,120,30)" fg:x="139540" fg:w="375"/><text x="98.5591%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (98 samples, 0.07%)</title><rect x="98.5973%" y="357" width="0.0690%" height="15" fill="rgb(221,146,34)" fg:x="139949" fg:w="98"/><text x="98.8473%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (83 samples, 0.06%)</title><rect x="98.6079%" y="341" width="0.0585%" height="15" fill="rgb(242,55,13)" fg:x="139964" fg:w="83"/><text x="98.8579%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (80 samples, 0.06%)</title><rect x="98.6100%" y="325" width="0.0564%" height="15" fill="rgb(242,112,31)" fg:x="139967" fg:w="80"/><text x="98.8600%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (54 samples, 0.04%)</title><rect x="98.6283%" y="309" width="0.0380%" height="15" fill="rgb(249,192,27)" fg:x="139993" fg:w="54"/><text x="98.8783%" y="319.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (751 samples, 0.53%)</title><rect x="98.1957%" y="373" width="0.5291%" height="15" fill="rgb(208,204,44)" fg:x="139379" fg:w="751"/><text x="98.4457%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (81 samples, 0.06%)</title><rect x="98.6677%" y="357" width="0.0571%" height="15" fill="rgb(208,93,54)" fg:x="140049" fg:w="81"/><text x="98.9177%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.01%)</title><rect x="98.7502%" y="325" width="0.0106%" height="15" fill="rgb(242,1,31)" fg:x="140166" fg:w="15"/><text x="99.0002%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (54 samples, 0.04%)</title><rect x="98.7248%" y="373" width="0.0380%" height="15" fill="rgb(241,83,25)" fg:x="140130" fg:w="54"/><text x="98.9748%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.02%)</title><rect x="98.7382%" y="357" width="0.0247%" height="15" fill="rgb(205,169,50)" fg:x="140149" fg:w="35"/><text x="98.9882%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.01%)</title><rect x="98.7495%" y="341" width="0.0134%" height="15" fill="rgb(239,186,37)" fg:x="140165" fg:w="19"/><text x="98.9995%" y="351.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (830 samples, 0.58%)</title><rect x="98.1887%" y="389" width="0.5848%" height="15" fill="rgb(205,221,10)" fg:x="139369" fg:w="830"/><text x="98.4387%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (44 samples, 0.03%)</title><rect x="98.8375%" y="357" width="0.0310%" height="15" fill="rgb(218,196,15)" fg:x="140290" fg:w="44"/><text x="99.0875%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.02%)</title><rect x="98.8523%" y="341" width="0.0162%" height="15" fill="rgb(218,196,35)" fg:x="140311" fg:w="23"/><text x="99.1023%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (21 samples, 0.01%)</title><rect x="98.8537%" y="325" width="0.0148%" height="15" fill="rgb(233,63,24)" fg:x="140313" fg:w="21"/><text x="99.1037%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (25 samples, 0.02%)</title><rect x="98.8967%" y="325" width="0.0176%" height="15" fill="rgb(225,8,4)" fg:x="140374" fg:w="25"/><text x="99.1467%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (81 samples, 0.06%)</title><rect x="98.8685%" y="357" width="0.0571%" height="15" fill="rgb(234,105,35)" fg:x="140334" fg:w="81"/><text x="99.1185%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (70 samples, 0.05%)</title><rect x="98.8763%" y="341" width="0.0493%" height="15" fill="rgb(236,21,32)" fg:x="140345" fg:w="70"/><text x="99.1263%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (16 samples, 0.01%)</title><rect x="98.9143%" y="325" width="0.0113%" height="15" fill="rgb(228,109,6)" fg:x="140399" fg:w="16"/><text x="99.1643%" y="335.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (186 samples, 0.13%)</title><rect x="98.8002%" y="373" width="0.1310%" height="15" fill="rgb(229,215,31)" fg:x="140237" fg:w="186"/><text x="99.0502%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (111 samples, 0.08%)</title><rect x="99.0496%" y="357" width="0.0782%" height="15" fill="rgb(221,52,54)" fg:x="140591" fg:w="111"/><text x="99.2996%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (279 samples, 0.20%)</title><rect x="98.9334%" y="373" width="0.1966%" height="15" fill="rgb(252,129,43)" fg:x="140426" fg:w="279"/><text x="99.1834%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (27 samples, 0.02%)</title><rect x="99.1299%" y="373" width="0.0190%" height="15" fill="rgb(248,183,27)" fg:x="140705" fg:w="27"/><text x="99.3799%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.01%)</title><rect x="99.1356%" y="357" width="0.0134%" height="15" fill="rgb(250,0,22)" fg:x="140713" fg:w="19"/><text x="99.3856%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.01%)</title><rect x="99.1489%" y="373" width="0.0113%" height="15" fill="rgb(213,166,10)" fg:x="140732" fg:w="16"/><text x="99.3989%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (91 samples, 0.06%)</title><rect x="99.1602%" y="373" width="0.0641%" height="15" fill="rgb(207,163,36)" fg:x="140748" fg:w="91"/><text x="99.4102%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (31 samples, 0.02%)</title><rect x="99.2243%" y="373" width="0.0218%" height="15" fill="rgb(208,122,22)" fg:x="140839" fg:w="31"/><text x="99.4743%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (674 samples, 0.47%)</title><rect x="98.7734%" y="389" width="0.4748%" height="15" fill="rgb(207,104,49)" fg:x="140199" fg:w="674"/><text x="99.0234%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (29 samples, 0.02%)</title><rect x="99.2581%" y="389" width="0.0204%" height="15" fill="rgb(248,211,50)" fg:x="140887" fg:w="29"/><text x="99.5081%" y="399.50"></text></g><g><title>binary_to_types`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (17 samples, 0.01%)</title><rect x="99.3053%" y="373" width="0.0120%" height="15" fill="rgb(217,13,45)" fg:x="140954" fg:w="17"/><text x="99.5553%" y="383.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::dead_variable_elimination::alive_vars_computation::update_alive_vars_by_def (86 samples, 0.06%)</title><rect x="99.2793%" y="389" width="0.0606%" height="15" fill="rgb(211,216,49)" fg:x="140917" fg:w="86"/><text x="99.5293%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (35 samples, 0.02%)</title><rect x="99.3399%" y="389" width="0.0247%" height="15" fill="rgb(221,58,53)" fg:x="141003" fg:w="35"/><text x="99.5899%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.03%)</title><rect x="99.3645%" y="389" width="0.0268%" height="15" fill="rgb(220,112,41)" fg:x="141038" fg:w="38"/><text x="99.6145%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (20 samples, 0.01%)</title><rect x="99.3913%" y="389" width="0.0141%" height="15" fill="rgb(236,38,28)" fg:x="141076" fg:w="20"/><text x="99.6413%" y="399.50"></text></g><g><title>binary_to_types`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,756 samples, 1.24%)</title><rect x="98.1887%" y="405" width="1.2371%" height="15" fill="rgb(227,195,22)" fg:x="139369" fg:w="1756"/><text x="98.4387%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (29 samples, 0.02%)</title><rect x="99.4054%" y="389" width="0.0204%" height="15" fill="rgb(214,55,33)" fg:x="141096" fg:w="29"/><text x="99.6554%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (19 samples, 0.01%)</title><rect x="99.4258%" y="373" width="0.0134%" height="15" fill="rgb(248,80,13)" fg:x="141125" fg:w="19"/><text x="99.6758%" y="383.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::dead_variable_elimination::alive_vars_computation::Context as cwe_checker_lib::analysis::backward_interprocedural_fixpoint::Context&gt;::update_call_stub (20 samples, 0.01%)</title><rect x="99.4258%" y="405" width="0.0141%" height="15" fill="rgb(238,52,6)" fg:x="141125" fg:w="20"/><text x="99.6758%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (20 samples, 0.01%)</title><rect x="99.4258%" y="389" width="0.0141%" height="15" fill="rgb(224,198,47)" fg:x="141125" fg:w="20"/><text x="99.6758%" y="399.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::dead_variable_elimination::alive_vars_computation::Context as cwe_checker_lib::analysis::backward_interprocedural_fixpoint::Context&gt;::update_callsite (16 samples, 0.01%)</title><rect x="99.4399%" y="405" width="0.0113%" height="15" fill="rgb(233,171,20)" fg:x="141145" fg:w="16"/><text x="99.6899%" y="415.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (16 samples, 0.01%)</title><rect x="99.4399%" y="389" width="0.0113%" height="15" fill="rgb(241,30,25)" fg:x="141145" fg:w="16"/><text x="99.6899%" y="399.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (16 samples, 0.01%)</title><rect x="99.4399%" y="373" width="0.0113%" height="15" fill="rgb(207,171,38)" fg:x="141145" fg:w="16"/><text x="99.6899%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.02%)</title><rect x="99.4568%" y="341" width="0.0169%" height="15" fill="rgb(234,70,1)" fg:x="141169" fg:w="24"/><text x="99.7068%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.01%)</title><rect x="99.4632%" y="325" width="0.0106%" height="15" fill="rgb(232,178,18)" fg:x="141178" fg:w="15"/><text x="99.7132%" y="335.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="99.4554%" y="357" width="0.0204%" height="15" fill="rgb(241,78,40)" fg:x="141167" fg:w="29"/><text x="99.7054%" y="367.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (49 samples, 0.03%)</title><rect x="99.4519%" y="373" width="0.0345%" height="15" fill="rgb(222,35,25)" fg:x="141162" fg:w="49"/><text x="99.7019%" y="383.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (53 samples, 0.04%)</title><rect x="99.4512%" y="389" width="0.0373%" height="15" fill="rgb(207,92,16)" fg:x="141161" fg:w="53"/><text x="99.7012%" y="399.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::dead_variable_elimination::alive_vars_computation::Context as cwe_checker_lib::analysis::backward_interprocedural_fixpoint::Context&gt;::update_jumpsite (58 samples, 0.04%)</title><rect x="99.4512%" y="405" width="0.0409%" height="15" fill="rgb(216,59,51)" fg:x="141161" fg:w="58"/><text x="99.7012%" y="415.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::analysis::backward_interprocedural_fixpoint::GeneralizedContext&lt;T&gt; as cwe_checker_lib::analysis::fixpoint::Context&gt;::update_edge (2,017 samples, 1.42%)</title><rect x="98.0717%" y="421" width="1.4210%" height="15" fill="rgb(213,80,28)" fg:x="139203" fg:w="2017"/><text x="98.3217%" y="431.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="99.5026%" y="405" width="0.0106%" height="15" fill="rgb(220,93,7)" fg:x="141234" fg:w="15"/><text x="99.7526%" y="415.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::set_node_value (24 samples, 0.02%)</title><rect x="99.5026%" y="421" width="0.0169%" height="15" fill="rgb(225,24,44)" fg:x="141234" fg:w="24"/><text x="99.7526%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.01%)</title><rect x="99.5216%" y="421" width="0.0134%" height="15" fill="rgb(243,74,40)" fg:x="141261" fg:w="19"/><text x="99.7716%" y="431.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::fixpoint::Computation&lt;T,N&gt;::compute_with_max_steps (2,702 samples, 1.90%)</title><rect x="97.6434%" y="437" width="1.9036%" height="15" fill="rgb(228,39,7)" fg:x="138595" fg:w="2702"/><text x="97.8934%" y="447.50">b..</text></g><g><title>binary_to_types`cwe_checker_lib::analysis::graph::get_program_cfg (25 samples, 0.02%)</title><rect x="99.5590%" y="437" width="0.0176%" height="15" fill="rgb(227,79,8)" fg:x="141314" fg:w="25"/><text x="99.8090%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::dead_variable_elimination::compute_alive_vars (3,346 samples, 2.36%)</title><rect x="97.2284%" y="453" width="2.3573%" height="15" fill="rgb(236,58,11)" fg:x="138006" fg:w="3346"/><text x="97.4784%" y="463.50">b..</text></g><g><title>binary_to_types`cwe_checker_lib::analysis::dead_variable_elimination::remove_dead_var_assignments (3,836 samples, 2.70%)</title><rect x="96.9071%" y="469" width="2.7026%" height="15" fill="rgb(249,63,35)" fg:x="137550" fg:w="3836"/><text x="97.1571%" y="479.50">bi..</text></g><g><title>binary_to_types`&lt;cwe_checker_lib::intermediate_representation::expression::Expression as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="99.6181%" y="437" width="0.0113%" height="15" fill="rgb(252,114,16)" fg:x="141398" fg:w="16"/><text x="99.8681%" y="447.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::intermediate_representation::term::Term&lt;T&gt; as core::clone::Clone&gt;::clone (30 samples, 0.02%)</title><rect x="99.6111%" y="453" width="0.0211%" height="15" fill="rgb(254,151,24)" fg:x="141388" fg:w="30"/><text x="99.8611%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::blk::_&lt;impl cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::intermediate_representation::blk::Blk&gt;&gt;::merge_def_assignments_to_same_var (64 samples, 0.05%)</title><rect x="99.6104%" y="469" width="0.0451%" height="15" fill="rgb(253,54,39)" fg:x="141387" fg:w="64"/><text x="99.8604%" y="479.50"></text></g><g><title>binary_to_types`&lt;cwe_checker_lib::intermediate_representation::expression::Expression as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="99.6604%" y="453" width="0.0148%" height="15" fill="rgb(243,25,45)" fg:x="141458" fg:w="21"/><text x="99.9104%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::Expression::input_vars (23 samples, 0.02%)</title><rect x="99.6935%" y="405" width="0.0162%" height="15" fill="rgb(234,134,9)" fg:x="141505" fg:w="23"/><text x="99.9435%" y="415.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::Expression::input_vars (38 samples, 0.03%)</title><rect x="99.6844%" y="421" width="0.0268%" height="15" fill="rgb(227,166,31)" fg:x="141492" fg:w="38"/><text x="99.9344%" y="431.50"></text></g><g><title>binary_to_types`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (61 samples, 0.04%)</title><rect x="99.6794%" y="437" width="0.0430%" height="15" fill="rgb(245,143,41)" fg:x="141485" fg:w="61"/><text x="99.9294%" y="447.50"></text></g><g><title>binary_to_types`alloc::vec::Vec&lt;T,A&gt;::retain (71 samples, 0.05%)</title><rect x="99.6773%" y="453" width="0.0500%" height="15" fill="rgb(238,181,32)" fg:x="141482" fg:w="71"/><text x="99.9273%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::Expression::substitute_input_var (20 samples, 0.01%)</title><rect x="99.7407%" y="453" width="0.0141%" height="15" fill="rgb(224,113,18)" fg:x="141572" fg:w="20"/><text x="99.9907%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::blk::_&lt;impl cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::intermediate_representation::blk::Blk&gt;&gt;::propagate_input_expressions (146 samples, 0.10%)</title><rect x="99.6555%" y="469" width="0.1029%" height="15" fill="rgb(240,229,28)" fg:x="141451" fg:w="146"/><text x="99.9055%" y="479.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::expression::trivial_operation_substitution::_&lt;impl cwe_checker_lib::intermediate_representation::expression::Expression&gt;::substitute_trivial_operations (16 samples, 0.01%)</title><rect x="99.7612%" y="469" width="0.0113%" height="15" fill="rgb(250,185,3)" fg:x="141601" fg:w="16"/><text x="100.0112%" y="479.50"></text></g><g><title>binary_to_types`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="99.7760%" y="453" width="0.0197%" height="15" fill="rgb(212,59,25)" fg:x="141622" fg:w="28"/><text x="100.0260%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::project::block_duplication_normalization::_&lt;impl cwe_checker_lib::intermediate_representation::term::Term&lt;cwe_checker_lib::intermediate_representation::blk::Blk&gt;&gt;::clone_with_tid_suffix (17 samples, 0.01%)</title><rect x="99.8041%" y="437" width="0.0120%" height="15" fill="rgb(221,87,20)" fg:x="141662" fg:w="17"/><text x="100.0541%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::project::block_duplication_normalization::_&lt;impl cwe_checker_lib::intermediate_representation::project::Project&gt;::duplicate_blocks_contained_in_several_subs (21 samples, 0.01%)</title><rect x="99.8020%" y="453" width="0.0148%" height="15" fill="rgb(213,74,28)" fg:x="141659" fg:w="21"/><text x="100.0520%" y="463.50"></text></g><g><title>binary_to_types`&lt;alloc::string::String as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="99.8295%" y="437" width="0.0134%" height="15" fill="rgb(224,132,34)" fg:x="141698" fg:w="19"/><text x="100.0795%" y="447.50"></text></g><g><title>binary_to_types`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.01%)</title><rect x="99.8563%" y="389" width="0.0148%" height="15" fill="rgb(222,101,24)" fg:x="141736" fg:w="21"/><text x="100.1063%" y="399.50"></text></g><g><title>binary_to_types`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (43 samples, 0.03%)</title><rect x="99.8429%" y="437" width="0.0303%" height="15" fill="rgb(254,142,4)" fg:x="141717" fg:w="43"/><text x="100.0929%" y="447.50"></text></g><g><title>binary_to_types`hashbrown::raw::RawTable&lt;T,A&gt;::insert (39 samples, 0.03%)</title><rect x="99.8457%" y="421" width="0.0275%" height="15" fill="rgb(230,229,49)" fg:x="141721" fg:w="39"/><text x="100.0957%" y="431.50"></text></g><g><title>binary_to_types`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (34 samples, 0.02%)</title><rect x="99.8492%" y="405" width="0.0240%" height="15" fill="rgb(238,70,47)" fg:x="141726" fg:w="34"/><text x="100.0992%" y="415.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::project::block_duplication_normalization::_&lt;impl cwe_checker_lib::intermediate_representation::project::Project&gt;::generate_tid_to_sub_tid_map (90 samples, 0.06%)</title><rect x="99.8295%" y="453" width="0.0634%" height="15" fill="rgb(231,160,17)" fg:x="141698" fg:w="90"/><text x="100.0795%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.02%)</title><rect x="99.8739%" y="437" width="0.0190%" height="15" fill="rgb(218,68,53)" fg:x="141761" fg:w="27"/><text x="100.1239%" y="447.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::project::block_duplication_normalization::make_block_to_sub_mapping_unique (188 samples, 0.13%)</title><rect x="99.7753%" y="469" width="0.1325%" height="15" fill="rgb(236,111,10)" fg:x="141621" fg:w="188"/><text x="100.0253%" y="479.50"></text></g><g><title>binary_to_types`cwe_checker_lib::analysis::graph::get_program_cfg (26 samples, 0.02%)</title><rect x="99.9133%" y="453" width="0.0183%" height="15" fill="rgb(224,34,41)" fg:x="141817" fg:w="26"/><text x="100.1633%" y="463.50"></text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::project::propagate_control_flow::propagate_control_flow (46 samples, 0.03%)</title><rect x="99.9077%" y="469" width="0.0324%" height="15" fill="rgb(241,118,19)" fg:x="141809" fg:w="46"/><text x="100.1577%" y="479.50"></text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::parse_project (89,259 samples, 62.89%)</title><rect x="37.0657%" y="501" width="62.8850%" height="15" fill="rgb(238,129,25)" fg:x="52611" fg:w="89259"/><text x="37.3157%" y="511.50">binary_to_types`binary_type_inference::inference_job::InferenceJob::parse_project</text></g><g><title>binary_to_types`cwe_checker_lib::intermediate_representation::project::Project::normalize (4,331 samples, 3.05%)</title><rect x="96.8994%" y="485" width="3.0513%" height="15" fill="rgb(238,22,31)" fg:x="137539" fg:w="4331"/><text x="97.1494%" y="495.50">bin..</text></g><g><title>binary_to_types`binary_type_inference::inference_job::InferenceJob::parse (89,288 samples, 62.91%)</title><rect x="37.0558%" y="517" width="62.9055%" height="15" fill="rgb(222,174,48)" fg:x="52597" fg:w="89288"/><text x="37.3058%" y="527.50">binary_to_types`binary_type_inference::inference_job::InferenceJob::parse</text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::blk::Blk&gt; (25 samples, 0.02%)</title><rect x="99.9641%" y="437" width="0.0176%" height="15" fill="rgb(206,152,40)" fg:x="141889" fg:w="25"/><text x="100.2141%" y="447.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;binary_type_inference::inference_job::InferenceJob&gt; (37 samples, 0.03%)</title><rect x="99.9620%" y="517" width="0.0261%" height="15" fill="rgb(218,99,54)" fg:x="141886" fg:w="37"/><text x="100.2120%" y="527.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::project::Project&gt; (35 samples, 0.02%)</title><rect x="99.9634%" y="501" width="0.0247%" height="15" fill="rgb(220,174,26)" fg:x="141888" fg:w="35"/><text x="100.2134%" y="511.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::program::Program&gt; (35 samples, 0.02%)</title><rect x="99.9634%" y="485" width="0.0247%" height="15" fill="rgb(245,116,9)" fg:x="141888" fg:w="35"/><text x="100.2134%" y="495.50"></text></g><g><title>binary_to_types`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.02%)</title><rect x="99.9634%" y="469" width="0.0247%" height="15" fill="rgb(209,72,35)" fg:x="141888" fg:w="35"/><text x="100.2134%" y="479.50"></text></g><g><title>binary_to_types`core::ptr::drop_in_place&lt;cwe_checker_lib::intermediate_representation::sub::Sub&gt; (35 samples, 0.02%)</title><rect x="99.9634%" y="453" width="0.0247%" height="15" fill="rgb(226,126,21)" fg:x="141888" fg:w="35"/><text x="100.2134%" y="463.50"></text></g><g><title>binary_to_types`main (141,926 samples, 99.99%)</title><rect x="0.0000%" y="597" width="99.9901%" height="15" fill="rgb(227,192,1)" fg:x="0" fg:w="141926"/><text x="0.2500%" y="607.50">binary_to_types`main</text></g><g><title>binary_to_types`std::rt::lang_start_internal (141,926 samples, 99.99%)</title><rect x="0.0000%" y="581" width="99.9901%" height="15" fill="rgb(237,180,29)" fg:x="0" fg:w="141926"/><text x="0.2500%" y="591.50">binary_to_types`std::rt::lang_start_internal</text></g><g><title>binary_to_types`std::rt::lang_start::_{{closure}} (141,926 samples, 99.99%)</title><rect x="0.0000%" y="565" width="99.9901%" height="15" fill="rgb(230,197,35)" fg:x="0" fg:w="141926"/><text x="0.2500%" y="575.50">binary_to_types`std::rt::lang_start::_{{closure}}</text></g><g><title>binary_to_types`std::sys_common::backtrace::__rust_begin_short_backtrace (141,926 samples, 99.99%)</title><rect x="0.0000%" y="549" width="99.9901%" height="15" fill="rgb(246,193,31)" fg:x="0" fg:w="141926"/><text x="0.2500%" y="559.50">binary_to_types`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>binary_to_types`binary_to_types::main (141,926 samples, 99.99%)</title><rect x="0.0000%" y="533" width="99.9901%" height="15" fill="rgb(241,36,4)" fg:x="0" fg:w="141926"/><text x="0.2500%" y="543.50">binary_to_types`binary_to_types::main</text></g><g><title>dyld`start (141,927 samples, 99.99%)</title><rect x="0.0000%" y="613" width="99.9908%" height="15" fill="rgb(241,130,17)" fg:x="0" fg:w="141927"/><text x="0.2500%" y="623.50">dyld`start</text></g><g><title>all (141,940 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(206,137,32)" fg:x="0" fg:w="141940"/><text x="0.2500%" y="639.50"></text></g></svg></svg>