
running 1 test
Cons for: {
    Tid {
        id: "sub_00101000",
        address: "00101000",
    },
}
Basic cons: entry_fresh_definition675 ⊑ instr_00101000_1_RSP.store.σ64@0
instr_00101000_1_RSP.load.σ64@0 ⊑ instr_00101001_0_RAX
instr_00101000_1_RSP.store.σ64@0 ⊑ sub_00101000@RSP.σ64@-8
instr_00101000_1_RSP.+8 ⊑ instr_00101001_1_RSP
instr_00101001_0_RAX ⊑ sub_00101000.out
instr_00101001_1_RSP.load.σ64@0 ⊑ instr_00101002_0_RIP
instr_00101001_1_RSP.+8 ⊑ instr_00101002_1_RSP
sub_00101000.in_0 ⊑ entry_fresh_definition682
sub_00101000@RSP.σ64@-8 ⊑ instr_00101000_1_RSP.load.σ64@0
sub_00101000@RSP.σ64@0 ⊑ instr_00101001_1_RSP.load.σ64@0
τ1 ⊑ instr_00101000_1_RSP
Add(entry_fresh_definition679,τ0,τ1)

Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00101010",
        address: "00101010",
    },
}
Basic cons: instr_00101010_0_load0_$load_temp0 ⊑ instr_00101010_1_RSP.store.σ64@0
instr_00101010_1_RSP.store.σ64@0 ⊑ sub_00101010@RSP.σ64@-8
τ2.load.σ64@0 ⊑ instr_00101010_0_load0_$load_temp0
τ4 ⊑ instr_00101010_1_RSP
τ5.load.σ64@0 ⊑ instr_00101016_0_load_$load_temp0
Add(entry_fresh_definition814,τ3,τ4)

Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00105068",
        address: "00105068",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00101100",
        address: "00101100",
    },
}
Basic cons: instr_001010b0_0_RAX ⊑ sub_00101100.out
instr_001010e3_0_RDI.load.σ64@0 ⊑ instr_00101104_0_$Uc000
instr_001010e3_0_RDI.+8 ⊑ instr_00101107_1_RDX
instr_001010f1_2@RSP ⊑ instr_001010e3_0_RDI.load.σ64@0
instr_00101104_0_$Uc000 ⊑ instr_00101104_1_RSI
int ⊑ instr_0010110b_2_R9
sub_00101100.in_0 ⊑ instr_001010e3_0_RDI
τ10 ⊑ instr_0010110b_9_PF
τ11 ⊑ instr_0010110e_0_R8
τ12 ⊑ instr_00101115_0_RCX
τ13 ⊑ instr_0010111c_0_RDI
τ6 ⊑ instr_0010110b_0_CF
τ7 ⊑ instr_0010110b_1_OF
τ8 ⊑ instr_0010110b_4_SF
τ9 ⊑ instr_0010110b_5_ZF

Diff 
Final 
Cons for: {
    Tid {
        id: "sub_001010e0",
        address: "001010e0",
    },
}
Basic cons: entry_fresh_definition949 ⊑ instr_001010e3_0_RDI
instr_001010b0_0_sub_001010e0_RAX ⊑ sub_001010e0.out
instr_001010e3_0_RDI ⊑ sub_00101100:blk_001010e0.in_0
instr_001010f1_0_RSP.store.σ64@0 ⊑ sub_001010e0@RSP
instr_00101104_0_sub_001010e0_$Uc000 ⊑ instr_00101104_1_sub_001010e0_RSI
instr_0010111c_0_RDI.load.σ64@0 ⊑ instr_00101104_0_sub_001010e0_$Uc000
instr_0010111c_0_RDI.+8 ⊑ instr_00101107_1_sub_001010e0_RDX
int ⊑ instr_0010110b_2_sub_001010e0_R9
sub_00101100:blk_001010e0.out ⊑ instr_001010f1_2_RAX
τ14 ⊑ instr_001010e0_2_RBP
τ15 ⊑ instr_001010e6_0_RSI
τ16 ⊑ instr_001010ed_0_CF
τ17 ⊑ instr_001010ed_1_OF
τ18 ⊑ instr_001010ed_2_RSP
τ19 ⊑ instr_001010ed_3_SF
τ20 ⊑ instr_001010ed_4_ZF
τ21 ⊑ instr_001010ed_8_PF
τ23 ⊑ instr_001010f1_0_RSP
τ24 ⊑ instr_001010f1_0_RSP.store.σ64@0
τ25 ⊑ instr_0010110b_0_sub_001010e0_CF
τ26 ⊑ instr_0010110b_1_sub_001010e0_OF
τ27 ⊑ instr_0010110b_4_sub_001010e0_SF
τ28 ⊑ instr_0010110b_5_sub_001010e0_ZF
τ29 ⊑ instr_0010110b_9_sub_001010e0_PF
τ30 ⊑ instr_0010110e_0_sub_001010e0_R8
τ31 ⊑ instr_00101115_0_sub_001010e0_RCX
τ32 ⊑ instr_0010111c_0_sub_001010e0_RDI
Add(instr_001010ed_2_RSP,τ22,τ23)

Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00105048",
        address: "00105048",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00101130",
        address: "00101130",
    },
}
Basic cons: instr_00101137_0_RAX ⊑ sub_00101130.out
instr_00101143_0_RAX ⊑ sub_00101130.out
instr_001011c7_0_RSP.load.σ64@0 ⊑ instr_00101158_0_RIP
instr_001011c7_0_RSP.+8 ⊑ instr_00101158_1_RSP
sub_00101130@RSP.σ64@0 ⊑ instr_001011c7_0_RSP.load.σ64@0
τ33 ⊑ instr_00101130_0_RDI
τ34 ⊑ instr_00101137_0_RAX
τ35 ⊑ instr_0010113e_0_CF
τ36 ⊑ instr_0010113e_1_OF
τ37 ⊑ instr_0010113e_3_SF
τ38 ⊑ instr_0010113e_4_ZF
τ39 ⊑ instr_0010113e_8_PF

Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00105030",
        address: "00105030",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00101160",
        address: "00101160",
    },
}
Basic cons: entry_fresh_definition1219.load.σ64@0 ⊑ instr_00101198_0_RIP
entry_fresh_definition1219.+8 ⊑ instr_00101198_1_RSP
instr_00101178_2_RAX ⊑ sub_00101160.out
instr_00101184_0_RAX ⊑ sub_00101160.out
sub_00101160@RSP.σ64@0 ⊑ entry_fresh_definition1219.load.σ64@0
τ40 ⊑ instr_00101160_0_RDI
τ41 ⊑ instr_00101178_2_RAX
τ42 ⊑ instr_0010117f_2_CF
τ43 ⊑ instr_0010117f_3_OF
τ44 ⊑ instr_0010117f_4_RSI
τ45 ⊑ instr_0010117f_5_SF
τ46 ⊑ instr_0010117f_6_ZF
τ47 ⊑ instr_0010117f_10_PF

Diff 
Final 
Cons for: {
    Tid {
        id: "sub_001010d0",
        address: "001010d0",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_001011a0",
        address: "001011a0",
    },
}
Basic cons: entry_fresh_definition1080 ⊑ sub_001011a0.out
entry_fresh_definition1084.load.σ64@0 ⊑ instr_001011d8_0_RIP
entry_fresh_definition1084.+8 ⊑ instr_001011d8_1_RSP
entry_fresh_definition1085 ⊑ instr_001011ad_1_RSP.store.σ64@0
instr_00101158_1_RSP ⊑ τ76
instr_00101158_1_RSP ⊑ τ77
instr_001011ad_1_RSP ⊑ instr_001011b6_0_RBP
instr_001011ad_1_RSP ⊑ τ70
instr_001011ad_1_RSP.store.σ64@0 ⊑ sub_001011a0@RSP.σ64@-8
instr_001011bb_0_load0_$load_temp0 ⊑ instr_001011bb_0_RDI
instr_001011c2_0_RSP ⊑ τ70
instr_001011c2_0_RSP.store.σ64@0 ⊑ sub_001011a0@RSP.σ64@-16
instr_001011c7_0_RSP ⊑ τ76
instr_001011c7_0_RSP ⊑ τ77
instr_001011c7_0_RSP.store.σ64@0 ⊑ sub_001011a0@RSP.σ64@-16
instr_001011c7_2_RAX ⊑ sub_001011a0.out
instr_001011d3_1_RSP.load.σ64@0 ⊑ instr_001011d4_0_RIP
instr_001011d3_1_RSP.+8 ⊑ instr_001011d4_1_RSP
sub_00101130:blk_001011c7.out ⊑ instr_001011c7_2_RAX
sub_001011a0@RSP.σ64@-8 ⊑ τ76.load.σ64@0
sub_001011a0@RSP.σ64@0 ⊑ entry_fresh_definition1084.load.σ64@0
sub_001011a0@RSP.σ64@0 ⊑ instr_001011d3_1_RSP.load.σ64@0
τ48.load.σ8@0 ⊑ instr_001011a4_0_load0_$load_temp0
τ49 ⊑ instr_001011a4_0_CF
τ50.load.σ8@0 ⊑ instr_001011a4_1_load0_$load_temp0
τ51 ⊑ instr_001011a4_1_OF
τ52.load.σ8@0 ⊑ instr_001011a4_2_load0_$load_temp0
τ53 ⊑ instr_001011a4_3_SF
τ54 ⊑ instr_001011a4_4_ZF
τ55 ⊑ instr_001011a4_8_PF
τ57 ⊑ instr_001011ad_1_RSP
τ58.load.σ64@0 ⊑ instr_001011ae_0_load0_$load_temp0
τ59 ⊑ instr_001011ae_0_CF
τ60.load.σ64@0 ⊑ instr_001011ae_1_load0_$load_temp0
τ61 ⊑ instr_001011ae_1_OF
τ62.load.σ64@0 ⊑ instr_001011ae_2_load0_$load_temp0
τ63 ⊑ instr_001011ae_3_SF
τ64 ⊑ instr_001011ae_4_ZF
τ65 ⊑ instr_001011ae_8_PF
τ66.load.σ64@0 ⊑ instr_001011bb_0_load0_$load_temp0
τ68 ⊑ instr_001011c2_0_RSP
τ69 ⊑ instr_001011c2_0_RSP.store.σ64@0
τ72 ⊑ instr_001011c7_0_RSP
τ73 ⊑ instr_001011c7_0_RSP.store.σ64@0
τ75 ⊑ τ74.store.σ8@0
τ76.load.σ64@0 ⊑ instr_001011d3_0_RBP
τ77.+8 ⊑ instr_001011d3_1_RSP
Add(entry_fresh_definition1084,τ56,τ57)
Add(instr_001011ad_1_RSP,τ67,τ68)
Add(τ70,τ71,τ72)

Diff 
Final sub_00101130:blk_001011c7.out ⊑ sub_001011a0.out

Cons for: {
    Tid {
        id: "sub_001011e0",
        address: "001011e0",
    },
}
Basic cons: instr_001011e4_0_RAX ⊑ sub_001011e0.out
sub_00101160:blk_001011e4.out ⊑ instr_001011e4_0_RAX

Diff 
Final sub_00101160:blk_001011e4.out ⊑ sub_001011e0.out

Cons for: {
    Tid {
        id: "sub_00101070",
        address: "00101070",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00101050",
        address: "00101050",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_001011e9",
        address: "001011e9",
    },
}
Basic cons: entry_fresh_definition1372.load.σ64@40 ⊑ instr_001011fd_1_$Uc000
entry_fresh_definition1372.load.σ64@40 ⊑ instr_0010127d_3_$Uc000
instr_001011ed_1_RSP ⊑ instr_001011ee_0_RBP
instr_001011ed_1_RSP.store.σ64@0 ⊑ sub_001011e9@RSP.σ64@-8
instr_001011ee_0_RBP ⊑ instr_0010128d_0_RSP
instr_001011ee_0_RBP ⊑ τ81
instr_001011ee_0_RBP.load.σ64@-32 ⊑ instr_0010126f_1_$Uc000
instr_001011ee_0_RBP.load.σ64@-32 ⊑ instr_0010126f_3_$Uc000
instr_001011ee_0_RBP.load.σ64@-32 ⊑ instr_0010126f_5_$Uc000
instr_001011ee_0_RBP.load.σ64@-32 ⊑ instr_00101275_1_$Uc000
instr_001011ee_0_RBP.load.σ64@-24 ⊑ instr_0010123c_1_$Uc000
instr_001011ee_0_RBP.load.σ64@-24 ⊑ instr_00101257_1_$Uc000
instr_001011ee_0_RBP.load.σ8@-13 ⊑ instr_00101243_1_$Ubd80
instr_001011ee_0_RBP.load.σ8@-13 ⊑ instr_00101249_1_$Ubd80
instr_001011ee_0_RBP.load.σ32@-12 ⊑ instr_00101231_1_$Ubf00
instr_001011ee_0_RBP.load.σ32@-12 ⊑ instr_00101236_1_$Ubf00
instr_001011ee_0_RBP.load.σ32@-12 ⊑ instr_00101251_1_$Ubf00
instr_001011ee_0_RBP.load.σ32@-12 ⊑ instr_00101261_1_$Ubf00
instr_001011ee_0_RBP.load.σ32@-12 ⊑ instr_00101266_10_$Ubf80
instr_001011ee_0_RBP.load.σ32@-12 ⊑ instr_00101266_12_$Ubf80
instr_001011ee_0_RBP.load.σ32@-12 ⊑ instr_00101266_1_$Ubf80
instr_001011ee_0_RBP.load.σ32@-12 ⊑ instr_00101266_3_$Ubf80
instr_001011ee_0_RBP.load.σ32@-12 ⊑ instr_00101266_5_$Ubf80
instr_001011ee_0_RBP.load.σ32@-12 ⊑ instr_00101266_8_$Ubf80
instr_001011ee_0_RBP.load.σ32@-12 ⊑ instr_0010126a_1_$Ubf00
instr_001011ee_0_RBP.load.σ64@-8 ⊑ instr_00101279_1_$Uc000
instr_001011ee_0_RBP.load.σ64@0 ⊑ instr_0010128d_1_RBP
instr_001011ee_0_RBP.store.σ64@-32 ⊑ sub_001011e9@RSP.σ64@-40
instr_001011ee_0_RBP.store.σ64@-24 ⊑ sub_001011e9@RSP.σ64@-32
instr_001011ee_0_RBP.store.σ32@-12 ⊑ sub_001011e9@RSP.σ32@-20
instr_001011ee_0_RBP.store.σ64@-8 ⊑ sub_001011e9@RSP.σ64@-16
instr_001011ee_0_RBP.+-13 ⊑ instr_00101215_1_RAX
instr_001011ee_0_RBP.+-13 ⊑ instr_0010121e_0_RSI
instr_001011f1_2_RSP ⊑ τ108
instr_001011f1_2_RSP ⊑ τ89
instr_001011fd_1_$Uc000 ⊑ instr_00101206_1_$Uc000
instr_00101206_1_$Uc000 ⊑ instr_001011ee_0_RBP.store.σ64@-8
instr_00101219_0_RDX ⊑ sub_00101070:blk_00101215.in_2
instr_0010121e_0_RSI ⊑ sub_00101070:blk_00101215.in_1
instr_00101221_0_RDI ⊑ sub_00101070:blk_00101215.in_0
instr_00101226_0_RSP ⊑ τ108
instr_00101226_0_RSP ⊑ τ89
instr_00101226_0_RSP.store.σ64@0 ⊑ sub_001011e9@RSP.σ64@-48
instr_00101231_2_RAX ⊑ sub_001011e9.out
instr_00101243_1_$Ubd80 ⊑ τ94.store.σ8@0
instr_00101261_2_RAX ⊑ sub_001011e9.out
instr_00101266_5_$Ubf80.+1 ⊑ instr_00101266_6_$Ubf80
instr_00101266_6_$Ubf80 ⊑ instr_001011ee_0_RBP.store.σ32@-12
instr_00101275_1_$Uc000 ⊑ instr_00101275_2_RAX
instr_00101275_2_RAX ⊑ sub_001011e9.out
instr_00101279_1_$Uc000 ⊑ instr_00101279_2_RCX
instr_00101288_0_RSP.store.σ64@0 ⊑ sub_001011e9@RSP.σ64@-48
instr_0010128d_0_RSP.+8 ⊑ instr_0010128d_2_RSP
instr_0010128d_1_RBP ⊑ τ81
instr_0010128d_2_RSP.load.σ64@0 ⊑ instr_0010128e_0_RIP
instr_0010128d_2_RSP.+8 ⊑ instr_0010128e_1_RSP
instr_00101294_0_RBP ⊑ τ81
instr_001012be_0_RSI ⊑ τ85
instr_001012c3_0_RDI ⊑ τ84
instr_001012c6_0_RSP ⊑ τ78
instr_001012eb_1_RBP ⊑ τ81
instr_00101355_0_RSI ⊑ τ85
instr_00101358_0_RDI ⊑ τ84
instr_0010135b_0_RSP ⊑ τ78
instr_001013cc_0_RSI ⊑ τ85
instr_001013cf_0_RDI ⊑ τ84
instr_001013d2_0_RSP ⊑ τ78
int ⊑ instr_00101231_2_RAX
int ⊑ instr_00101254_0_RDX
int ⊑ instr_00101261_2_RAX
sub_001011e9.in_0 ⊑ instr_001012c3_0_RDI
sub_001011e9.in_0 ⊑ instr_00101358_0_RDI
sub_001011e9.in_0 ⊑ instr_001013cf_0_RDI
sub_001011e9.in_1 ⊑ instr_001012be_0_RSI
sub_001011e9.in_1 ⊑ instr_00101355_0_RSI
sub_001011e9.in_1 ⊑ instr_001013cc_0_RSI
sub_001011e9@RSP.σ64@-40 ⊑ instr_001011ee_0_RBP.load.σ64@-32
sub_001011e9@RSP.σ64@-32 ⊑ instr_001011ee_0_RBP.load.σ64@-24
sub_001011e9@RSP.σ8@-21 ⊑ instr_001011ee_0_RBP.load.σ8@-13
sub_001011e9@RSP.σ32@-20 ⊑ instr_001011ee_0_RBP.load.σ32@-12
sub_001011e9@RSP.σ64@-16 ⊑ instr_001011ee_0_RBP.load.σ64@-8
sub_001011e9@RSP.σ64@-8 ⊑ instr_001011ee_0_RBP.load.σ64@0
sub_001011e9@RSP.σ64@0 ⊑ instr_0010128d_2_RSP.load.σ64@0
τ100 ⊑ instr_0010126f_8_ZF
τ101 ⊑ instr_0010126f_12_PF
τ102 ⊑ instr_0010127d_1_CF
τ103 ⊑ instr_0010127d_2_OF
τ104 ⊑ instr_0010127d_4_RCX
τ105 ⊑ instr_0010127d_5_SF
τ106 ⊑ instr_0010127d_6_ZF
τ107 ⊑ instr_0010127d_10_PF
τ110 ⊑ instr_00101288_0_RSP
τ111 ⊑ instr_00101288_0_RSP.store.σ64@0
τ80 ⊑ instr_001011ed_1_RSP
τ81 ⊑ instr_001011ed_1_RSP.store.σ64@0
τ83 ⊑ instr_001011f1_2_RSP
τ84 ⊑ instr_001011ee_0_RBP.store.σ64@-24
τ85 ⊑ instr_001011ee_0_RBP.store.σ64@-32
τ86 ⊑ instr_001011ee_0_RBP.store.σ32@-12
τ87 ⊑ instr_00101219_0_RDX
τ88 ⊑ instr_00101221_0_RDI
τ91 ⊑ instr_00101226_0_RSP
τ92 ⊑ instr_00101226_0_RSP.store.σ64@0
τ93 ⊑ instr_00101240_2_RDX
τ94.store.σ8@0 ⊑ instr_001012c6_2@RSP
τ94.store.σ8@0 ⊑ instr_0010132a_2@RAX
τ94.store.σ8@0 ⊑ instr_001013a1_2@RAX
τ95.store.σ8@0 ⊑ instr_001012c6_2@RSP
τ95.store.σ8@0 ⊑ instr_0010132a_2@RAX
τ95.store.σ8@0 ⊑ instr_001013a1_2@RAX
τ96 ⊑ τ95.store.σ8@0
τ97 ⊑ instr_0010126f_2_CF
τ98 ⊑ instr_0010126f_4_OF
τ99 ⊑ instr_0010126f_7_SF
Add(instr_001011ed_1_RSP,τ82,τ83)
Add(instr_00101257_1_$Uc000,int,τ95)
Add(int,instr_0010123c_1_$Uc000,τ93)
Add(int,instr_0010123c_1_$Uc000,τ94)
Add(τ108,τ109,τ110)
Add(τ78,τ79,τ80)
Add(τ89,τ90,τ91)

Diff 
Final int ⊑ sub_001011e9.out
sub_001011e9.in_1 ⊑ sub_001011e9.out

Cons for: {
    Tid {
        id: "sub_001010a0",
        address: "001010a0",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_0010128f",
        address: "0010128f",
    },
}
Basic cons: entry_fresh_definition1372.load.σ64@40 ⊑ instr_0010129b_1_$Uc000
entry_fresh_definition1372.load.σ64@40 ⊑ instr_001012db_3_$Uc000
instr_001011ee_0_RBP ⊑ τ129
instr_001011ee_0_RBP ⊑ τ130
instr_001011ee_0_RBP ⊑ τ135
instr_001011ee_0_RBP ⊑ τ145
instr_001011ee_0_RBP ⊑ τ146
instr_00101288_0_RSP ⊑ τ131
instr_0010128d_1_RBP ⊑ τ129
instr_0010128d_1_RBP ⊑ τ130
instr_0010128d_1_RBP ⊑ τ135
instr_0010128d_1_RBP ⊑ τ145
instr_0010128d_1_RBP ⊑ τ146
instr_0010128e_1_RSP ⊑ τ131
instr_00101293_1_RSP ⊑ instr_00101294_0_RBP
instr_00101293_1_RSP.store.σ64@0 ⊑ sub_0010128f@RSP.σ64@-8
instr_00101294_0_RBP.store.σ64@-32 ⊑ sub_0010128f@RSP.σ64@-40
instr_00101294_0_RBP.store.σ64@-24 ⊑ sub_0010128f@RSP.σ64@-32
instr_00101294_0_RBP.store.σ64@-8 ⊑ sub_0010128f@RSP.σ64@-16
instr_00101294_0_RBP.+-32 ⊑ instr_001012ba_1_RAX
instr_00101294_0_RBP.+-32 ⊑ instr_001012c3_0_RDI
instr_0010129b_1_$Uc000 ⊑ instr_001012a4_1_$Uc000
instr_001012a4_1_$Uc000 ⊑ instr_00101294_0_RBP.store.σ64@-8
instr_001012be_0_RSI ⊑ sub_001011e9:blk_00101293.in_1
instr_001012c3_0_RDI ⊑ sub_001011e9:blk_00101293.in_0
instr_001012c6_0_RSP.store.σ64@0 ⊑ sub_0010128f@RSP.σ64@-48
instr_001012cf_0_RDI ⊑ sub_001010a0:blk_001012cb.in_0
instr_001012d2_0_RSP.store.σ64@0 ⊑ sub_0010128f@RSP.σ64@-48
instr_001012d2_2_RAX ⊑ sub_0010128f.out
instr_001012d7_1_$Uc000 ⊑ instr_001012d7_2_RDX
instr_001012e6_0_RSP.store.σ64@0 ⊑ sub_0010128f@RSP.σ64@-48
instr_001012eb_0_RSP.+8 ⊑ instr_001012eb_2_RSP
instr_001012eb_2_RSP.load.σ64@0 ⊑ instr_001012ec_0_RIP
instr_001012eb_2_RSP.+8 ⊑ instr_001012ec_1_RSP
instr_001012f2_0_RBP ⊑ τ115
instr_00101313_0_RSP ⊑ τ112
instr_00101369_0_RBP ⊑ τ115
instr_0010138a_0_RSP ⊑ τ112
instr_001014f9_0_RBP ⊑ τ115
instr_001018e5_0_RSP ⊑ τ112
int ⊑ instr_001012a8_2_RAX
sub_001011e9:blk_00101293.out ⊑ instr_001012c6_2_RAX
sub_0010128f@RSP.σ64@-16 ⊑ τ135.load.σ64@-8
sub_0010128f@RSP.σ64@-8 ⊑ τ146.load.σ64@0
sub_0010128f@RSP.σ64@0 ⊑ instr_001012eb_2_RSP.load.σ64@0
τ114 ⊑ instr_00101293_1_RSP
τ115 ⊑ instr_00101293_1_RSP.store.σ64@0
τ117 ⊑ instr_00101297_2_RSP
τ118 ⊑ instr_001012a8_0_CF
τ119 ⊑ instr_001012a8_1_OF
τ120 ⊑ instr_001012a8_4_SF
τ121 ⊑ instr_001012a8_5_ZF
τ122 ⊑ instr_001012a8_9_PF
τ123 ⊑ instr_00101294_0_RBP.store.σ64@-32
τ124 ⊑ instr_00101294_0_RBP.store.σ64@-24
τ125 ⊑ instr_001012be_0_RSI
τ127 ⊑ instr_001012c6_0_RSP
τ128 ⊑ instr_001012c6_0_RSP.store.σ64@0
τ129.+-32 ⊑ instr_001012cb_1_RAX
τ130.+-32 ⊑ instr_001012cf_0_RDI
τ133 ⊑ instr_001012d2_0_RSP
τ134 ⊑ instr_001012d2_0_RSP.store.σ64@0
τ135.load.σ64@-8 ⊑ instr_001012d7_1_$Uc000
τ136 ⊑ instr_001012db_1_CF
τ137 ⊑ instr_001012db_2_OF
τ138 ⊑ instr_001012db_4_RDX
τ139 ⊑ instr_001012db_5_SF
τ140 ⊑ instr_001012db_6_ZF
τ141 ⊑ instr_001012db_10_PF
τ143 ⊑ instr_001012e6_0_RSP
τ144 ⊑ instr_001012e6_0_RSP.store.σ64@0
τ145 ⊑ instr_001012eb_0_RSP
τ146.load.σ64@0 ⊑ instr_001012eb_1_RBP
Add(instr_00101293_1_RSP,τ116,τ117)
Add(instr_00101297_2_RSP,τ126,τ127)
Add(instr_001012d2_0_RSP,τ142,τ143)
Add(τ112,τ113,τ114)
Add(τ131,τ132,τ133)

Int instr_001012a8_2_RAX
Int int
Int τ116
Diff τ116 ⊑ int
τ117 ⊑ instr_00101293_1_RSP

Final 
Cons for: {
    Tid {
        id: "sub_00101060",
        address: "00101060",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00101020",
        address: "00101020",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_001012ed",
        address: "001012ed",
    },
}
Basic cons: instr_001011ee_0_RBP ⊑ τ169
instr_001011ee_0_RBP ⊑ τ175
instr_001011ee_0_RBP ⊑ τ181
instr_001011ee_0_RBP ⊑ τ182
instr_001011ee_0_RBP ⊑ τ186
instr_001011ee_0_RBP ⊑ τ187
instr_0010128d_1_RBP ⊑ τ169
instr_0010128d_1_RBP ⊑ τ175
instr_0010128d_1_RBP ⊑ τ181
instr_0010128d_1_RBP ⊑ τ182
instr_0010128d_1_RBP ⊑ τ186
instr_0010128d_1_RBP ⊑ τ187
instr_001012e6_0_RSP ⊑ τ171
instr_001012eb_1_RBP ⊑ τ169
instr_001012eb_1_RBP ⊑ τ175
instr_001012eb_1_RBP ⊑ τ181
instr_001012eb_1_RBP ⊑ τ182
instr_001012ec_1_RSP ⊑ τ171
instr_001012f1_1_RSP ⊑ instr_001012f2_0_RBP
instr_001012f1_1_RSP.store.σ64@0 ⊑ sub_001012ed@RSP.σ64@-8
instr_001012f2_0_RBP.store.σ64@-24 ⊑ sub_001012ed@RSP.σ64@-32
instr_001012fd_0_RDI ⊑ sub_00101020:blk_001012f1.in_0
instr_00101309_0_RSP.store.σ64@0 ⊑ sub_001012ed@RSP.σ64@-48
instr_00101313_0_RSP.store.σ64@0 ⊑ sub_001012ed@RSP.σ64@-48
instr_00101318_0_RAX ⊑ τ168.store.σ64@-8
instr_0010131e_1_$Uc000 ⊑ instr_0010131e_2_RAX
instr_0010131e_1_$Uc000 ⊑ instr_00101322_0_RSI
instr_00101322_0_RSI ⊑ sub_00101060:blk_00101318.in_1
instr_00101325_0_RDI ⊑ sub_00101060:blk_00101318.in_0
instr_0010132a_0_RSP.store.σ64@0 ⊑ sub_001012ed@RSP.σ64@-48
instr_0010132a_2_RAX ⊑ instr_0010132f_0_RDX
instr_0010132f_0_RDX ⊑ instr_00101332_2_RAX.store.σ64@0
instr_00101332_1_$Uc000 ⊑ instr_00101332_2_RAX
instr_00101332_2_RAX.store.σ64@0 ⊑ instr_001015c1_2@RAX.σ64@0
instr_00101332_2_RAX.store.σ64@0 ⊑ instr_001016a5_2@RSP.σ64@24
instr_00101332_2_RAX.store.σ64@0 ⊑ instr_00101756_2@RSP.σ64@32
instr_00101339_0_RDI ⊑ sub_00101020:blk_0010132f.in_0
instr_00101345_0_RSP.store.σ64@0 ⊑ sub_001012ed@RSP.σ64@-48
instr_0010134a_1_$Uc000.load.σ64@0 ⊑ instr_0010134e_0_$Uc000
instr_0010134e_0_$Uc000 ⊑ instr_0010134e_1_RAX
instr_0010134e_1_RAX ⊑ instr_00101358_0_RDI
instr_00101351_1_$Uc000 ⊑ instr_00101351_2_RDX
instr_00101351_1_$Uc000 ⊑ instr_00101355_0_RSI
instr_00101355_0_RSI ⊑ sub_001011e9:blk_0010134a.in_1
instr_00101358_0_RDI ⊑ sub_001011e9:blk_0010134a.in_0
instr_0010135b_0_RSP.store.σ64@0 ⊑ sub_001012ed@RSP.σ64@-48
instr_00101360_0_RAX ⊑ sub_001012ed.out
instr_00101362_0_RSP.+8 ⊑ instr_00101362_2_RSP
instr_00101362_2_RSP.load.σ64@0 ⊑ instr_00101363_0_RIP
instr_00101362_2_RSP.+8 ⊑ instr_00101363_1_RSP
instr_001015ac_0_RBP ⊑ τ150
instr_001015c1_2@RAX.σ64@0 ⊑ instr_0010134a_1_$Uc000.load.σ64@0
instr_001015ce_0_RDI ⊑ τ158
instr_001015d1_0_RSP ⊑ τ147
instr_0010167c_0_RBP ⊑ τ150
instr_001016a2_0_RDI ⊑ τ158
instr_001016a5_0_RSP ⊑ τ147
instr_001016a5_2@RSP.σ64@24 ⊑ instr_0010134a_1_$Uc000.load.σ64@0
instr_0010172d_0_RBP ⊑ τ150
instr_00101753_0_RDI ⊑ τ158
instr_00101756_0_RSP ⊑ τ147
instr_00101756_2@RSP.σ64@32 ⊑ instr_0010134a_1_$Uc000.load.σ64@0
int ⊑ instr_00101318_0_RAX
int ⊑ instr_00101360_0_RAX
sub_001011e9:blk_0010134a.out ⊑ instr_0010135b_2_RAX
sub_0010128f:blk_0010130e.out ⊑ instr_00101313_2_RAX
sub_001012ed.in_0 ⊑ instr_001015ce_0_RDI
sub_001012ed.in_0 ⊑ instr_001016a2_0_RDI
sub_001012ed.in_0 ⊑ instr_00101753_0_RDI
sub_001012ed@RSP.σ64@-32 ⊑ τ175.load.σ64@-24
sub_001012ed@RSP.σ64@-32 ⊑ τ181.load.σ64@-24
sub_001012ed@RSP.σ64@-16 ⊑ τ169.load.σ64@-8
sub_001012ed@RSP.σ64@-16 ⊑ τ182.load.σ64@-8
sub_001012ed@RSP.σ64@-8 ⊑ τ187.load.σ64@0
sub_001012ed@RSP.σ64@0 ⊑ instr_00101362_2_RSP.load.σ64@0
τ149 ⊑ instr_001012f1_1_RSP
τ150 ⊑ instr_001012f1_1_RSP.store.σ64@0
τ151 ⊑ instr_001012f5_0_CF
τ152 ⊑ instr_001012f5_1_OF
τ154 ⊑ instr_001012f5_2_RSP
τ155 ⊑ instr_001012f5_3_SF
τ156 ⊑ instr_001012f5_4_ZF
τ157 ⊑ instr_001012f5_8_PF
τ158 ⊑ instr_001012f2_0_RBP.store.σ64@-24
τ159 ⊑ instr_001012fd_0_RDI
τ160 ⊑ instr_00101304_0_RAX
τ162 ⊑ instr_00101309_0_RSP
τ163 ⊑ instr_00101309_0_RSP.store.σ64@0
τ164 ⊑ instr_0010130e_0_RAX
τ166 ⊑ instr_00101313_0_RSP
τ167 ⊑ instr_00101313_0_RSP.store.σ64@0
τ168 ⊑ instr_001011ee_0_RBP
τ168 ⊑ instr_0010128d_1_RBP
τ168 ⊑ instr_001012eb_1_RBP
τ168.store.σ64@-8 ⊑ sub_001012ed@RSP.σ64@-16
τ169.load.σ64@-8 ⊑ instr_0010131e_1_$Uc000
τ170 ⊑ instr_00101325_0_RDI
τ173 ⊑ instr_0010132a_0_RSP
τ174 ⊑ instr_0010132a_0_RSP.store.σ64@0
τ175.load.σ64@-24 ⊑ instr_00101332_1_$Uc000
τ176 ⊑ instr_00101339_0_RDI
τ177 ⊑ instr_00101340_0_RAX
τ179 ⊑ instr_00101345_0_RSP
τ180 ⊑ instr_00101345_0_RSP.store.σ64@0
τ181.load.σ64@-24 ⊑ instr_0010134a_1_$Uc000
τ182.load.σ64@-8 ⊑ instr_00101351_1_$Uc000
τ184 ⊑ instr_0010135b_0_RSP
τ185 ⊑ instr_0010135b_0_RSP.store.σ64@0
τ186 ⊑ instr_00101362_0_RSP
τ187.load.σ64@0 ⊑ instr_00101362_1_RBP
Add(instr_001012f1_1_RSP,τ153,τ154)
Add(instr_001012f5_2_RSP,τ161,τ162)
Add(instr_00101309_0_RSP,τ165,τ166)
Add(instr_0010132a_0_RSP,τ178,τ179)
Add(instr_00101345_0_RSP,τ183,τ184)
Add(τ147,τ148,τ149)
Add(τ171,τ172,τ173)

Int instr_00101318_0_RAX
Int instr_0010131e_1_$Uc000
Int instr_0010131e_2_RAX
Int instr_00101322_0_RSI
Int instr_00101351_1_$Uc000
Int instr_00101351_2_RDX
Int instr_00101355_0_RSI
Int instr_00101360_0_RAX
Int int
Int sub_00101060:blk_00101318.in_1
Int sub_001011e9:blk_0010134a.in_1
Int sub_001012ed.out
Int sub_001012ed@RSP.σ64@-16
Int τ153
Int τ168.store.σ64@-8
Int τ169.load.σ64@-8
Int τ182.load.σ64@-8
Diff τ153 ⊑ int
τ154 ⊑ instr_001012f1_1_RSP

Final int ⊑ sub_00101060:blk_00101318.in_1
int ⊑ sub_001011e9:blk_0010134a.in_1
int ⊑ sub_001012ed.out
sub_001012ed.in_0.load.σ64@0 ⊑ sub_001011e9:blk_0010134a.in_0

Cons for: {
    Tid {
        id: "sub_00101364",
        address: "00101364",
    },
}
Basic cons: instr_001011ee_0_RBP ⊑ τ207
instr_001011ee_0_RBP ⊑ τ213
instr_001011ee_0_RBP ⊑ τ219
instr_001011ee_0_RBP ⊑ τ220
instr_001011ee_0_RBP ⊑ τ224
instr_001011ee_0_RBP ⊑ τ225
instr_0010128d_1_RBP ⊑ τ207
instr_0010128d_1_RBP ⊑ τ213
instr_0010128d_1_RBP ⊑ τ219
instr_0010128d_1_RBP ⊑ τ220
instr_0010128d_1_RBP ⊑ τ224
instr_0010128d_1_RBP ⊑ τ225
instr_001012e6_0_RSP ⊑ τ209
instr_001012eb_1_RBP ⊑ τ207
instr_001012eb_1_RBP ⊑ τ213
instr_001012eb_1_RBP ⊑ τ219
instr_001012eb_1_RBP ⊑ τ220
instr_001012ec_1_RSP ⊑ τ209
instr_00101362_1_RBP ⊑ instr_00101368_1_RSP.store.σ64@0
instr_00101368_1_RSP ⊑ instr_00101369_0_RBP
instr_00101368_1_RSP.store.σ64@0 ⊑ sub_00101364@RSP.σ64@-8
instr_00101369_0_RBP.store.σ64@-24 ⊑ sub_00101364@RSP.σ64@-32
instr_00101374_0_RDI ⊑ sub_00101020:blk_00101368.in_0
instr_00101380_0_RSP.store.σ64@0 ⊑ sub_00101364@RSP.σ64@-48
instr_0010138a_0_RSP.store.σ64@0 ⊑ sub_00101364@RSP.σ64@-48
instr_0010138f_0_RAX ⊑ τ206.store.σ64@-8
instr_00101395_1_$Uc000 ⊑ instr_00101395_2_RAX
instr_00101395_1_$Uc000 ⊑ instr_00101399_0_RSI
instr_00101399_0_RSI ⊑ sub_00101060:blk_0010138f.in_1
instr_0010139c_0_RDI ⊑ sub_00101060:blk_0010138f.in_0
instr_001013a1_0_RSP.store.σ64@0 ⊑ sub_00101364@RSP.σ64@-48
instr_001013a1_2_RAX ⊑ instr_001013a6_0_RDX
instr_001013a6_0_RDX ⊑ instr_001013a9_2_RAX.store.σ64@0
instr_001013a9_1_$Uc000 ⊑ instr_001013a9_2_RAX
instr_001013a9_2_RAX.store.σ64@0 ⊑ instr_001015c1_2@RAX.σ64@8
instr_001013b0_0_RDI ⊑ sub_00101020:blk_001013a6.in_0
instr_001013bc_0_RSP.store.σ64@0 ⊑ sub_00101364@RSP.σ64@-48
instr_001013c1_1_$Uc000.load.σ64@0 ⊑ instr_001013c5_0_$Uc000
instr_001013c5_0_$Uc000 ⊑ instr_001013c5_1_RAX
instr_001013c5_1_RAX ⊑ instr_001013cf_0_RDI
instr_001013c8_1_$Uc000 ⊑ instr_001013c8_2_RDX
instr_001013c8_1_$Uc000 ⊑ instr_001013cc_0_RSI
instr_001013cc_0_RSI ⊑ sub_001011e9:blk_001013c1.in_1
instr_001013cf_0_RDI ⊑ sub_001011e9:blk_001013c1.in_0
instr_001013d2_0_RSP.store.σ64@0 ⊑ sub_00101364@RSP.σ64@-48
instr_001013d7_0_RAX ⊑ sub_00101364.out
instr_001013d9_0_RSP.+8 ⊑ instr_001013d9_2_RSP
instr_001013d9_2_RSP.load.σ64@0 ⊑ instr_001013da_0_RIP
instr_001013d9_2_RSP.+8 ⊑ instr_001013da_1_RSP
instr_001015c1_2@RAX.σ64@8 ⊑ instr_001013c1_1_$Uc000.load.σ64@0
instr_001015e6_0_RDI ⊑ instr_00101369_0_RBP.store.σ64@-24
int ⊑ instr_0010138f_0_RAX
int ⊑ instr_001013d7_0_RAX
sub_001011e9:blk_001013c1.out ⊑ instr_001013d2_2_RAX
sub_0010128f:blk_00101385.out ⊑ instr_0010138a_2_RAX
sub_00101364.in_0 ⊑ instr_001015e6_0_RDI
sub_00101364@RSP.σ64@-32 ⊑ τ213.load.σ64@-24
sub_00101364@RSP.σ64@-32 ⊑ τ219.load.σ64@-24
sub_00101364@RSP.σ64@-16 ⊑ τ207.load.σ64@-8
sub_00101364@RSP.σ64@-16 ⊑ τ220.load.σ64@-8
sub_00101364@RSP.σ64@-8 ⊑ τ225.load.σ64@0
sub_00101364@RSP.σ64@0 ⊑ instr_001013d9_2_RSP.load.σ64@0
τ189 ⊑ instr_00101368_1_RSP
τ190 ⊑ instr_0010136c_0_CF
τ191 ⊑ instr_0010136c_1_OF
τ193 ⊑ instr_0010136c_2_RSP
τ194 ⊑ instr_0010136c_3_SF
τ195 ⊑ instr_0010136c_4_ZF
τ196 ⊑ instr_0010136c_8_PF
τ197 ⊑ instr_00101374_0_RDI
τ198 ⊑ instr_0010137b_0_RAX
τ200 ⊑ instr_00101380_0_RSP
τ201 ⊑ instr_00101380_0_RSP.store.σ64@0
τ202 ⊑ instr_00101385_0_RAX
τ204 ⊑ instr_0010138a_0_RSP
τ205 ⊑ instr_0010138a_0_RSP.store.σ64@0
τ206 ⊑ instr_001011ee_0_RBP
τ206 ⊑ instr_0010128d_1_RBP
τ206 ⊑ instr_001012eb_1_RBP
τ206.store.σ64@-8 ⊑ sub_00101364@RSP.σ64@-16
τ207.load.σ64@-8 ⊑ instr_00101395_1_$Uc000
τ208 ⊑ instr_0010139c_0_RDI
τ211 ⊑ instr_001013a1_0_RSP
τ212 ⊑ instr_001013a1_0_RSP.store.σ64@0
τ213.load.σ64@-24 ⊑ instr_001013a9_1_$Uc000
τ214 ⊑ instr_001013b0_0_RDI
τ215 ⊑ instr_001013b7_0_RAX
τ217 ⊑ instr_001013bc_0_RSP
τ218 ⊑ instr_001013bc_0_RSP.store.σ64@0
τ219.load.σ64@-24 ⊑ instr_001013c1_1_$Uc000
τ220.load.σ64@-8 ⊑ instr_001013c8_1_$Uc000
τ222 ⊑ instr_001013d2_0_RSP
τ223 ⊑ instr_001013d2_0_RSP.store.σ64@0
τ224 ⊑ instr_001013d9_0_RSP
τ225.load.σ64@0 ⊑ instr_001013d9_1_RBP
Add(instr_00101368_1_RSP,τ192,τ193)
Add(instr_0010136c_2_RSP,τ199,τ200)
Add(instr_00101380_0_RSP,τ203,τ204)
Add(instr_001013a1_0_RSP,τ216,τ217)
Add(instr_001013bc_0_RSP,τ221,τ222)
Add(instr_001015e9_0_RSP,τ188,τ189)
Add(τ209,τ210,τ211)

Int instr_0010138f_0_RAX
Int instr_00101395_1_$Uc000
Int instr_00101395_2_RAX
Int instr_00101399_0_RSI
Int instr_001013c8_1_$Uc000
Int instr_001013c8_2_RDX
Int instr_001013cc_0_RSI
Int instr_001013d7_0_RAX
Int int
Int sub_00101060:blk_0010138f.in_1
Int sub_001011e9:blk_001013c1.in_1
Int sub_00101364.out
Int sub_00101364@RSP.σ64@-16
Int τ192
Int τ206.store.σ64@-8
Int τ207.load.σ64@-8
Int τ220.load.σ64@-8
Diff τ192 ⊑ int
τ193 ⊑ instr_00101368_1_RSP

Final int ⊑ sub_00101060:blk_0010138f.in_1
int ⊑ sub_001011e9:blk_001013c1.in_1
int ⊑ sub_00101364.out
sub_00101364.in_0.load.σ64@0 ⊑ sub_001011e9:blk_001013c1.in_0

Cons for: {
    Tid {
        id: "sub_001013db",
        address: "001013db",
    },
}
Basic cons: instr_0010132a_2@RAX ⊑ τ234.load.σ8@0
instr_001013d9_1_RBP ⊑ τ229
instr_001013df_1_RSP ⊑ instr_001013e0_0_RBP
instr_001013df_1_RSP.load.σ64@0 ⊑ instr_00101434_0_RBP
instr_001013df_1_RSP.store.σ64@-32 ⊑ sub_001013db@RSP.σ64@-40
instr_001013df_1_RSP.store.σ64@-24 ⊑ sub_001013db@RSP.σ64@-32
instr_001013df_1_RSP.store.σ32@-12 ⊑ sub_001013db@RSP.σ32@-20
instr_001013df_1_RSP.store.σ64@-8 ⊑ sub_001013db@RSP.σ64@-16
instr_001013df_1_RSP.store.σ64@0 ⊑ sub_001013db@RSP.σ64@-8
instr_001013df_1_RSP.+8 ⊑ instr_00101434_1_RSP
instr_001013e0_0_RBP.load.σ64@-32 ⊑ instr_0010142a_1_$Uc000
instr_001013e0_0_RBP.load.σ64@-32 ⊑ instr_0010142a_3_$Uc000
instr_001013e0_0_RBP.load.σ64@-32 ⊑ instr_0010142a_5_$Uc000
instr_001013e0_0_RBP.load.σ64@-24 ⊑ instr_0010140d_1_$Uc000
instr_001013e0_0_RBP.load.σ32@-12 ⊑ instr_00101407_1_$Ubf00
instr_001013e0_0_RBP.load.σ32@-12 ⊑ instr_00101421_10_$Ubf80
instr_001013e0_0_RBP.load.σ32@-12 ⊑ instr_00101421_12_$Ubf80
instr_001013e0_0_RBP.load.σ32@-12 ⊑ instr_00101421_1_$Ubf80
instr_001013e0_0_RBP.load.σ32@-12 ⊑ instr_00101421_3_$Ubf80
instr_001013e0_0_RBP.load.σ32@-12 ⊑ instr_00101421_5_$Ubf80
instr_001013e0_0_RBP.load.σ32@-12 ⊑ instr_00101421_8_$Ubf80
instr_001013e0_0_RBP.load.σ32@-12 ⊑ instr_00101425_1_$Ubf00
instr_001013e0_0_RBP.load.σ64@-8 ⊑ instr_001013fc_1_$Uc000
instr_001013e0_0_RBP.load.σ64@-8 ⊑ instr_00101430_1_$Uc000
instr_001013e0_0_RBP.store.σ32@-12 ⊑ sub_001013db@RSP.σ32@-20
instr_001013e0_0_RBP.store.σ64@-8 ⊑ sub_001013db@RSP.σ64@-16
instr_00101421_5_$Ubf80.+1 ⊑ instr_00101421_6_$Ubf80
instr_00101421_6_$Ubf80 ⊑ instr_001013e0_0_RBP.store.σ32@-12
instr_00101430_1_$Uc000 ⊑ instr_00101430_2_RAX
instr_00101430_2_RAX ⊑ sub_001013db.out
instr_00101434_1_RSP.load.σ64@0 ⊑ instr_00101435_0_RIP
instr_00101434_1_RSP.+8 ⊑ instr_00101435_1_RSP
instr_00101500_0_RBP ⊑ τ229
instr_0010151b_0_RSI ⊑ τ231
instr_0010151e_0_RDI ⊑ τ230
instr_00101521_0_RSP ⊑ τ226
instr_00101605_0_RSI ⊑ τ231
instr_00101608_0_RDI ⊑ τ230
instr_0010160b_0_RSP ⊑ τ226
int ⊑ instr_00101400_4_RDX
int ⊑ instr_0010140a_0_RCX
sub_001013db.in_0 ⊑ instr_0010151e_0_RDI
sub_001013db.in_0 ⊑ instr_00101608_0_RDI
sub_001013db.in_1 ⊑ instr_0010151b_0_RSI
sub_001013db.in_1 ⊑ instr_00101605_0_RSI
sub_001013db@RSP.σ64@-40 ⊑ instr_001013e0_0_RBP.load.σ64@-32
sub_001013db@RSP.σ64@-32 ⊑ instr_001013e0_0_RBP.load.σ64@-24
sub_001013db@RSP.σ32@-20 ⊑ instr_001013e0_0_RBP.load.σ32@-12
sub_001013db@RSP.σ64@-16 ⊑ instr_001013e0_0_RBP.load.σ64@-8
sub_001013db@RSP.σ64@-8 ⊑ instr_001013df_1_RSP.load.σ64@0
sub_001013db@RSP.σ64@0 ⊑ instr_00101434_1_RSP.load.σ64@0
τ228 ⊑ instr_001013df_1_RSP
τ229 ⊑ instr_001013df_1_RSP.store.σ64@0
τ230 ⊑ instr_001013df_1_RSP.store.σ64@-24
τ231 ⊑ instr_001013df_1_RSP.store.σ64@-32
τ232 ⊑ instr_001013df_1_RSP.store.σ64@-8
τ233 ⊑ instr_001013df_1_RSP.store.σ32@-12
τ234.load.σ8@0 ⊑ instr_00101414_0_$Ubd80
τ235 ⊑ instr_001013e0_0_RBP.store.σ64@-8
τ236 ⊑ instr_0010142a_2_CF
τ237 ⊑ instr_0010142a_4_OF
τ238 ⊑ instr_0010142a_7_SF
τ239 ⊑ instr_0010142a_8_ZF
τ240 ⊑ instr_0010142a_12_PF
Add(instr_0010140d_1_$Uc000,int,τ234)
Add(int,instr_00101400_4_RDX,τ235)
Add(τ226,τ227,τ228)

Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00101040",
        address: "00101040",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00101436",
        address: "00101436",
    },
}
Basic cons: instr_0010143a_1_RSP ⊑ instr_0010143b_0_RBP
instr_0010143a_1_RSP.store.σ64@0 ⊑ sub_00101436@RSP.σ64@-8
instr_0010143b_0_RBP ⊑ instr_001014ad_0_RSP
instr_0010143b_0_RBP.load.σ64@-32 ⊑ instr_0010144a_1_$Uc000
instr_0010143b_0_RBP.load.σ64@-32 ⊑ instr_0010149a_1_$Uc000
instr_0010143b_0_RBP.load.σ64@-32 ⊑ instr_0010149a_3_$Uc000
instr_0010143b_0_RBP.load.σ64@-32 ⊑ instr_0010149a_5_$Uc000
instr_0010143b_0_RBP.load.σ64@-24 ⊑ instr_00101471_1_$Uc000
instr_0010143b_0_RBP.load.σ32@-4 ⊑ instr_0010146b_1_$Ubf00
instr_0010143b_0_RBP.load.σ32@-4 ⊑ instr_00101491_10_$Ubf80
instr_0010143b_0_RBP.load.σ32@-4 ⊑ instr_00101491_12_$Ubf80
instr_0010143b_0_RBP.load.σ32@-4 ⊑ instr_00101491_1_$Ubf80
instr_0010143b_0_RBP.load.σ32@-4 ⊑ instr_00101491_3_$Ubf80
instr_0010143b_0_RBP.load.σ32@-4 ⊑ instr_00101491_5_$Ubf80
instr_0010143b_0_RBP.load.σ32@-4 ⊑ instr_00101491_8_$Ubf80
instr_0010143b_0_RBP.load.σ32@-4 ⊑ instr_00101495_1_$Ubf00
instr_0010143b_0_RBP.load.σ64@0 ⊑ instr_001014ad_1_RBP
instr_0010143b_0_RBP.store.σ64@-32 ⊑ sub_00101436@RSP.σ64@-40
instr_0010143b_0_RBP.store.σ64@-24 ⊑ sub_00101436@RSP.σ64@-32
instr_0010143b_0_RBP.store.σ32@-4 ⊑ sub_00101436@RSP.σ32@-12
instr_0010144a_1_$Uc000 ⊑ instr_0010144e_0_RSI
instr_00101451_0_RDI ⊑ sub_00101020:blk_0010143a.in_0
instr_0010145d_0_RSP ⊑ τ264
instr_0010145d_0_RSP ⊑ τ274
instr_0010145d_0_RSP.store.σ64@0 ⊑ sub_00101436@RSP.σ64@-48
instr_00101480_0_RDI ⊑ sub_00101020:blk_0010146b.in_0
instr_0010148c_0_RSP ⊑ τ264
instr_0010148c_0_RSP ⊑ τ274
instr_0010148c_0_RSP.store.σ64@0 ⊑ sub_00101436@RSP.σ64@-48
instr_00101491_5_$Ubf80.+1 ⊑ instr_00101491_6_$Ubf80
instr_00101491_6_$Ubf80 ⊑ instr_0010143b_0_RBP.store.σ32@-4
instr_001014a0_0_RDI ⊑ sub_00101040:blk_001014a0.in_0
instr_001014a7_0_RSP.store.σ64@0 ⊑ sub_00101436@RSP.σ64@-48
instr_001014a7_2_RAX ⊑ sub_00101436.out
instr_001014ad_0_RSP.+8 ⊑ instr_001014ad_2_RSP
instr_001014ad_2_RSP.load.σ64@0 ⊑ instr_001014ae_0_RIP
instr_001014ad_2_RSP.+8 ⊑ instr_001014ae_1_RSP
instr_001015a5_1_RBP ⊑ instr_0010143a_1_RSP.store.σ64@0
instr_001016ee_0_RSI ⊑ instr_0010143b_0_RBP.store.σ64@-32
instr_001016f1_0_RDI ⊑ instr_0010143b_0_RBP.store.σ64@-24
int ⊑ instr_0010146e_0_RDX
int ⊑ instr_0010147e_0_RSI
int ⊑ instr_00101498_0_RAX
sub_00101436.in_0 ⊑ instr_001016f1_0_RDI
sub_00101436.in_1 ⊑ instr_001016ee_0_RSI
sub_00101436@RSP.σ64@-40 ⊑ instr_0010143b_0_RBP.load.σ64@-32
sub_00101436@RSP.σ64@-32 ⊑ instr_0010143b_0_RBP.load.σ64@-24
sub_00101436@RSP.σ32@-12 ⊑ instr_0010143b_0_RBP.load.σ32@-4
sub_00101436@RSP.σ64@-8 ⊑ instr_0010143b_0_RBP.load.σ64@0
sub_00101436@RSP.σ64@0 ⊑ instr_001014ad_2_RSP.load.σ64@0
τ242 ⊑ instr_0010143a_1_RSP
τ243 ⊑ instr_0010143e_0_CF
τ244 ⊑ instr_0010143e_1_OF
τ246 ⊑ instr_0010143e_2_RSP
τ247 ⊑ instr_0010143e_3_SF
τ248 ⊑ instr_0010143e_4_ZF
τ249 ⊑ instr_0010143e_8_PF
τ250 ⊑ instr_00101451_0_RDI
τ251 ⊑ instr_00101458_0_RAX
τ253 ⊑ instr_0010145d_0_RSP
τ254 ⊑ instr_0010145d_0_RSP.store.σ64@0
τ255 ⊑ instr_0010143b_0_RBP.store.σ32@-4
τ256 ⊑ instr_00101475_0_CF
τ257 ⊑ instr_00101475_1_OF
τ258 ⊑ instr_00101475_3_SF
τ259 ⊑ instr_00101475_4_ZF
τ260 ⊑ instr_00101475_8_PF
τ261.load.σ8@0 ⊑ instr_00101478_0_$Ubd80
τ262 ⊑ instr_00101480_0_RDI
τ263 ⊑ instr_00101487_0_RAX
τ266 ⊑ instr_0010148c_0_RSP
τ267 ⊑ instr_0010148c_0_RSP.store.σ64@0
τ268 ⊑ instr_0010149a_2_CF
τ269 ⊑ instr_0010149a_4_OF
τ270 ⊑ instr_0010149a_7_SF
τ271 ⊑ instr_0010149a_8_ZF
τ272 ⊑ instr_0010149a_12_PF
τ273 ⊑ instr_001014a0_0_RDI
τ276 ⊑ instr_001014a7_0_RSP
τ277 ⊑ instr_001014a7_0_RSP.store.σ64@0
Add(instr_0010143a_1_RSP,τ245,τ246)
Add(instr_0010143e_2_RSP,τ252,τ253)
Add(instr_00101471_1_$Uc000,int,τ261)
Add(instr_001016f4_0_RSP,τ241,τ242)
Add(τ264,τ265,τ266)
Add(τ274,τ275,τ276)

Int instr_0010146e_0_RDX
Int instr_0010147e_0_RSI
Int instr_00101498_0_RAX
Int int
Int τ245
Int instr_0010146e_0_RDX
Int instr_0010147e_0_RSI
Int instr_00101498_0_RAX
Int int
Int τ245
Diff instr_00101471_1_$Uc000 ⊑ τ261
τ245 ⊑ int
τ246 ⊑ instr_0010143a_1_RSP

Final 
Cons for: {
    Tid {
        id: "sub_001014af",
        address: "001014af",
    },
}
Basic cons: instr_001014ad_1_RBP ⊑ τ280
instr_001014b3_1_RSP ⊑ instr_001014b4_0_RBP
instr_001014b3_1_RSP.store.σ64@0 ⊑ sub_001014af@RSP.σ64@-8
instr_001014b7_0_RDI ⊑ sub_00101040:blk_001014b3.in_0
instr_001014be_0_RSP.store.σ64@0 ⊑ sub_001014af@RSP.σ64@-16
instr_001014c3_0_RDI ⊑ sub_00101040:blk_001014c3.in_0
instr_001014ca_0_RSP.store.σ64@0 ⊑ sub_001014af@RSP.σ64@-16
instr_001014cf_0_RDI ⊑ sub_00101040:blk_001014cf.in_0
instr_001014d6_0_RSP.store.σ64@0 ⊑ sub_001014af@RSP.σ64@-16
instr_001014db_0_RDI ⊑ sub_00101040:blk_001014db.in_0
instr_001014e2_0_RSP.store.σ64@0 ⊑ sub_001014af@RSP.σ64@-16
instr_001014e7_0_RDI ⊑ sub_00101020:blk_001014e7.in_0
instr_001014f3_0_RSP.load.σ64@0 ⊑ instr_001014f9_0_RBP
instr_001014f3_0_RSP.store.σ64@0 ⊑ sub_001014af@RSP.σ64@-16
instr_001014f3_0_RSP.+8 ⊑ instr_001014f9_1_RSP
instr_001014f3_2_RAX ⊑ sub_001014af.out
instr_001014f9_1_RSP.load.σ64@0 ⊑ instr_001014fa_0_RIP
instr_001014f9_1_RSP.+8 ⊑ instr_001014fa_1_RSP
instr_001015a5_1_RBP ⊑ τ280
instr_00101675_1_RBP ⊑ τ280
instr_00101726_1_RBP ⊑ τ280
instr_00101851_1_RBP ⊑ τ280
instr_00101858_0_RBP ⊑ τ280
sub_001014af@RSP.σ64@-8 ⊑ instr_001014f3_0_RSP.load.σ64@0
sub_001014af@RSP.σ64@0 ⊑ instr_001014f9_1_RSP.load.σ64@0
τ279 ⊑ instr_001014b3_1_RSP
τ280 ⊑ instr_001014b3_1_RSP.store.σ64@0
τ281 ⊑ instr_001014b7_0_RDI
τ283 ⊑ instr_001014be_0_RSP
τ284 ⊑ instr_001014be_0_RSP.store.σ64@0
τ285 ⊑ instr_001014c3_0_RDI
τ287 ⊑ instr_001014ca_0_RSP
τ288 ⊑ instr_001014ca_0_RSP.store.σ64@0
τ289 ⊑ instr_001014cf_0_RDI
τ291 ⊑ instr_001014d6_0_RSP
τ292 ⊑ instr_001014d6_0_RSP.store.σ64@0
τ293 ⊑ instr_001014db_0_RDI
τ295 ⊑ instr_001014e2_0_RSP
τ296 ⊑ instr_001014e2_0_RSP.store.σ64@0
τ297 ⊑ instr_001014e7_0_RDI
τ298 ⊑ instr_001014ee_0_RAX
τ300 ⊑ instr_001014f3_0_RSP
τ301 ⊑ instr_001014f3_0_RSP.store.σ64@0
Add(instr_001014b3_1_RSP,τ282,τ283)
Add(instr_001014be_0_RSP,τ286,τ287)
Add(instr_001014ca_0_RSP,τ290,τ291)
Add(instr_001014d6_0_RSP,τ294,τ295)
Add(instr_001014e2_0_RSP,τ299,τ300)
Add(instr_001018db_0_RSP,τ278,τ279)

Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00101080",
        address: "00101080",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_001014fb",
        address: "001014fb",
    },
}
Basic cons: instr_00101362_1_RBP ⊑ instr_001014ff_1_RSP.store.σ64@0
instr_00101434_0_RBP ⊑ instr_001015a5_0_RSP
instr_00101434_0_RBP.load.σ64@-40 ⊑ instr_00101563_1_$Uc000
instr_00101434_0_RBP.load.σ64@-40 ⊑ instr_00101563_3_$Uc000
instr_00101434_0_RBP.load.σ64@-40 ⊑ instr_00101563_5_$Uc000
instr_00101434_0_RBP.load.σ64@-40 ⊑ instr_00101570_1_$Uc000
instr_00101434_0_RBP.load.σ64@-32 ⊑ instr_00101574_1_$Uc000
instr_00101434_0_RBP.load.σ64@-24 ⊑ instr_0010153d_1_$Uc000
instr_00101434_0_RBP.load.σ64@-16 ⊑ instr_0010154d_1_$Uc000
instr_00101434_0_RBP.load.σ64@-16 ⊑ instr_0010155b_1_$Uc000
instr_00101434_0_RBP.load.σ64@-16 ⊑ instr_00101569_1_$Uc000
instr_00101434_0_RBP.load.σ64@-16 ⊑ instr_00101587_1_$Uc000
instr_00101434_0_RBP.load.σ64@-16 ⊑ instr_0010158d_1_$Uc000
instr_00101434_0_RBP.load.σ64@-16 ⊑ instr_00101599_1_$Uc080
instr_00101434_0_RBP.load.σ64@-16 ⊑ instr_00101599_3_$Uc080
instr_00101434_0_RBP.load.σ64@-16 ⊑ instr_00101599_5_$Uc080
instr_00101434_0_RBP.load.σ64@-8 ⊑ instr_0010152c_1_$Uc000
instr_00101434_0_RBP.load.σ64@-8 ⊑ instr_00101555_1_$Uc000
instr_00101434_0_RBP.load.σ64@-8 ⊑ instr_00101555_3_$Uc000
instr_00101434_0_RBP.load.σ64@-8 ⊑ instr_00101555_5_$Uc000
instr_00101434_0_RBP.load.σ64@0 ⊑ instr_001015a5_1_RBP
instr_00101434_0_RBP.store.σ64@-16 ⊑ sub_001014fb@RSP.σ64@-24
instr_00101434_0_RBP.store.σ64@-8 ⊑ sub_001014fb@RSP.σ64@-16
instr_00101435_1_RSP ⊑ τ324
instr_001014ff_1_RSP ⊑ instr_00101500_0_RBP
instr_001014ff_1_RSP.store.σ64@0 ⊑ sub_001014fb@RSP.σ64@-8
instr_00101500_0_RBP.load.σ64@-40 ⊑ instr_00101513_1_$Uc000
instr_00101500_0_RBP.load.σ64@-32 ⊑ instr_00101517_1_$Uc000
instr_00101500_0_RBP.store.σ64@-40 ⊑ sub_001014fb@RSP.σ64@-48
instr_00101500_0_RBP.store.σ64@-32 ⊑ sub_001014fb@RSP.σ64@-40
instr_00101500_0_RBP.store.σ64@-24 ⊑ sub_001014fb@RSP.σ64@-32
instr_00101513_1_$Uc000 ⊑ instr_00101513_2_RDX
instr_00101513_2_RDX ⊑ instr_0010151b_0_RSI
instr_00101517_1_$Uc000 ⊑ instr_00101517_2_RAX
instr_00101517_1_$Uc000 ⊑ instr_0010151e_0_RDI
instr_0010151b_0_RSI ⊑ sub_001013db:blk_001014ff.in_1
instr_0010151e_0_RDI ⊑ sub_001013db:blk_001014ff.in_0
instr_00101521_0_RSP.store.σ64@0 ⊑ sub_001014fb@RSP.σ64@-64
instr_00101526_0_RAX ⊑ instr_00101434_0_RBP.store.σ64@-8
instr_00101544_0_$Uc000 ⊑ instr_00101547_1_$Uc000
instr_00101547_1_$Uc000 ⊑ instr_00101434_0_RBP.store.σ64@-16
instr_0010154d_1_$Uc000.load.σ64@32 ⊑ instr_00101551_1_$Uc000
instr_00101551_1_$Uc000 ⊑ instr_00101551_2_RAX
instr_0010155b_1_$Uc000.load.σ64@16 ⊑ instr_0010155f_1_$Uc000
instr_0010155f_1_$Uc000 ⊑ instr_0010155f_2_RAX
instr_00101569_1_$Uc000.load.σ64@0 ⊑ instr_0010156d_0_$Uc000
instr_0010156d_0_$Uc000 ⊑ instr_0010156d_1_RCX
instr_0010156d_1_RCX ⊑ instr_00101578_0_RSI
instr_00101570_1_$Uc000 ⊑ instr_00101570_2_RDX
instr_00101570_2_RDX ⊑ sub_00101080:blk_00101569.in_2
instr_00101574_1_$Uc000 ⊑ instr_00101574_2_RAX
instr_00101574_1_$Uc000 ⊑ instr_0010157b_0_RDI
instr_00101578_0_RSI ⊑ sub_00101080:blk_00101569.in_1
instr_0010157b_0_RDI ⊑ sub_00101080:blk_00101569.in_0
instr_0010157e_0_RSP ⊑ τ324
instr_0010157e_0_RSP.store.σ64@0 ⊑ sub_001014fb@RSP.σ64@-64
instr_00101587_1_$Uc000 ⊑ instr_00101587_2_RAX
instr_00101587_2_RAX ⊑ sub_001014fb.out
instr_0010158d_1_$Uc000.load.σ64@40 ⊑ instr_00101591_1_$Uc000
instr_00101591_1_$Uc000 ⊑ instr_00101595_1_$Uc000
instr_00101595_1_$Uc000 ⊑ instr_00101434_0_RBP.store.σ64@-16
instr_001015a0_0_RAX ⊑ sub_001014fb.out
instr_001015a5_0_RSP.+8 ⊑ instr_001015a5_2_RSP
instr_001015a5_2_RSP.load.σ64@0 ⊑ instr_001015a6_0_RIP
instr_001015a5_2_RSP.+8 ⊑ instr_001015a6_1_RSP
instr_001016b2_2_RDX ⊑ τ314
instr_001016ba_0_RSI ⊑ τ313
instr_001016bd_0_RDI ⊑ τ312
instr_001016c0_0_RSP ⊑ τ302
instr_00101763_2_RDX ⊑ τ314
instr_0010176b_0_RSI ⊑ τ313
instr_0010176e_0_RDI ⊑ τ312
instr_00101771_0_RSP ⊑ τ302
instr_00101943_2@RSP ⊑ τ318.load.σ64@0
instr_00101954_2@RSP ⊑ τ318.load.σ64@0
int ⊑ instr_00101526_0_RAX
int ⊑ instr_00101535_1_RDX
sub_001013db:blk_001014ff.out ⊑ instr_00101521_2_RAX
sub_001014fb.in_0 ⊑ instr_001016bd_0_RDI
sub_001014fb.in_0 ⊑ instr_0010176e_0_RDI
sub_001014fb.in_1 ⊑ instr_001016ba_0_RSI
sub_001014fb.in_1 ⊑ instr_0010176b_0_RSI
sub_001014fb.in_2 ⊑ instr_001016b2_2_RDX
sub_001014fb.in_2 ⊑ instr_00101763_2_RDX
sub_001014fb@RSP.σ64@-48 ⊑ instr_00101434_0_RBP.load.σ64@-40
sub_001014fb@RSP.σ64@-48 ⊑ instr_00101500_0_RBP.load.σ64@-40
sub_001014fb@RSP.σ64@-40 ⊑ instr_00101434_0_RBP.load.σ64@-32
sub_001014fb@RSP.σ64@-40 ⊑ instr_00101500_0_RBP.load.σ64@-32
sub_001014fb@RSP.σ64@-32 ⊑ instr_00101434_0_RBP.load.σ64@-24
sub_001014fb@RSP.σ64@-24 ⊑ instr_00101434_0_RBP.load.σ64@-16
sub_001014fb@RSP.σ64@-16 ⊑ instr_00101434_0_RBP.load.σ64@-8
sub_001014fb@RSP.σ64@-8 ⊑ instr_00101434_0_RBP.load.σ64@0
sub_001014fb@RSP.σ64@0 ⊑ instr_001015a5_2_RSP.load.σ64@0
τ304 ⊑ instr_001014ff_1_RSP
τ305 ⊑ instr_00101503_0_CF
τ306 ⊑ instr_00101503_1_OF
τ308 ⊑ instr_00101503_2_RSP
τ309 ⊑ instr_00101503_3_SF
τ310 ⊑ instr_00101503_4_ZF
τ311 ⊑ instr_00101503_8_PF
τ312 ⊑ instr_00101500_0_RBP.store.σ64@-24
τ313 ⊑ instr_00101500_0_RBP.store.σ64@-32
τ314 ⊑ instr_00101500_0_RBP.store.σ64@-40
τ316 ⊑ instr_00101521_0_RSP
τ317 ⊑ instr_00101521_0_RSP.store.σ64@0
τ318.load.σ64@0 ⊑ instr_00101544_0_$Uc000
τ319 ⊑ instr_00101563_2_CF
τ320 ⊑ instr_00101563_4_OF
τ321 ⊑ instr_00101563_7_SF
τ322 ⊑ instr_00101563_8_ZF
τ323 ⊑ instr_00101563_12_PF
τ326 ⊑ instr_0010157e_0_RSP
τ327 ⊑ instr_0010157e_0_RSP.store.σ64@0
τ328 ⊑ instr_00101583_0_CF
τ329 ⊑ instr_00101583_1_OF
τ330 ⊑ instr_00101583_3_SF
τ331 ⊑ instr_00101583_4_ZF
τ332 ⊑ instr_00101583_8_PF
τ333 ⊑ instr_00101599_2_CF
τ334 ⊑ instr_00101599_4_OF
τ335 ⊑ instr_00101599_7_SF
τ336 ⊑ instr_00101599_8_ZF
τ337 ⊑ instr_00101599_12_PF
τ338 ⊑ instr_001015a0_0_RAX
Add(instr_001014ff_1_RSP,τ307,τ308)
Add(instr_00101503_2_RSP,τ315,τ316)
Add(instr_0010153d_1_$Uc000,instr_00101535_1_RDX,τ318)
Add(τ302,τ303,τ304)
Add(τ324,τ325,τ326)

Int instr_00101434_0_RBP.load.σ64@-8
Int instr_00101434_0_RBP.store.σ64@-8
Int instr_00101526_0_RAX
Int instr_0010152c_1_$Uc000
Int instr_00101535_1_RDX
Int instr_00101555_1_$Uc000
Int instr_00101555_3_$Uc000
Int instr_00101555_5_$Uc000
Int int
Int sub_001014fb@RSP.σ64@-16
Int τ307
Int instr_00101434_0_RBP.load.σ64@-8
Int instr_00101434_0_RBP.store.σ64@-8
Int instr_00101526_0_RAX
Int instr_0010152c_1_$Uc000
Int instr_00101535_1_RDX
Int instr_00101555_1_$Uc000
Int instr_00101555_3_$Uc000
Int instr_00101555_5_$Uc000
Int int
Int sub_001014fb@RSP.σ64@-16
Int τ307
Diff instr_0010153d_1_$Uc000 ⊑ τ318
τ307 ⊑ int
τ308 ⊑ instr_001014ff_1_RSP

Final loop_breaker339 ⊑ sub_001014fb.out
loop_breaker339.load ⊑ loop_breaker340
loop_breaker339.load.σ64@0 ⊑ sub_00101080:blk_00101569.in_1
loop_breaker340.σ64@40 ⊑ loop_breaker339
sub_001014fb.in_0.load.σ64@0 ⊑ loop_breaker339
sub_001014fb.in_1 ⊑ sub_00101080:blk_00101569.in_0
sub_001014fb.in_1 ⊑ sub_001013db:blk_001014ff.in_0
sub_001014fb.in_2 ⊑ sub_00101080:blk_00101569.in_2
sub_001014fb.in_2 ⊑ sub_001013db:blk_001014ff.in_1

Cons for: {
    Tid {
        id: "sub_001015a7",
        address: "001015a7",
    },
}
Basic cons: instr_001011ee_0_RBP ⊑ τ343
instr_0010128d_1_RBP ⊑ τ343
instr_001012eb_1_RBP ⊑ τ343
instr_00101362_1_RBP.load.σ64@-16 ⊑ instr_001015d6_1_$Uc000
instr_00101362_1_RBP.load.σ64@-16 ⊑ instr_001015de_1_$Uc000
instr_001013d9_1_RBP.load.σ64@-16 ⊑ instr_001015ee_1_$Uc000
instr_001013d9_1_RBP.load.σ64@-16 ⊑ instr_001015f6_1_$Uc000
instr_001013d9_1_RBP.load.σ64@-16 ⊑ instr_001015fe_1_$Uc000
instr_00101434_0_RBP ⊑ instr_00101675_0_RSP
instr_00101434_0_RBP.load.σ64@-40 ⊑ instr_00101635_1_$Uc000
instr_00101434_0_RBP.load.σ64@-40 ⊑ instr_0010164e_1_$Uc000
instr_00101434_0_RBP.load.σ32@-20 ⊑ instr_0010162a_1_$Ubf00
instr_00101434_0_RBP.load.σ32@-20 ⊑ instr_00101643_1_$Ubf00
instr_00101434_0_RBP.load.σ64@-16 ⊑ instr_00101612_1_$Uc000
instr_00101434_0_RBP.load.σ64@-16 ⊑ instr_0010161a_1_$Uc000
instr_00101434_0_RBP.load.σ64@-16 ⊑ instr_00101655_1_$Uc000
instr_00101434_0_RBP.load.σ64@-16 ⊑ instr_0010165c_1_$Uc000
instr_00101434_0_RBP.load.σ64@-8 ⊑ instr_00101660_1_$Uc000
instr_00101434_0_RBP.load.σ64@0 ⊑ instr_00101675_1_RBP
instr_00101434_0_RBP.store.σ32@-20 ⊑ sub_001015a7@RSP.σ32@-28
instr_00101434_0_RBP.store.σ64@-8 ⊑ sub_001015a7@RSP.σ64@-16
instr_001015ab_1_RSP ⊑ instr_001015ac_0_RBP
instr_001015ab_1_RSP.store.σ64@0 ⊑ sub_001015a7@RSP.σ64@-8
instr_001015ac_0_RBP.load.σ64@-16 ⊑ instr_001015ca_1_$Uc000
instr_001015ac_0_RBP.store.σ64@-40 ⊑ sub_001015a7@RSP.σ64@-48
instr_001015ac_0_RBP.store.σ64@-16 ⊑ sub_001015a7@RSP.σ64@-24
instr_001015b7_0_RSI ⊑ sub_00101060:blk_001015ab.in_1
instr_001015bc_0_RDI ⊑ sub_00101060:blk_001015ab.in_0
instr_001015c1_0_RSP.store.σ64@0 ⊑ sub_001015a7@RSP.σ64@-64
instr_001015c1_2@RAX.σ64@0 ⊑ instr_001015fe_1_$Uc000.load.σ64@0
instr_001015c1_2@RAX.σ64@16 ⊑ instr_001015f6_1_$Uc000.load.σ64@16
instr_001015c1_2@RAX.σ64@32 ⊑ instr_0010161a_1_$Uc000.load.σ64@32
instr_001015c1_2_RAX ⊑ instr_001015ac_0_RBP.store.σ64@-16
instr_001015ca_1_$Uc000 ⊑ instr_001015ca_2_RAX
instr_001015ca_1_$Uc000 ⊑ instr_001015ce_0_RDI
instr_001015ce_0_RDI ⊑ sub_001012ed:blk_001015c6.in_0
instr_001015d1_0_RSP.store.σ64@0 ⊑ sub_001015a7@RSP.σ64@-64
instr_001015d1_2_RAX ⊑ instr_001015da_0_$U3100.store.σ64@0
instr_001015d6_1_$Uc000 ⊑ instr_001015d6_2_RDX
instr_001015d6_1_$Uc000.+16 ⊑ instr_001015da_0_$U3100
instr_001015da_0_$U3100.store.σ64@0 ⊑ instr_001015c1_2@RAX.σ64@16
instr_001015de_1_$Uc000.+8 ⊑ instr_001015e2_2_RAX
instr_001015de_1_$Uc000.+8 ⊑ instr_001015e6_0_RDI
instr_001015e6_0_RDI ⊑ sub_00101364:blk_001015d6.in_0
instr_001015e9_0_RSP.store.σ64@0 ⊑ sub_001015a7@RSP.σ64@-64
instr_001015e9_2_RAX ⊑ instr_001015f2_0_$U3100.store.σ64@0
instr_001015ee_1_$Uc000.+24 ⊑ instr_001015f2_0_$U3100
instr_001015f2_0_$U3100.store.σ64@0 ⊑ instr_001015c1_2@RAX.σ64@24
instr_001015f6_1_$Uc000.load.σ64@16 ⊑ instr_001015fa_1_$Uc000
instr_001015fa_1_$Uc000 ⊑ instr_001015fa_2_RDX
instr_001015fa_2_RDX ⊑ instr_00101605_0_RSI
instr_001015fe_1_$Uc000.load.σ64@0 ⊑ instr_00101602_0_$Uc000
instr_00101602_0_$Uc000 ⊑ instr_00101602_1_RAX
instr_00101602_0_$Uc000 ⊑ instr_00101608_0_RDI
instr_00101605_0_RSI ⊑ sub_001013db:blk_001015ee.in_1
instr_00101608_0_RDI ⊑ sub_001013db:blk_001015ee.in_0
instr_0010160b_0_RSP.store.σ64@0 ⊑ sub_001015a7@RSP.σ64@-64
instr_00101610_0_RDX ⊑ instr_00101616_0_$U3100.store.σ64@0
instr_00101612_1_$Uc000.+32 ⊑ instr_00101616_0_$U3100
instr_00101616_0_$U3100.store.σ64@0 ⊑ instr_001015c1_2@RAX.σ64@32
instr_0010161a_1_$Uc000.load.σ64@32 ⊑ instr_0010161e_1_$Uc000
instr_0010163c_0_$Uc000 ⊑ instr_0010163f_1_$Uc000
instr_0010163f_1_$Uc000 ⊑ instr_00101434_0_RBP.store.σ64@-8
instr_00101652_2_RDX.store.σ64@0 ⊑ instr_00101932_2@RSP
instr_00101655_1_$Uc000 ⊑ instr_00101659_0_$Uc000
instr_00101659_0_$Uc000 ⊑ instr_00101652_2_RDX.store.σ64@0
instr_0010165c_1_$Uc000 ⊑ instr_0010165c_2_RAX
instr_0010165c_2_RAX.store.σ64@40 ⊑ instr_001015c1_2@RAX.σ64@40
instr_00101660_1_$Uc000 ⊑ instr_00101660_2_RDX
instr_00101660_1_$Uc000 ⊑ instr_00101664_1_$Uc000
instr_00101664_1_$Uc000 ⊑ instr_0010165c_2_RAX.store.σ64@40
instr_00101668_0_RDI ⊑ sub_00101040:blk_00101610.in_0
instr_0010166f_0_RSP.store.σ64@0 ⊑ sub_001015a7@RSP.σ64@-64
instr_0010166f_2_RAX ⊑ sub_001015a7.out
instr_00101675_0_RSP.+8 ⊑ instr_00101675_2_RSP
instr_00101675_2_RSP.load.σ64@0 ⊑ instr_00101676_0_RIP
instr_00101675_2_RSP.+8 ⊑ instr_00101676_1_RSP
instr_0010192f_0_RDI ⊑ instr_001015ac_0_RBP.store.σ64@-40
instr_00101932_2@RSP ⊑ τ371.load.σ64@0
int ⊑ instr_00101610_0_RDX
sub_001012ed:blk_001015c6.out ⊑ instr_001015d1_2_RAX
sub_00101364:blk_001015d6.out ⊑ instr_001015e9_2_RAX
sub_001013db:blk_001015ee.out ⊑ instr_0010160b_2_RAX
sub_001015a7.in_0 ⊑ instr_0010192f_0_RDI
sub_001015a7@RSP.σ64@-48 ⊑ instr_00101434_0_RBP.load.σ64@-40
sub_001015a7@RSP.σ32@-28 ⊑ instr_00101434_0_RBP.load.σ32@-20
sub_001015a7@RSP.σ64@-24 ⊑ instr_00101362_1_RBP.load.σ64@-16
sub_001015a7@RSP.σ64@-24 ⊑ instr_001013d9_1_RBP.load.σ64@-16
sub_001015a7@RSP.σ64@-24 ⊑ instr_00101434_0_RBP.load.σ64@-16
sub_001015a7@RSP.σ64@-24 ⊑ instr_001015ac_0_RBP.load.σ64@-16
sub_001015a7@RSP.σ64@-16 ⊑ instr_00101434_0_RBP.load.σ64@-8
sub_001015a7@RSP.σ64@-8 ⊑ instr_00101434_0_RBP.load.σ64@0
sub_001015a7@RSP.σ64@0 ⊑ instr_00101675_2_RSP.load.σ64@0
τ342 ⊑ instr_001015ab_1_RSP
τ343 ⊑ instr_001015ab_1_RSP.store.σ64@0
τ344 ⊑ instr_001015af_0_CF
τ345 ⊑ instr_001015af_1_OF
τ347 ⊑ instr_001015af_2_RSP
τ348 ⊑ instr_001015af_3_SF
τ349 ⊑ instr_001015af_4_ZF
τ350 ⊑ instr_001015af_8_PF
τ351 ⊑ instr_001015b7_0_RSI
τ352 ⊑ instr_001015bc_0_RDI
τ354 ⊑ instr_001015c1_0_RSP
τ355 ⊑ instr_001015c1_0_RSP.store.σ64@0
τ357 ⊑ instr_001015d1_0_RSP
τ358 ⊑ instr_001015d1_0_RSP.store.σ64@0
τ359 ⊑ instr_001015e2_0_CF
τ360 ⊑ instr_001015e2_1_OF
τ361 ⊑ instr_001015e2_3_SF
τ362 ⊑ instr_001015e2_4_ZF
τ363 ⊑ instr_001015e2_8_PF
τ365 ⊑ instr_001015e9_0_RSP
τ366 ⊑ instr_001015e9_0_RSP.store.σ64@0
τ368 ⊑ instr_0010160b_0_RSP
τ369 ⊑ instr_0010160b_0_RSP.store.σ64@0
τ370 ⊑ instr_00101434_0_RBP.store.σ32@-20
τ371.load.σ64@0 ⊑ instr_0010163c_0_$Uc000
τ372 ⊑ instr_00101652_0_CF
τ373 ⊑ instr_00101652_1_OF
τ374 ⊑ instr_00101652_2_RDX
τ375 ⊑ instr_00101652_3_SF
τ376 ⊑ instr_00101652_4_ZF
τ377 ⊑ instr_00101652_8_PF
τ378 ⊑ instr_00101668_0_RDI
τ380 ⊑ instr_0010166f_0_RSP
τ381 ⊑ instr_0010166f_0_RSP.store.σ64@0
Add(instr_00101363_1_RSP,τ364,τ365)
Add(instr_001013da_1_RSP,τ367,τ368)
Add(instr_00101435_1_RSP,τ379,τ380)
Add(instr_001015ab_1_RSP,τ346,τ347)
Add(instr_001015af_2_RSP,τ353,τ354)
Add(instr_001015c1_0_RSP,τ356,τ357)
Add(instr_00101635_1_$Uc000,int,τ371)
Add(instr_00101932_0_RSP,τ341,τ342)
Add(int,instr_0010164e_1_$Uc000,τ374)

Int instr_001015c1_2@RAX.σ64@32
Int instr_00101610_0_RDX
Int instr_00101616_0_$U3100.store.σ64@0
Int instr_0010161a_1_$Uc000.load.σ64@32
Int instr_0010161e_1_$Uc000
Int int
Int τ346
Int instr_001015c1_2@RAX.σ64@32
Int instr_00101610_0_RDX
Int instr_00101616_0_$U3100.store.σ64@0
Int instr_0010161a_1_$Uc000.load.σ64@32
Int instr_0010161e_1_$Uc000
Int int
Int τ346
Diff instr_00101635_1_$Uc000 ⊑ τ371
instr_0010164e_1_$Uc000 ⊑ τ374
τ346 ⊑ int
τ347 ⊑ instr_001015ab_1_RSP

Final sub_001012ed:blk_001015c6.out ⊑ sub_001013db:blk_001015ee.in_1

Cons for: {
    Tid {
        id: "sub_001010c0",
        address: "001010c0",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00101677",
        address: "00101677",
    },
}
Basic cons: entry_fresh_definition1372.load.σ64@40 ⊑ instr_00101687_1_$Uc000
entry_fresh_definition1372.load.σ64@40 ⊑ instr_00101716_3_$Uc000
instr_001011ee_0_RBP ⊑ τ384
instr_0010128d_1_RBP ⊑ τ384
instr_001012eb_1_RBP ⊑ τ384
instr_00101362_1_RBP.load.σ64@-40 ⊑ instr_001016b6_1_$Uc000
instr_00101362_1_RBP.load.σ64@-32 ⊑ instr_001016ae_1_$Uc000
instr_00101362_1_RBP.load.σ64@-24 ⊑ instr_001016b2_1_$Uc000
instr_00101362_1_RBP.store.σ64@-24 ⊑ sub_00101677@RSP.σ64@-32
instr_001014ad_1_RBP ⊑ τ415
instr_001014ad_1_RBP ⊑ τ420
instr_001014ad_1_RBP ⊑ τ430
instr_001014ad_1_RBP ⊑ τ431
instr_001015a5_1_RBP ⊑ τ415
instr_001015a5_1_RBP ⊑ τ420
instr_001015a5_1_RBP ⊑ τ430
instr_001015a5_1_RBP ⊑ τ431
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001016c9_1_$Uc080
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001016c9_3_$Uc080
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001016c9_5_$Uc080
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001016de_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001016e6_1_$Uc000
instr_001015a5_1_RBP.store.σ64@-16 ⊑ sub_00101677@RSP.σ64@-24
instr_0010167b_1_RSP ⊑ instr_0010167c_0_RBP
instr_0010167b_1_RSP.store.σ64@0 ⊑ sub_00101677@RSP.σ64@-8
instr_0010167c_0_RBP.store.σ64@-40 ⊑ sub_00101677@RSP.σ64@-48
instr_0010167c_0_RBP.store.σ64@-32 ⊑ sub_00101677@RSP.σ64@-40
instr_0010167c_0_RBP.store.σ64@-8 ⊑ sub_00101677@RSP.σ64@-16
instr_0010167c_0_RBP.+-32 ⊑ instr_0010169e_1_RAX
instr_0010167c_0_RBP.+-32 ⊑ instr_001016a2_0_RDI
instr_00101687_1_$Uc000 ⊑ instr_00101690_1_$Uc000
instr_00101690_1_$Uc000 ⊑ instr_0010167c_0_RBP.store.σ64@-8
instr_001016a2_0_RDI ⊑ sub_001012ed:blk_0010167b.in_0
instr_001016a5_0_RSP.store.σ64@0 ⊑ sub_00101677@RSP.σ64@-64
instr_001016a5_2_RAX ⊑ instr_00101362_1_RBP.store.σ64@-24
instr_001016ae_1_$Uc000 ⊑ instr_001016ae_2_RCX
instr_001016ae_2_RCX ⊑ instr_001016ba_0_RSI
instr_001016b2_1_$Uc000 ⊑ instr_001016b2_2_RDX
instr_001016b2_2_RDX ⊑ sub_001014fb:blk_001016aa.in_2
instr_001016b6_1_$Uc000 ⊑ instr_001016b6_2_RAX
instr_001016b6_1_$Uc000 ⊑ instr_001016bd_0_RDI
instr_001016ba_0_RSI ⊑ sub_001014fb:blk_001016aa.in_1
instr_001016bd_0_RDI ⊑ sub_001014fb:blk_001016aa.in_0
instr_001016c0_0_RSP.store.σ64@0 ⊑ sub_00101677@RSP.σ64@-64
instr_001016c0_2_RAX ⊑ instr_001015a5_1_RBP.store.σ64@-16
instr_001016d0_0_RDI ⊑ sub_00101040:blk_001016d0.in_0
instr_001016d7_0_RSP ⊑ τ416
instr_001016d7_0_RSP.store.σ64@0 ⊑ sub_00101677@RSP.σ64@-64
instr_001016de_1_$Uc000.load.σ64@24 ⊑ instr_001016e2_1_$Uc000
instr_001016e2_1_$Uc000 ⊑ instr_001016e2_2_RDX
instr_001016e2_2_RDX ⊑ instr_001016ee_0_RSI
instr_001016e6_1_$Uc000.load.σ64@8 ⊑ instr_001016ea_1_$Uc000
instr_001016ea_1_$Uc000 ⊑ instr_001016ea_2_RAX
instr_001016ea_1_$Uc000 ⊑ instr_001016f1_0_RDI
instr_001016ee_0_RSI ⊑ sub_00101436:blk_001016de.in_1
instr_001016f1_0_RDI ⊑ sub_00101436:blk_001016de.in_0
instr_001016f4_0_RSP.store.σ64@0 ⊑ sub_00101677@RSP.σ64@-64
instr_001016f9_0_RDI ⊑ sub_00101040:blk_001016f9.in_0
instr_00101700_0_RSP ⊑ τ416
instr_00101700_0_RSP.store.σ64@0 ⊑ sub_00101677@RSP.σ64@-64
instr_00101705_1_$Uc000 ⊑ instr_00101705_2_RAX
instr_00101705_1_$Uc000 ⊑ instr_00101709_0_RDI
instr_00101709_0_RDI ⊑ sub_001010c0:blk_00101705.in_0
instr_0010170c_0_RSP.store.σ64@0 ⊑ sub_00101677@RSP.σ64@-64
instr_00101712_1_$Uc000 ⊑ instr_00101712_2_RAX
instr_00101716_4_RAX ⊑ sub_00101677.out
instr_00101721_0_RSP.store.σ64@0 ⊑ sub_00101677@RSP.σ64@-64
instr_00101726_0_RSP.+8 ⊑ instr_00101726_2_RSP
instr_00101726_2_RSP.load.σ64@0 ⊑ instr_00101727_0_RIP
instr_00101726_2_RSP.+8 ⊑ instr_00101727_1_RSP
instr_00101940_0_RDI ⊑ instr_0010167c_0_RBP.store.σ64@-40
int ⊑ instr_00101694_2_RAX
sub_001012ed:blk_0010167b.out ⊑ instr_001016a5_2_RAX
sub_00101436:blk_001016de.out ⊑ instr_001016f4_2_RAX
sub_001014fb:blk_001016aa.out ⊑ instr_001016c0_2_RAX
sub_00101677.in_0 ⊑ instr_00101940_0_RDI
sub_00101677@RSP.σ64@-48 ⊑ instr_00101362_1_RBP.load.σ64@-40
sub_00101677@RSP.σ64@-40 ⊑ instr_00101362_1_RBP.load.σ64@-32
sub_00101677@RSP.σ64@-40 ⊑ τ415.load.σ64@-32
sub_00101677@RSP.σ64@-32 ⊑ instr_00101362_1_RBP.load.σ64@-24
sub_00101677@RSP.σ64@-24 ⊑ instr_001015a5_1_RBP.load.σ64@-16
sub_00101677@RSP.σ64@-16 ⊑ τ420.load.σ64@-8
sub_00101677@RSP.σ64@-8 ⊑ τ431.load.σ64@0
sub_00101677@RSP.σ64@0 ⊑ instr_00101726_2_RSP.load.σ64@0
τ383 ⊑ instr_0010167b_1_RSP
τ384 ⊑ instr_0010167b_1_RSP.store.σ64@0
τ386 ⊑ instr_0010167f_2_RSP
τ387 ⊑ instr_00101694_0_CF
τ388 ⊑ instr_00101694_1_OF
τ389 ⊑ instr_00101694_4_SF
τ390 ⊑ instr_00101694_5_ZF
τ391 ⊑ instr_00101694_9_PF
τ392 ⊑ instr_0010167c_0_RBP.store.σ64@-32
τ394 ⊑ instr_001016a5_0_RSP
τ395 ⊑ instr_001016a5_0_RSP.store.σ64@0
τ397 ⊑ instr_001016c0_0_RSP
τ398 ⊑ instr_001016c0_0_RSP.store.σ64@0
τ399 ⊑ instr_001016c9_2_CF
τ400 ⊑ instr_001016c9_4_OF
τ401 ⊑ instr_001016c9_7_SF
τ402 ⊑ instr_001016c9_8_ZF
τ403 ⊑ instr_001016c9_12_PF
τ404 ⊑ instr_001016d0_0_RDI
τ406 ⊑ instr_001016d7_0_RSP
τ407 ⊑ instr_001016d7_0_RSP.store.σ64@0
τ409 ⊑ instr_001016f4_0_RSP
τ410 ⊑ instr_001016f4_0_RSP.store.σ64@0
τ411 ⊑ instr_001016f9_0_RDI
τ413 ⊑ instr_00101700_0_RSP
τ414 ⊑ instr_00101700_0_RSP.store.σ64@0
τ415.load.σ64@-32 ⊑ instr_00101705_1_$Uc000
τ418 ⊑ instr_0010170c_0_RSP
τ419 ⊑ instr_0010170c_0_RSP.store.σ64@0
τ420.load.σ64@-8 ⊑ instr_00101712_1_$Uc000
τ421 ⊑ instr_00101716_1_CF
τ422 ⊑ instr_00101716_2_OF
τ423 ⊑ instr_00101716_4_RAX
τ424 ⊑ instr_00101716_5_SF
τ425 ⊑ instr_00101716_6_ZF
τ426 ⊑ instr_00101716_10_PF
τ428 ⊑ instr_00101721_0_RSP
τ429 ⊑ instr_00101721_0_RSP.store.σ64@0
τ430 ⊑ instr_00101726_0_RSP
τ431.load.σ64@0 ⊑ instr_00101726_1_RBP
Add(instr_00101363_1_RSP,τ396,τ397)
Add(instr_001014ae_1_RSP,τ412,τ413)
Add(instr_001015a6_1_RSP,τ405,τ406)
Add(instr_001015a6_1_RSP,τ408,τ409)
Add(instr_0010167b_1_RSP,τ385,τ386)
Add(instr_0010167f_2_RSP,τ393,τ394)
Add(instr_0010170c_0_RSP,τ427,τ428)
Add(instr_00101943_0_RSP,τ382,τ383)
Add(τ416,τ417,τ418)

Int instr_00101694_2_RAX
Int int
Int τ385
Diff τ385 ⊑ int
τ386 ⊑ instr_0010167b_1_RSP

Final sub_001012ed:blk_0010167b.out ⊑ sub_001014fb:blk_001016aa.in_2
sub_001014fb:blk_001016aa.out.load.σ64@8 ⊑ sub_00101436:blk_001016de.in_0
sub_001014fb:blk_001016aa.out.load.σ64@24 ⊑ sub_00101436:blk_001016de.in_1
sub_00101677.in_0 ⊑ sub_001014fb:blk_001016aa.in_0

Cons for: {
    Tid {
        id: "sub_00101728",
        address: "00101728",
    },
}
Basic cons: entry_fresh_definition1372.load.σ64@40 ⊑ instr_00101738_1_$Uc000
entry_fresh_definition1372.load.σ64@40 ⊑ instr_00101841_3_$Uc000
instr_001011ee_0_RBP ⊑ τ434
instr_0010128d_1_RBP ⊑ τ434
instr_001012eb_1_RBP ⊑ τ434
instr_00101362_1_RBP.load.σ64@-56 ⊑ instr_00101767_1_$Uc000
instr_00101362_1_RBP.load.σ64@-40 ⊑ instr_0010175f_1_$Uc000
instr_00101362_1_RBP.load.σ64@-24 ⊑ instr_00101763_1_$Uc000
instr_00101362_1_RBP.store.σ64@-24 ⊑ sub_00101728@RSP.σ64@-32
instr_001015a5_1_RBP ⊑ instr_00101851_0_RSP
instr_001015a5_1_RBP.load.σ64@-56 ⊑ instr_001017a7_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-40 ⊑ instr_00101830_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-32 ⊑ instr_001017b2_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-32 ⊑ instr_001017ce_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-32 ⊑ instr_001017dd_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-32 ⊑ instr_001017f2_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_0010177a_1_$Uc080
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_0010177a_3_$Uc080
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_0010177a_5_$Uc080
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_00101792_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001017b9_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001017b9_3_$Uc000
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001017b9_5_$Uc000
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001017bf_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001017e4_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001017e4_3_$Uc000
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001017e4_5_$Uc000
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001017ea_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_001017f9_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_00101808_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-16 ⊑ instr_00101818_1_$Uc000
instr_001015a5_1_RBP.load.σ64@-8 ⊑ instr_0010183d_1_$Uc000
instr_001015a5_1_RBP.load.σ64@0 ⊑ instr_00101851_1_RBP
instr_001015a5_1_RBP.store.σ64@-32 ⊑ sub_00101728@RSP.σ64@-40
instr_001015a5_1_RBP.store.σ64@-16 ⊑ sub_00101728@RSP.σ64@-24
instr_0010172c_1_RSP ⊑ instr_0010172d_0_RBP
instr_0010172c_1_RSP.store.σ64@0 ⊑ sub_00101728@RSP.σ64@-8
instr_0010172d_0_RBP.store.σ64@-56 ⊑ sub_00101728@RSP.σ64@-64
instr_0010172d_0_RBP.store.σ64@-40 ⊑ sub_00101728@RSP.σ64@-48
instr_0010172d_0_RBP.store.σ64@-8 ⊑ sub_00101728@RSP.σ64@-16
instr_0010172d_0_RBP.+-40 ⊑ instr_0010174f_1_RAX
instr_0010172d_0_RBP.+-40 ⊑ instr_00101753_0_RDI
instr_00101738_1_$Uc000 ⊑ instr_00101741_1_$Uc000
instr_00101741_1_$Uc000 ⊑ instr_0010172d_0_RBP.store.σ64@-8
instr_00101753_0_RDI ⊑ sub_001012ed:blk_0010172c.in_0
instr_00101756_0_RSP.store.σ64@0 ⊑ sub_00101728@RSP.σ64@-80
instr_00101756_2_RAX ⊑ instr_00101362_1_RBP.store.σ64@-24
instr_0010175f_1_$Uc000 ⊑ instr_0010175f_2_RCX
instr_0010175f_2_RCX ⊑ instr_0010176b_0_RSI
instr_00101763_1_$Uc000 ⊑ instr_00101763_2_RDX
instr_00101763_2_RDX ⊑ sub_001014fb:blk_0010175b.in_2
instr_00101767_1_$Uc000 ⊑ instr_00101767_2_RAX
instr_00101767_1_$Uc000 ⊑ instr_0010176e_0_RDI
instr_0010176b_0_RSI ⊑ sub_001014fb:blk_0010175b.in_1
instr_0010176e_0_RDI ⊑ sub_001014fb:blk_0010175b.in_0
instr_00101771_0_RSP.store.σ64@0 ⊑ sub_00101728@RSP.σ64@-80
instr_00101771_2_RAX ⊑ instr_001015a5_1_RBP.store.σ64@-16
instr_00101781_0_RDI ⊑ sub_00101040:blk_00101781.in_0
instr_00101788_0_RSP ⊑ τ482
instr_00101788_0_RSP.store.σ64@0 ⊑ sub_00101728@RSP.σ64@-80
instr_00101792_1_$Uc000.load.σ64@32 ⊑ instr_00101796_1_$Uc000
instr_001017ae_1_$Uc000 ⊑ instr_001015a5_1_RBP.store.σ64@-32
instr_001017b2_1_$Uc000.load.σ64@0 ⊑ instr_001017b6_0_$Uc000
instr_001017b6_0_$Uc000 ⊑ instr_001017b6_1_RAX
instr_001017bf_1_$Uc000.load.σ64@40 ⊑ instr_001017c3_1_$Uc000
instr_001017ce_1_$Uc000.load.σ64@0 ⊑ instr_001017d2_0_$Uc000
instr_001017d2_0_$Uc000.+40 ⊑ instr_001017d9_1_$Uc000
instr_001017d9_1_$Uc000 ⊑ instr_001015a5_1_RBP.store.σ64@-32
instr_001017dd_1_$Uc000.load.σ64@0 ⊑ instr_001017e1_0_$Uc000
instr_001017e1_0_$Uc000 ⊑ instr_001017e1_1_RAX
instr_001017ea_1_$Uc000.load.σ64@40 ⊑ instr_001017ee_1_$Uc000
instr_001017ee_1_$Uc000 ⊑ instr_001017ee_2_RDX
instr_001017ee_2_RDX ⊑ instr_001017f2_2_RAX.store.σ64@0
instr_001017f2_1_$Uc000 ⊑ instr_001017f2_2_RAX
instr_001017f2_2_RAX.store.σ64@0 ⊑ instr_00101954_2@RSP
instr_001017f9_1_$Uc000.load.σ64@0 ⊑ instr_001017fd_0_$Uc000
instr_001017fd_0_$Uc000 ⊑ instr_001017fd_1_RAX
instr_001017fd_0_$Uc000 ⊑ instr_00101800_0_RDI
instr_00101800_0_RDI ⊑ sub_001010c0:blk_001017f9.in_0
instr_00101803_0_RSP.store.σ64@0 ⊑ sub_00101728@RSP.σ64@-80
instr_00101808_1_$Uc000.load.σ64@8 ⊑ instr_0010180c_1_$Uc000
instr_0010180c_1_$Uc000 ⊑ instr_0010180c_2_RAX
instr_0010180c_1_$Uc000 ⊑ instr_00101810_0_RDI
instr_00101810_0_RDI ⊑ sub_001010c0:blk_00101808.in_0
instr_00101813_0_RSP.store.σ64@0 ⊑ sub_00101728@RSP.σ64@-80
instr_00101818_1_$Uc000 ⊑ instr_00101818_2_RAX
instr_00101818_1_$Uc000 ⊑ instr_0010181c_0_RDI
instr_0010181c_0_RDI ⊑ sub_001010c0:blk_00101818.in_0
instr_0010181f_0_RSP.store.σ64@0 ⊑ sub_00101728@RSP.σ64@-80
instr_00101824_0_RDI ⊑ sub_00101040:blk_00101824.in_0
instr_0010182b_0_RSP ⊑ τ482
instr_0010182b_0_RSP.store.σ64@0 ⊑ sub_00101728@RSP.σ64@-80
instr_00101830_1_$Uc000 ⊑ instr_00101830_2_RAX
instr_00101830_1_$Uc000 ⊑ instr_00101834_0_RDI
instr_00101834_0_RDI ⊑ sub_001010c0:blk_00101830.in_0
instr_00101837_0_RSP.store.σ64@0 ⊑ sub_00101728@RSP.σ64@-80
instr_0010183d_1_$Uc000 ⊑ instr_0010183d_2_RAX
instr_00101841_4_RAX ⊑ sub_00101728.out
instr_0010184c_0_RSP.store.σ64@0 ⊑ sub_00101728@RSP.σ64@-80
instr_00101851_0_RSP.+8 ⊑ instr_00101851_2_RSP
instr_00101851_2_RSP.load.σ64@0 ⊑ instr_00101852_0_RIP
instr_00101851_2_RSP.+8 ⊑ instr_00101852_1_RSP
instr_00101951_0_RDI ⊑ instr_0010172d_0_RBP.store.σ64@-56
instr_00101954_2@RSP ⊑ instr_001017b2_1_$Uc000.load.σ64@0
instr_00101954_2@RSP ⊑ instr_001017ce_1_$Uc000.load.σ64@0
instr_00101954_2@RSP ⊑ instr_001017dd_1_$Uc000.load.σ64@0
int ⊑ instr_00101745_2_RAX
int ⊑ instr_0010179f_1_RDX
sub_001012ed:blk_0010172c.out ⊑ instr_00101756_2_RAX
sub_001014fb:blk_0010175b.out ⊑ instr_00101771_2_RAX
sub_00101728.in_0 ⊑ instr_00101951_0_RDI
sub_00101728@RSP.σ64@-64 ⊑ instr_00101362_1_RBP.load.σ64@-56
sub_00101728@RSP.σ64@-64 ⊑ instr_001015a5_1_RBP.load.σ64@-56
sub_00101728@RSP.σ64@-48 ⊑ instr_00101362_1_RBP.load.σ64@-40
sub_00101728@RSP.σ64@-48 ⊑ instr_001015a5_1_RBP.load.σ64@-40
sub_00101728@RSP.σ64@-40 ⊑ instr_001015a5_1_RBP.load.σ64@-32
sub_00101728@RSP.σ64@-32 ⊑ instr_00101362_1_RBP.load.σ64@-24
sub_00101728@RSP.σ64@-24 ⊑ instr_001015a5_1_RBP.load.σ64@-16
sub_00101728@RSP.σ64@-16 ⊑ instr_001015a5_1_RBP.load.σ64@-8
sub_00101728@RSP.σ64@-8 ⊑ instr_001015a5_1_RBP.load.σ64@0
sub_00101728@RSP.σ64@0 ⊑ instr_00101851_2_RSP.load.σ64@0
τ433 ⊑ instr_0010172c_1_RSP
τ434 ⊑ instr_0010172c_1_RSP.store.σ64@0
τ436 ⊑ instr_00101730_2_RSP
τ437 ⊑ instr_00101745_0_CF
τ438 ⊑ instr_00101745_1_OF
τ439 ⊑ instr_00101745_4_SF
τ440 ⊑ instr_00101745_5_ZF
τ441 ⊑ instr_00101745_9_PF
τ442 ⊑ instr_0010172d_0_RBP.store.σ64@-40
τ444 ⊑ instr_00101756_0_RSP
τ445 ⊑ instr_00101756_0_RSP.store.σ64@0
τ447 ⊑ instr_00101771_0_RSP
τ448 ⊑ instr_00101771_0_RSP.store.σ64@0
τ449 ⊑ instr_0010177a_2_CF
τ450 ⊑ instr_0010177a_4_OF
τ451 ⊑ instr_0010177a_7_SF
τ452 ⊑ instr_0010177a_8_ZF
τ453 ⊑ instr_0010177a_12_PF
τ454 ⊑ instr_00101781_0_RDI
τ456 ⊑ instr_00101788_0_RSP
τ457 ⊑ instr_00101788_0_RSP.store.σ64@0
τ458 ⊑ instr_001017ae_1_$Uc000
τ459 ⊑ instr_001017c7_0_CF
τ460 ⊑ instr_001017c7_1_OF
τ461 ⊑ instr_001017c7_3_SF
τ462 ⊑ instr_001017c7_4_ZF
τ463 ⊑ instr_001017c7_8_PF
τ464 ⊑ instr_001017e4_2_CF
τ465 ⊑ instr_001017e4_4_OF
τ466 ⊑ instr_001017e4_7_SF
τ467 ⊑ instr_001017e4_8_ZF
τ468 ⊑ instr_001017e4_12_PF
τ470 ⊑ instr_00101803_0_RSP
τ471 ⊑ instr_00101803_0_RSP.store.σ64@0
τ473 ⊑ instr_00101813_0_RSP
τ474 ⊑ instr_00101813_0_RSP.store.σ64@0
τ476 ⊑ instr_0010181f_0_RSP
τ477 ⊑ instr_0010181f_0_RSP.store.σ64@0
τ478 ⊑ instr_00101824_0_RDI
τ480 ⊑ instr_0010182b_0_RSP
τ481 ⊑ instr_0010182b_0_RSP.store.σ64@0
τ484 ⊑ instr_00101837_0_RSP
τ485 ⊑ instr_00101837_0_RSP.store.σ64@0
τ486 ⊑ instr_00101841_1_CF
τ487 ⊑ instr_00101841_2_OF
τ488 ⊑ instr_00101841_4_RAX
τ489 ⊑ instr_00101841_5_SF
τ490 ⊑ instr_00101841_6_ZF
τ491 ⊑ instr_00101841_10_PF
τ493 ⊑ instr_0010184c_0_RSP
τ494 ⊑ instr_0010184c_0_RSP.store.σ64@0
Add(instr_00101363_1_RSP,τ446,τ447)
Add(instr_001015a6_1_RSP,τ455,τ456)
Add(instr_001015a6_1_RSP,τ469,τ470)
Add(instr_0010172c_1_RSP,τ435,τ436)
Add(instr_00101730_2_RSP,τ443,τ444)
Add(instr_001017a7_1_$Uc000,instr_0010179f_1_RDX,τ458)
Add(instr_00101803_0_RSP,τ472,τ473)
Add(instr_00101813_0_RSP,τ475,τ476)
Add(instr_0010181f_0_RSP,τ479,τ480)
Add(instr_00101837_0_RSP,τ492,τ493)
Add(instr_00101954_0_RSP,τ432,τ433)
Add(τ482,τ483,τ484)

Int instr_00101745_2_RAX
Int instr_0010179f_1_RDX
Int int
Int τ435
Int instr_00101745_2_RAX
Int instr_0010179f_1_RDX
Int int
Int τ435
Diff instr_001017a7_1_$Uc000 ⊑ τ458
τ435 ⊑ int
τ436 ⊑ instr_0010172c_1_RSP

Final sub_001012ed:blk_0010172c.out ⊑ sub_001014fb:blk_0010175b.in_2
sub_001014fb:blk_0010175b.out ⊑ sub_001010c0:blk_00101818.in_0
sub_001014fb:blk_0010175b.out.load.σ64@0 ⊑ sub_001010c0:blk_001017f9.in_0
sub_001014fb:blk_0010175b.out.load.σ64@8 ⊑ sub_001010c0:blk_00101808.in_0
sub_001014fb:blk_0010175b.out.load.σ64@40 ⊑ loop_breaker495.store.σ64@0
sub_00101728.in_0 ⊑ loop_breaker495
sub_00101728.in_0 ⊑ sub_001014fb:blk_0010175b.in_0

Cons for: {
    Tid {
        id: "sub_00101030",
        address: "00101030",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00101090",
        address: "00101090",
    },
}
Basic cons: 
Diff 
Final 
Cons for: {
    Tid {
        id: "sub_00101853",
        address: "00101853",
    },
}
Basic cons: entry_fresh_definition1355 ⊑ instr_00101857_1_RSP.store.σ64@0
entry_fresh_definition1356 ⊑ instr_00101858_0_RBP.store.σ64@-32816
entry_fresh_definition1372.load.σ64@40 ⊑ instr_00101885_1_$Uc000
instr_001011ee_0_RBP ⊑ τ534
instr_001011ee_0_RBP ⊑ τ536
instr_001011ee_0_RBP ⊑ τ538
instr_001011ee_0_RBP ⊑ τ542
instr_001011ee_0_RBP ⊑ τ544
instr_001011ee_0_RBP ⊑ τ546
instr_001011ee_0_RBP ⊑ τ550
instr_001011ee_0_RBP ⊑ τ552
instr_001011ee_0_RBP ⊑ τ554
instr_001011ee_0_RBP ⊑ τ558
instr_001011ee_0_RBP ⊑ τ560
instr_001011ee_0_RBP ⊑ τ562
instr_001011ee_0_RBP ⊑ τ566
instr_001011ee_0_RBP ⊑ τ568
instr_001011ee_0_RBP ⊑ τ570
instr_001011ee_0_RBP ⊑ τ574
instr_001011ee_0_RBP ⊑ τ576
instr_001011ee_0_RBP ⊑ τ578
instr_001011ee_0_RBP ⊑ τ582
instr_001011ee_0_RBP ⊑ τ583
instr_001011ee_0_RBP ⊑ τ588
instr_001011ee_0_RBP ⊑ τ589
instr_001011ee_0_RBP ⊑ τ594
instr_001011ee_0_RBP ⊑ τ595
instr_0010128d_1_RBP ⊑ τ534
instr_0010128d_1_RBP ⊑ τ536
instr_0010128d_1_RBP ⊑ τ538
instr_0010128d_1_RBP ⊑ τ542
instr_0010128d_1_RBP ⊑ τ544
instr_0010128d_1_RBP ⊑ τ546
instr_0010128d_1_RBP ⊑ τ550
instr_0010128d_1_RBP ⊑ τ552
instr_0010128d_1_RBP ⊑ τ554
instr_0010128d_1_RBP ⊑ τ558
instr_0010128d_1_RBP ⊑ τ560
instr_0010128d_1_RBP ⊑ τ562
instr_0010128d_1_RBP ⊑ τ566
instr_0010128d_1_RBP ⊑ τ568
instr_0010128d_1_RBP ⊑ τ570
instr_0010128d_1_RBP ⊑ τ574
instr_0010128d_1_RBP ⊑ τ576
instr_0010128d_1_RBP ⊑ τ578
instr_0010128d_1_RBP ⊑ τ582
instr_0010128d_1_RBP ⊑ τ583
instr_0010128d_1_RBP ⊑ τ588
instr_0010128d_1_RBP ⊑ τ589
instr_0010128d_1_RBP ⊑ τ594
instr_0010128d_1_RBP ⊑ τ595
instr_001012e6_0_RSP ⊑ τ584
instr_001012e6_0_RSP ⊑ τ590
instr_001012e6_0_RSP ⊑ τ596
instr_001012e6_0_RSP ⊑ τ601
instr_001012e6_0_RSP ⊑ τ610
instr_001012eb_1_RBP ⊑ τ534
instr_001012eb_1_RBP ⊑ τ536
instr_001012eb_1_RBP ⊑ τ538
instr_001012eb_1_RBP ⊑ τ542
instr_001012eb_1_RBP ⊑ τ544
instr_001012eb_1_RBP ⊑ τ546
instr_001012eb_1_RBP ⊑ τ550
instr_001012eb_1_RBP ⊑ τ552
instr_001012eb_1_RBP ⊑ τ554
instr_001012eb_1_RBP ⊑ τ558
instr_001012eb_1_RBP ⊑ τ560
instr_001012eb_1_RBP ⊑ τ562
instr_001012eb_1_RBP ⊑ τ566
instr_001012eb_1_RBP ⊑ τ568
instr_001012eb_1_RBP ⊑ τ570
instr_001012eb_1_RBP ⊑ τ574
instr_001012eb_1_RBP ⊑ τ576
instr_001012eb_1_RBP ⊑ τ578
instr_001012eb_1_RBP ⊑ τ582
instr_001012eb_1_RBP ⊑ τ583
instr_001012eb_1_RBP ⊑ τ588
instr_001012eb_1_RBP ⊑ τ589
instr_001012eb_1_RBP ⊑ τ594
instr_001012eb_1_RBP ⊑ τ595
instr_001012ec_1_RSP ⊑ τ584
instr_001012ec_1_RSP ⊑ τ590
instr_001012ec_1_RSP ⊑ τ596
instr_001012ec_1_RSP ⊑ τ601
instr_001012ec_1_RSP ⊑ τ610
instr_00101676_1_RSP ⊑ τ524
instr_00101721_0_RSP ⊑ τ524
instr_00101727_1_RSP ⊑ τ524
instr_0010184c_0_RSP ⊑ τ524
instr_00101852_1_RSP ⊑ τ524
instr_00101857_1_RSP ⊑ instr_00101858_0_RBP
instr_00101857_1_RSP ⊑ τ498
instr_00101857_1_RSP.store.σ64@0 ⊑ sub_00101853@RSP.σ64@-8
instr_00101857_1_RSP.+-32768 ⊑ instr_0010185b_1_R11
instr_00101858_0_RBP.store.σ64@-32816 ⊑ sub_00101853@RSP.σ64@-32824
instr_00101858_0_RBP.store.σ32@-32804 ⊑ sub_00101853@RSP.σ32@-32812
instr_00101858_0_RBP.store.σ64@-8 ⊑ sub_00101853@RSP.σ64@-16
instr_00101863_2_RSP ⊑ τ498
instr_00101863_2_RSP.load.σ64@0 ⊑ instr_0010186a_2_$Uc080
instr_00101863_2_RSP.load.σ64@0 ⊑ instr_0010186a_5_$Uc080
instr_00101863_2_RSP.load.σ64@0 ⊑ instr_0010186a_7_$Uc080
instr_00101863_2_RSP.load.σ64@0 ⊑ instr_0010186a_9_$Uc080
instr_00101863_2_RSP.store.σ64@0 ⊑ sub_00101853@RSP
instr_0010186a_2_$Uc080 ⊑ instr_0010186a_3_$Uc080
instr_0010186a_3_$Uc080 ⊑ instr_00101863_2_RSP.store.σ64@0
instr_00101885_1_$Uc000 ⊑ instr_0010188e_1_$Uc000
instr_0010188e_1_$Uc000 ⊑ instr_00101858_0_RBP.store.σ64@-8
instr_00101894_0_load0_$load_temp0.load.σ64@0 ⊑ instr_0010189b_0_$Uc000
instr_0010189b_0_$Uc000 ⊑ instr_0010189b_1_RAX
instr_0010189b_0_$Uc000 ⊑ instr_001018ad_0_RDI
instr_0010189e_0_RCX ⊑ sub_00101030:blk_00101874.in_3
instr_001018a3_0_RDX ⊑ sub_00101030:blk_00101874.in_2
instr_001018a8_0_RSI ⊑ sub_00101030:blk_00101874.in_1
instr_001018ad_0_RDI ⊑ sub_00101030:blk_00101874.in_0
instr_001018b0_0_RSP.store.σ64@0 ⊑ sub_00101853@RSP.σ64@-32832
instr_001018b5_0_load0_$load_temp0.load.σ64@0 ⊑ instr_001018bc_0_$Uc000
instr_001018bc_0_$Uc000 ⊑ instr_001018bc_1_RAX
instr_001018bc_0_$Uc000 ⊑ instr_001018ce_0_RDI
instr_001018bf_0_RCX ⊑ sub_00101030:blk_001018b5.in_3
instr_001018c4_0_RDX ⊑ sub_00101030:blk_001018b5.in_2
instr_001018c9_0_RSI ⊑ sub_00101030:blk_001018b5.in_1
instr_001018ce_0_RDI ⊑ sub_00101030:blk_001018b5.in_0
instr_001018d1_0_RSP ⊑ τ524
instr_001018d1_0_RSP.store.σ64@0 ⊑ sub_00101853@RSP.σ64@-32832
instr_001018db_0_RSP.store.σ64@0 ⊑ sub_00101853@RSP.σ64@-32832
instr_001018e5_0_RSP.store.σ64@0 ⊑ sub_00101853@RSP.σ64@-32832
instr_0010192f_0_RDI ⊑ sub_001015a7:blk_00101928.in_0
instr_00101932_0_RSP.store.σ64@0 ⊑ sub_00101853@RSP.σ64@-32832
instr_00101940_0_RDI ⊑ sub_00101677:blk_00101939.in_0
instr_00101943_0_RSP.store.σ64@0 ⊑ sub_00101853@RSP.σ64@-32832
instr_00101951_0_RDI ⊑ sub_00101728:blk_0010194a.in_0
instr_00101954_0_RSP.store.σ64@0 ⊑ sub_00101853@RSP.σ64@-32832
instr_0010195b_0_RDI ⊑ sub_00101040:blk_0010195b.in_0
instr_00101962_0_RSP.store.σ64@0 ⊑ sub_00101853@RSP.σ64@-32832
instr_00101962_2_RAX ⊑ sub_00101853.out
instr_00101967_0_RDI ⊑ sub_00101090:blk_00101967.in_0
instr_0010196c_0_RSP.store.σ64@0 ⊑ sub_00101853@RSP.σ64@-32832
instr_00101971_0_RDI ⊑ sub_00101040:blk_00101971.in_0
instr_00101978_0_RSP.store.σ64@0 ⊑ sub_00101853@RSP.σ64@-32832
instr_00101978_2_RAX ⊑ sub_00101853.out
instr_0010197d_0_RDI ⊑ sub_00101090:blk_0010197d.in_0
instr_00101982_0_RSP.store.σ64@0 ⊑ sub_00101853@RSP.σ64@-32832
int ⊑ instr_00101892_2_RAX
sub_0010128f:blk_001018e0.out ⊑ instr_001018e5_2_RAX
sub_001014af:blk_001018d6.out ⊑ instr_001018db_2_RAX
sub_001015a7:blk_00101928.out ⊑ instr_00101932_2_RAX
sub_00101677:blk_00101939.out ⊑ instr_00101943_2_RAX
sub_00101728:blk_0010194a.out ⊑ instr_00101954_2_RAX
sub_00101853@RSP ⊑ instr_00101863_2_RSP.load.σ64@0
sub_00101853@RSP.σ32@-32796 ⊑ τ534.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ536.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ538.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ542.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ544.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ546.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ550.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ552.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ554.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ558.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ560.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ562.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ566.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ568.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ570.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ574.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ576.load.σ32@-32788
sub_00101853@RSP.σ32@-32796 ⊑ τ578.load.σ32@-32788
τ497 ⊑ instr_00101857_1_RSP
τ500 ⊑ instr_00101863_2_RSP
τ502 ⊑ instr_00101874_2_RSP
τ503 ⊑ instr_00101858_0_RBP.store.σ32@-32804
τ504 ⊑ instr_00101892_0_CF
τ505 ⊑ instr_00101892_1_OF
τ506 ⊑ instr_00101892_4_SF
τ507 ⊑ instr_00101892_5_ZF
τ508 ⊑ instr_00101892_9_PF
τ509.load.σ64@0 ⊑ instr_00101894_0_load0_$load_temp0
τ510 ⊑ instr_0010189e_0_RCX
τ511 ⊑ instr_001018a3_0_RDX
τ512 ⊑ instr_001018a8_0_RSI
τ514 ⊑ instr_001018b0_0_RSP
τ515 ⊑ instr_001018b0_0_RSP.store.σ64@0
τ516.load.σ64@0 ⊑ instr_001018b5_0_load0_$load_temp0
τ517 ⊑ instr_001018bf_0_RCX
τ518 ⊑ instr_001018c4_0_RDX
τ519 ⊑ instr_001018c9_0_RSI
τ521 ⊑ instr_001018d1_0_RSP
τ522 ⊑ instr_001018d1_0_RSP.store.σ64@0
τ523 ⊑ instr_001018d6_0_RAX
τ526 ⊑ instr_001018db_0_RSP
τ527 ⊑ instr_001018db_0_RSP.store.σ64@0
τ528 ⊑ instr_001018e0_0_RAX
τ530 ⊑ instr_001018e5_0_RSP
τ531 ⊑ instr_001018e5_0_RSP.store.σ64@0
τ532 ⊑ instr_001011ee_0_RBP
τ532 ⊑ instr_0010128d_1_RBP
τ532 ⊑ instr_001012eb_1_RBP
τ532.store.σ32@-32788 ⊑ sub_00101853@RSP.σ32@-32796
τ533 ⊑ τ532.store.σ32@-32788
τ534.load.σ32@-32788 ⊑ instr_001018f0_1_$Ubf80
τ535 ⊑ instr_001018f0_2_CF
τ536.load.σ32@-32788 ⊑ instr_001018f0_3_$Ubf80
τ537 ⊑ instr_001018f0_4_OF
τ538.load.σ32@-32788 ⊑ instr_001018f0_5_$Ubf80
τ539 ⊑ instr_001018f0_7_SF
τ540 ⊑ instr_001018f0_8_ZF
τ541 ⊑ instr_001018f0_12_PF
τ542.load.σ32@-32788 ⊑ instr_001018f9_1_$Ubf80
τ543 ⊑ instr_001018f9_2_CF
τ544.load.σ32@-32788 ⊑ instr_001018f9_3_$Ubf80
τ545 ⊑ instr_001018f9_4_OF
τ546.load.σ32@-32788 ⊑ instr_001018f9_5_$Ubf80
τ547 ⊑ instr_001018f9_7_SF
τ548 ⊑ instr_001018f9_8_ZF
τ549 ⊑ instr_001018f9_12_PF
τ550.load.σ32@-32788 ⊑ instr_00101902_1_$Ubf80
τ551 ⊑ instr_00101902_2_CF
τ552.load.σ32@-32788 ⊑ instr_00101902_3_$Ubf80
τ553 ⊑ instr_00101902_4_OF
τ554.load.σ32@-32788 ⊑ instr_00101902_5_$Ubf80
τ555 ⊑ instr_00101902_7_SF
τ556 ⊑ instr_00101902_8_ZF
τ557 ⊑ instr_00101902_12_PF
τ558.load.σ32@-32788 ⊑ instr_0010190b_1_$Ubf80
τ559 ⊑ instr_0010190b_2_CF
τ560.load.σ32@-32788 ⊑ instr_0010190b_3_$Ubf80
τ561 ⊑ instr_0010190b_4_OF
τ562.load.σ32@-32788 ⊑ instr_0010190b_5_$Ubf80
τ563 ⊑ instr_0010190b_7_SF
τ564 ⊑ instr_0010190b_8_ZF
τ565 ⊑ instr_0010190b_12_PF
τ566.load.σ32@-32788 ⊑ instr_00101914_1_$Ubf80
τ567 ⊑ instr_00101914_2_CF
τ568.load.σ32@-32788 ⊑ instr_00101914_3_$Ubf80
τ569 ⊑ instr_00101914_4_OF
τ570.load.σ32@-32788 ⊑ instr_00101914_5_$Ubf80
τ571 ⊑ instr_00101914_7_SF
τ572 ⊑ instr_00101914_8_ZF
τ573 ⊑ instr_00101914_12_PF
τ574.load.σ32@-32788 ⊑ instr_0010191d_1_$Ubf80
τ575 ⊑ instr_0010191d_2_CF
τ576.load.σ32@-32788 ⊑ instr_0010191d_3_$Ubf80
τ577 ⊑ instr_0010191d_4_OF
τ578.load.σ32@-32788 ⊑ instr_0010191d_5_$Ubf80
τ579 ⊑ instr_0010191d_7_SF
τ580 ⊑ instr_0010191d_8_ZF
τ581 ⊑ instr_0010191d_12_PF
τ582.+-32784 ⊑ instr_00101928_1_RAX
τ583.+-32784 ⊑ instr_0010192f_0_RDI
τ586 ⊑ instr_00101932_0_RSP
τ587 ⊑ instr_00101932_0_RSP.store.σ64@0
τ588.+-32784 ⊑ instr_00101939_1_RAX
τ589.+-32784 ⊑ instr_00101940_0_RDI
τ592 ⊑ instr_00101943_0_RSP
τ593 ⊑ instr_00101943_0_RSP.store.σ64@0
τ594.+-32784 ⊑ instr_0010194a_1_RAX
τ595.+-32784 ⊑ instr_00101951_0_RDI
τ598 ⊑ instr_00101954_0_RSP
τ599 ⊑ instr_00101954_0_RSP.store.σ64@0
τ600 ⊑ instr_0010195b_0_RDI
τ603 ⊑ instr_00101962_0_RSP
τ604 ⊑ instr_00101962_0_RSP.store.σ64@0
τ605 ⊑ instr_00101967_0_RDI
τ607 ⊑ instr_0010196c_0_RSP
τ608 ⊑ instr_0010196c_0_RSP.store.σ64@0
τ609 ⊑ instr_00101971_0_RDI
τ612 ⊑ instr_00101978_0_RSP
τ613 ⊑ instr_00101978_0_RSP.store.σ64@0
τ614 ⊑ instr_0010197d_0_RDI
τ616 ⊑ instr_00101982_0_RSP
τ617 ⊑ instr_00101982_0_RSP.store.σ64@0
Add(entry_fresh_definition1354,τ496,τ497)
Add(instr_001014fa_1_RSP,τ529,τ530)
Add(instr_00101863_2_RSP,τ501,τ502)
Add(instr_00101874_2_RSP,τ513,τ514)
Add(instr_001018b0_0_RSP,τ520,τ521)
Add(instr_00101962_0_RSP,τ606,τ607)
Add(instr_00101978_0_RSP,τ615,τ616)
Add(τ498,τ499,τ500)
Add(τ524,τ525,τ526)
Add(τ584,τ585,τ586)
Add(τ590,τ591,τ592)
Add(τ596,τ597,τ598)
Add(τ601,τ602,τ603)
Add(τ610,τ611,τ612)

Int instr_00101892_2_RAX
Int int
Int τ501
Diff τ501 ⊑ int
τ502 ⊑ instr_00101863_2_RSP

Final 
Cons for: {
    Tid {
        id: "sub_0010198c",
        address: "0010198c",
    },
}
Basic cons: entry_fresh_definition1485 ⊑ instr_0010198c_1_RSP.store.σ64@0
instr_0010198c_1_RSP.load.σ64@0 ⊑ instr_0010198d_0_RAX
instr_0010198c_1_RSP.store.σ64@0 ⊑ sub_0010198c@RSP.σ64@-8
instr_0010198c_1_RSP.+8 ⊑ instr_0010198d_1_RSP
instr_0010198d_0_RAX ⊑ sub_0010198c.out
instr_0010198d_1_RSP.load.σ64@0 ⊑ instr_0010198e_0_RIP
instr_0010198d_1_RSP.+8 ⊑ instr_0010198e_1_RSP
sub_0010198c@RSP.σ64@-8 ⊑ instr_0010198c_1_RSP.load.σ64@0
sub_0010198c@RSP.σ64@0 ⊑ instr_0010198d_1_RSP.load.σ64@0
τ619 ⊑ instr_0010198c_1_RSP
Add(entry_fresh_definition1489,τ618,τ619)

Diff 
Final 
Sketch for [
    Tid {
        id: "sub_00105068",
        address: "00105068",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00105048",
        address: "00105048",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00105030",
        address: "00105030",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_001010d0",
        address: "001010d0",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_001010c0",
        address: "001010c0",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_001010a0",
        address: "001010a0",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00101090",
        address: "00101090",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00101080",
        address: "00101080",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00101070",
        address: "00101070",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00101060",
        address: "00101060",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00101050",
        address: "00101050",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00101040",
        address: "00101040",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00101030",
        address: "00101030",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00101020",
        address: "00101020",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_0010198c",
        address: "0010198c",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_001014af",
        address: "001014af",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00101436",
        address: "00101436",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_001013db",
        address: "001013db",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_001014fb",
        address: "001014fb",
    },
]
digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    2 -> 6 [ label = "0:out" ]
    6 -> 5 [ label = "1:load" ]
    5 -> 4 [ label = "2:σ64@0" ]
    3 -> 4 [ label = "3:in_1" ]
    5 -> 6 [ label = "4:σ64@40" ]
    2 -> 0 [ label = "5:in_0" ]
    0 -> 7 [ label = "6:load" ]
    7 -> 6 [ label = "7:σ64@0" ]
    2 -> 1 [ label = "8:in_1" ]
    3 -> 1 [ label = "9:in_0" ]
    8 -> 1 [ label = "10:in_0" ]
    2 -> 9 [ label = "11:in_2" ]
    3 -> 9 [ label = "12:in_2" ]
    8 -> 9 [ label = "13:in_1" ]
}

sub_001013db:blk_001014ff:NodeIndex(8)
sub_00101080:blk_00101569.in_1:NodeIndex(4)
sub_001014fb.out:NodeIndex(6)
loop_breaker339.load.σ64@0:NodeIndex(4)
sub_00101080:blk_00101569.in_2:NodeIndex(9)
sub_00101080:blk_00101569:NodeIndex(3)
sub_001014fb.in_1:NodeIndex(1)
sub_001013db:blk_001014ff.in_0:NodeIndex(1)
sub_001013db:blk_001014ff.in_1:NodeIndex(9)
sub_001014fb:NodeIndex(2)
sub_00101080:blk_00101569.in_0:NodeIndex(1)
sub_001014fb.in_0:NodeIndex(0)
loop_breaker339.load:NodeIndex(5)
loop_breaker340:NodeIndex(5)
loop_breaker340.σ64@40:NodeIndex(6)
loop_breaker339:NodeIndex(6)
sub_001014fb.in_2:NodeIndex(9)
sub_001014fb.in_0.load:NodeIndex(7)
sub_001014fb.in_0.load.σ64@0:NodeIndex(6)
Sketch for [
    Tid {
        id: "sub_001011e9",
        address: "001011e9",
    },
]
digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[int,T]" ]
    0 -> 1 [ label = "0:out" ]
    0 -> 1 [ label = "1:in_1" ]
}

int:NodeIndex(1)
sub_001011e9:NodeIndex(0)
sub_001011e9.in_1:NodeIndex(1)
sub_001011e9.out:NodeIndex(1)
Sketch for [
    Tid {
        id: "sub_0010128f",
        address: "0010128f",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00101364",
        address: "00101364",
    },
]
digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[int,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    5 -> 1 [ label = "0:in_1" ]
    6 -> 1 [ label = "1:in_1" ]
    2 -> 1 [ label = "2:out" ]
    2 -> 3 [ label = "3:in_0" ]
    3 -> 4 [ label = "4:load" ]
    4 -> 0 [ label = "5:σ64@0" ]
    6 -> 0 [ label = "6:in_0" ]
}

sub_00101364.in_0.load:NodeIndex(4)
sub_00101060:blk_0010138f:NodeIndex(5)
sub_00101060:blk_0010138f.in_1:NodeIndex(1)
sub_00101364.in_0:NodeIndex(3)
sub_00101364.out:NodeIndex(1)
sub_001011e9:blk_001013c1:NodeIndex(6)
sub_00101364:NodeIndex(2)
sub_00101364.in_0.load.σ64@0:NodeIndex(0)
sub_001011e9:blk_001013c1.in_0:NodeIndex(0)
int:NodeIndex(1)
sub_001011e9:blk_001013c1.in_1:NodeIndex(1)
sub_001011e9:blk_001013c1.out:NodeIndex(1)
Sketch for [
    Tid {
        id: "sub_001012ed",
        address: "001012ed",
    },
]
digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    6 -> 3 [ label = "0:in_1" ]
    1 -> 3 [ label = "1:in_1" ]
    5 -> 3 [ label = "2:out" ]
    5 -> 2 [ label = "3:in_0" ]
    2 -> 4 [ label = "4:load" ]
    4 -> 0 [ label = "5:σ64@0" ]
    1 -> 0 [ label = "6:in_0" ]
}

sub_001011e9:blk_0010134a.in_0:NodeIndex(0)
sub_001011e9:blk_0010134a:NodeIndex(1)
sub_001011e9:blk_0010134a.out:NodeIndex(3)
sub_001012ed:NodeIndex(5)
sub_00101060:blk_00101318.in_1:NodeIndex(3)
sub_001011e9:blk_0010134a.in_1:NodeIndex(3)
sub_001012ed.in_0:NodeIndex(2)
sub_001012ed.in_0.load.σ64@0:NodeIndex(0)
sub_00101060:blk_00101318:NodeIndex(6)
sub_001012ed.out:NodeIndex(3)
sub_001012ed.in_0.load:NodeIndex(4)
int:NodeIndex(3)
Sketch for [
    Tid {
        id: "sub_00101728",
        address: "00101728",
    },
]
digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    12 [ label = "12:[bottom,T]" ]
    9 -> 3 [ label = "0:out" ]
    1 -> 3 [ label = "1:in_2" ]
    7 -> 4 [ label = "2:load" ]
    4 -> 2 [ label = "3:σ64@0" ]
    4 -> 7 [ label = "4:σ64@40" ]
    1 -> 7 [ label = "5:out" ]
    6 -> 7 [ label = "6:in_0" ]
    0 -> 2 [ label = "7:in_0" ]
    4 -> 8 [ label = "8:σ64@8" ]
    10 -> 8 [ label = "9:in_0" ]
    12 -> 5 [ label = "10:store" ]
    5 -> 7 [ label = "11:σ64@0" ]
    11 -> 12 [ label = "12:in_0" ]
    12 -> 5 [ label = "13:load" ]
}

sub_001011e9:blk_0010134a.out:NodeIndex(3)
sub_001014fb:blk_0010175b.out.load.σ64@40:NodeIndex(7)
sub_00101728.in_0:NodeIndex(12)
loop_breaker340:NodeIndex(4)
sub_001014fb:blk_0010175b.out.load.σ64@8:NodeIndex(8)
sub_001014fb:blk_0010175b.in_0:NodeIndex(12)
sub_001012ed:blk_0010172c.out:NodeIndex(3)
sub_00101060:blk_00101318.in_1:NodeIndex(3)
loop_breaker495.store:NodeIndex(5)
loop_breaker339:NodeIndex(7)
sub_001014fb:blk_0010175b:NodeIndex(1)
sub_001010c0:blk_001017f9.in_0:NodeIndex(2)
sub_00101728:NodeIndex(11)
sub_001010c0:blk_00101818:NodeIndex(6)
sub_001010c0:blk_00101808:NodeIndex(10)
loop_breaker339.load:NodeIndex(4)
loop_breaker495.store.σ64@0:NodeIndex(7)
sub_001013db:blk_001014ff.in_1:NodeIndex(3)
sub_001010c0:blk_001017f9:NodeIndex(0)
sub_001014fb:blk_0010175b.out:NodeIndex(7)
sub_001011e9:blk_0010134a.in_1:NodeIndex(3)
loop_breaker340.σ64@40:NodeIndex(7)
loop_breaker339.load.σ64@0:NodeIndex(2)
sub_001014fb:blk_0010175b.in_0.load:NodeIndex(5)
sub_001014fb:blk_0010175b.out.load.σ64@0:NodeIndex(2)
sub_00101080:blk_00101569.in_1:NodeIndex(2)
sub_001010c0:blk_00101808.in_0:NodeIndex(8)
loop_breaker495:NodeIndex(12)
sub_00101080:blk_00101569.in_2:NodeIndex(3)
sub_001012ed:blk_0010172c:NodeIndex(9)
sub_001014fb:blk_0010175b.out.load:NodeIndex(4)
sub_001010c0:blk_00101818.in_0:NodeIndex(7)
int:NodeIndex(3)
sub_001014fb:blk_0010175b.in_0.load.σ64@0:NodeIndex(7)
sub_001014fb:blk_0010175b.in_2:NodeIndex(3)
Sketch for [
    Tid {
        id: "sub_00101677",
        address: "00101677",
    },
]
digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[int,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    5 -> 9 [ label = "0:out" ]
    1 -> 9 [ label = "1:in_2" ]
    11 -> 0 [ label = "2:load" ]
    0 -> 8 [ label = "3:σ64@0" ]
    0 -> 10 [ label = "4:σ64@8" ]
    7 -> 10 [ label = "5:in_0" ]
    0 -> 4 [ label = "6:σ64@24" ]
    7 -> 4 [ label = "7:in_1" ]
    2 -> 3 [ label = "8:in_0" ]
    1 -> 11 [ label = "9:out" ]
    0 -> 11 [ label = "10:σ64@40" ]
    3 -> 6 [ label = "11:load" ]
    6 -> 11 [ label = "12:σ64@0" ]
}

sub_00101677.in_0:NodeIndex(3)
sub_001012ed:blk_0010167b:NodeIndex(5)
sub_001014fb:blk_001016aa.in_2:NodeIndex(9)
sub_001014fb:blk_001016aa.out.load.σ64@24:NodeIndex(4)
sub_00101436:blk_001016de:NodeIndex(7)
loop_breaker339.load.σ64@0:NodeIndex(8)
loop_breaker339.load:NodeIndex(0)
sub_001012ed:blk_0010167b.out:NodeIndex(9)
sub_001014fb:blk_001016aa.in_0.load.σ64@0:NodeIndex(11)
loop_breaker340:NodeIndex(0)
sub_00101436:blk_001016de.in_1:NodeIndex(4)
loop_breaker339:NodeIndex(11)
int:NodeIndex(9)
sub_001014fb:blk_001016aa.out.load:NodeIndex(0)
loop_breaker340.σ64@40:NodeIndex(11)
sub_001013db:blk_001014ff.in_1:NodeIndex(9)
sub_00101080:blk_00101569.in_2:NodeIndex(9)
sub_00101677:NodeIndex(2)
sub_001014fb:blk_001016aa.in_0:NodeIndex(3)
sub_001014fb:blk_001016aa.out.load.σ64@8:NodeIndex(10)
sub_001014fb:blk_001016aa.out:NodeIndex(11)
sub_001011e9:blk_0010134a.out:NodeIndex(9)
sub_001014fb:blk_001016aa.in_0.load:NodeIndex(6)
sub_00101436:blk_001016de.in_0:NodeIndex(10)
sub_001011e9:blk_0010134a.in_1:NodeIndex(9)
sub_001014fb:blk_001016aa:NodeIndex(1)
sub_00101080:blk_00101569.in_1:NodeIndex(8)
sub_00101060:blk_00101318.in_1:NodeIndex(9)
Sketch for [
    Tid {
        id: "sub_001015a7",
        address: "001015a7",
    },
]
digraph {
    0 [ label = "0:[int,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    1 -> 0 [ label = "0:out" ]
    2 -> 0 [ label = "1:in_1" ]
}

sub_001013db:blk_001015ee.in_1:NodeIndex(0)
sub_001011e9:blk_0010134a.out:NodeIndex(0)
sub_00101060:blk_00101318.in_1:NodeIndex(0)
sub_001012ed:blk_001015c6:NodeIndex(1)
sub_001013db:blk_001015ee:NodeIndex(2)
sub_001011e9:blk_0010134a.in_1:NodeIndex(0)
sub_001012ed:blk_001015c6.out:NodeIndex(0)
int:NodeIndex(0)
Sketch for [
    Tid {
        id: "sub_00101853",
        address: "00101853",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00101160",
        address: "00101160",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_001011e0",
        address: "001011e0",
    },
]
digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    2 -> 0 [ label = "0:out" ]
    1 -> 0 [ label = "1:out" ]
}

sub_001011e0.out:NodeIndex(0)
sub_00101160:blk_001011e4.out:NodeIndex(0)
sub_001011e0:NodeIndex(1)
sub_00101160:blk_001011e4:NodeIndex(2)
Sketch for [
    Tid {
        id: "sub_00101130",
        address: "00101130",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_001011a0",
        address: "001011a0",
    },
]
digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    2 -> 1 [ label = "0:out" ]
    0 -> 1 [ label = "1:out" ]
}

sub_00101130:blk_001011c7:NodeIndex(2)
sub_00101130:blk_001011c7.out:NodeIndex(1)
sub_001011a0.out:NodeIndex(1)
sub_001011a0:NodeIndex(0)
Sketch for [
    Tid {
        id: "sub_00101100",
        address: "00101100",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_001010e0",
        address: "001010e0",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00101010",
        address: "00101010",
    },
]
digraph {
}

Sketch for [
    Tid {
        id: "sub_00101000",
        address: "00101000",
    },
]
digraph {
}

Working on group [Tid { id: "sub_00101000", address: "00101000" }]
Working on group [Tid { id: "sub_00101010", address: "00101010" }]
Working on group [Tid { id: "sub_001010e0", address: "001010e0" }]
Working on group [Tid { id: "sub_00101100", address: "00101100" }]
Working on group [Tid { id: "sub_001011a0", address: "001011a0" }]
trying to find out sub_00101130:blk_001011c7
trying to find out sub_00101130:blk_001011c7.out
trying to find out sub_001011a0.out
trying to find out sub_001011a0
Refining: sub_001011a0.out
Found at idx: 1
Orig repr digraph {
    1 [ label = "1:[bottom,T]" ]
}

Merged param type for: sub_001011a0.out digraph {
    1 [ label = "1:[bottom,T]" ]
}

1
sub_001011a0.out
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101130",
            cs_tag: Some(
                Tid {
                    id: "blk_001011c7",
                    address: "001011c7",
                },
            ),
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(1),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001011a0",
            cs_tag: None,
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(1),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    2 -> 1 [ label = "0:out" ]
    0 -> 1 [ label = "1:out" ]
}

Looking at nd 1
1
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    0 -> 1 [ label = "0:out" ]
    2 -> 1 [ label = "1:out" ]
}

Working on group [Tid { id: "sub_00101130", address: "00101130" }]
Working on group [Tid { id: "sub_001011e0", address: "001011e0" }]
trying to find out sub_001011e0.out
trying to find out sub_00101160:blk_001011e4.out
trying to find out sub_001011e0
trying to find out sub_00101160:blk_001011e4
Refining: sub_001011e0.out
Found at idx: 0
Orig repr digraph {
    0 [ label = "0:[bottom,T]" ]
}

Merged param type for: sub_001011e0.out digraph {
    0 [ label = "0:[bottom,T]" ]
}

0
sub_001011e0.out
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001011e0",
            cs_tag: None,
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101160",
            cs_tag: Some(
                Tid {
                    id: "blk_001011e4",
                    address: "001011e4",
                },
            ),
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(0),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    2 -> 0 [ label = "0:out" ]
    1 -> 0 [ label = "1:out" ]
}

Looking at nd 0
1
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    1 -> 0 [ label = "0:out" ]
    2 -> 0 [ label = "1:out" ]
}

Working on group [Tid { id: "sub_00101160", address: "00101160" }]
Working on group [Tid { id: "sub_00101853", address: "00101853" }]
Working on group [Tid { id: "sub_001015a7", address: "001015a7" }]
trying to find out sub_001013db:blk_001015ee.in_1
trying to find out sub_001011e9:blk_0010134a.out
trying to find out sub_00101060:blk_00101318.in_1
trying to find out sub_001012ed:blk_001015c6
trying to find out sub_001013db:blk_001015ee
trying to find out sub_001011e9:blk_0010134a.in_1
trying to find out sub_001012ed:blk_001015c6.out
trying to find out int
Working on group [Tid { id: "sub_00101677", address: "00101677" }]
Refining: sub_00101677.in_0
Found at idx: 3
Orig repr digraph {
    0 [ label = "0:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    11 -> 0 [ label = "2:load" ]
    0 -> 8 [ label = "3:σ64@0" ]
    0 -> 10 [ label = "4:σ64@8" ]
    0 -> 4 [ label = "6:σ64@24" ]
    0 -> 11 [ label = "10:σ64@40" ]
    3 -> 6 [ label = "11:load" ]
    6 -> 11 [ label = "12:σ64@0" ]
}

[Tid { id: "sub_00101853", address: "00101853" }]
Fetching type from digraph {
}

Merged param type for: sub_00101677.in_0 digraph {
    0 [ label = "0:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    11 -> 0 [ label = "2:load" ]
    0 -> 8 [ label = "3:σ64@0" ]
    0 -> 10 [ label = "4:σ64@8" ]
    0 -> 4 [ label = "6:σ64@24" ]
    0 -> 11 [ label = "10:σ64@40" ]
    3 -> 6 [ label = "11:load" ]
    6 -> 11 [ label = "12:σ64@0" ]
}

3
sub_00101677.in_0
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker340",
            cs_tag: None,
        },
        labels: [],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101436",
            cs_tag: Some(
                Tid {
                    id: "blk_001016de",
                    address: "001016de",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(10),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker340",
            cs_tag: None,
        },
        labels: [
            Field(
                Field {
                    offset: 40,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(11),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_001016aa",
                    address: "001016aa",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(3),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101436",
            cs_tag: Some(
                Tid {
                    id: "blk_001016de",
                    address: "001016de",
                },
            ),
        },
        labels: [
            In(
                1,
            ),
        ],
    }: NodeIndex(4),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_001016aa",
                    address: "001016aa",
                },
            ),
        },
        labels: [
            Out(
                0,
            ),
            Load,
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_001016aa",
                    address: "001016aa",
                },
            ),
        },
        labels: [
            Out(
                0,
            ),
            Load,
            Field(
                Field {
                    offset: 24,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(4),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker339",
            cs_tag: None,
        },
        labels: [
            Load,
            Field(
                Field {
                    offset: 0,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(8),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_001016aa",
                    address: "001016aa",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
            Load,
            Field(
                Field {
                    offset: 0,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(11),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker339",
            cs_tag: None,
        },
        labels: [],
    }: NodeIndex(11),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_001016aa",
                    address: "001016aa",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
            Load,
        ],
    }: NodeIndex(6),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101677",
            cs_tag: None,
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(3),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_001016aa",
                    address: "001016aa",
                },
            ),
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(11),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101080",
            cs_tag: Some(
                Tid {
                    id: "blk_00101569",
                    address: "00101569",
                },
            ),
        },
        labels: [
            In(
                1,
            ),
        ],
    }: NodeIndex(8),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker339",
            cs_tag: None,
        },
        labels: [
            Load,
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_001016aa",
                    address: "001016aa",
                },
            ),
        },
        labels: [
            Out(
                0,
            ),
            Load,
            Field(
                Field {
                    offset: 8,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(10),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[int,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    5 -> 9 [ label = "0:out" ]
    1 -> 9 [ label = "1:in_2" ]
    11 -> 0 [ label = "2:load" ]
    0 -> 8 [ label = "3:σ64@0" ]
    0 -> 10 [ label = "4:σ64@8" ]
    7 -> 10 [ label = "5:in_0" ]
    0 -> 4 [ label = "6:σ64@24" ]
    7 -> 4 [ label = "7:in_1" ]
    2 -> 3 [ label = "8:in_0" ]
    1 -> 11 [ label = "9:out" ]
    0 -> 11 [ label = "10:σ64@40" ]
    3 -> 6 [ label = "11:load" ]
    6 -> 11 [ label = "12:σ64@0" ]
}

Looking at nd 0
1
2
3
4
5
Looking at nd 3
6
7
Looking at nd 4
7
Looking at nd 6
7
7
Looking at nd 8
7
Looking at nd 10
7
Looking at nd 11
7
7
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[int,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    5 -> 9 [ label = "0:out" ]
    1 -> 9 [ label = "1:in_2" ]
    10 -> 11 [ label = "2:load" ]
    2 -> 3 [ label = "3:in_0" ]
    1 -> 10 [ label = "4:out" ]
    11 -> 8 [ label = "5:σ64@24" ]
    7 -> 6 [ label = "6:in_0" ]
    11 -> 4 [ label = "7:σ64@0" ]
    3 -> 0 [ label = "8:load" ]
    11 -> 10 [ label = "9:σ64@40" ]
    7 -> 8 [ label = "10:in_1" ]
    0 -> 10 [ label = "11:σ64@0" ]
    11 -> 6 [ label = "12:σ64@8" ]
}

trying to find out sub_00101677.in_0
trying to find out sub_001012ed:blk_0010167b
trying to find out sub_001014fb:blk_001016aa.in_2
trying to find out sub_001014fb:blk_001016aa.out.load.σ64@24
trying to find out sub_00101436:blk_001016de
trying to find out loop_breaker339.load.σ64@0
trying to find out loop_breaker339.load
trying to find out sub_001012ed:blk_0010167b.out
trying to find out sub_001014fb:blk_001016aa.in_0.load.σ64@0
trying to find out loop_breaker340
trying to find out sub_00101436:blk_001016de.in_1
trying to find out sub_001014fb:blk_001016aa.out.load
trying to find out int
trying to find out loop_breaker339
trying to find out loop_breaker340.σ64@40
trying to find out sub_001013db:blk_001014ff.in_1
trying to find out sub_00101080:blk_00101569.in_2
trying to find out sub_00101677
trying to find out sub_001014fb:blk_001016aa.in_0
trying to find out sub_001014fb:blk_001016aa.out.load.σ64@8
trying to find out sub_001014fb:blk_001016aa.out
trying to find out sub_001011e9:blk_0010134a.out
trying to find out sub_001014fb:blk_001016aa.in_0.load
trying to find out sub_00101436:blk_001016de.in_0
trying to find out sub_001011e9:blk_0010134a.in_1
trying to find out sub_001014fb:blk_001016aa
trying to find out sub_00101080:blk_00101569.in_1
trying to find out sub_00101060:blk_00101318.in_1
Working on group [Tid { id: "sub_00101728", address: "00101728" }]
Refining: sub_00101728.in_0
Found at idx: 12
Orig repr digraph {
    2 [ label = "2:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    12 [ label = "12:[bottom,T]" ]
    7 -> 4 [ label = "2:load" ]
    4 -> 2 [ label = "3:σ64@0" ]
    4 -> 7 [ label = "4:σ64@40" ]
    4 -> 8 [ label = "8:σ64@8" ]
    12 -> 5 [ label = "10:store" ]
    5 -> 7 [ label = "11:σ64@0" ]
    12 -> 5 [ label = "13:load" ]
}

[Tid { id: "sub_00101853", address: "00101853" }]
Fetching type from digraph {
}

Merged param type for: sub_00101728.in_0 digraph {
    2 [ label = "2:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    12 [ label = "12:[bottom,T]" ]
    7 -> 4 [ label = "2:load" ]
    4 -> 2 [ label = "3:σ64@0" ]
    4 -> 7 [ label = "4:σ64@40" ]
    4 -> 8 [ label = "8:σ64@8" ]
    12 -> 5 [ label = "10:store" ]
    5 -> 7 [ label = "11:σ64@0" ]
    12 -> 5 [ label = "13:load" ]
}

12
sub_00101728.in_0
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker339",
            cs_tag: None,
        },
        labels: [],
    }: NodeIndex(7),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_0010175b",
                    address: "0010175b",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
            Load,
        ],
    }: NodeIndex(5),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001010c0",
            cs_tag: Some(
                Tid {
                    id: "blk_00101808",
                    address: "00101808",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(8),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker340",
            cs_tag: None,
        },
        labels: [],
    }: NodeIndex(4),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker495",
            cs_tag: None,
        },
        labels: [
            Store,
            Field(
                Field {
                    offset: 0,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(7),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_0010175b",
                    address: "0010175b",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(12),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_0010175b",
                    address: "0010175b",
                },
            ),
        },
        labels: [
            Out(
                0,
            ),
            Load,
            Field(
                Field {
                    offset: 40,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(7),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101080",
            cs_tag: Some(
                Tid {
                    id: "blk_00101569",
                    address: "00101569",
                },
            ),
        },
        labels: [
            In(
                1,
            ),
        ],
    }: NodeIndex(2),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_0010175b",
                    address: "0010175b",
                },
            ),
        },
        labels: [
            Out(
                0,
            ),
            Load,
            Field(
                Field {
                    offset: 0,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(2),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_0010175b",
                    address: "0010175b",
                },
            ),
        },
        labels: [
            Out(
                0,
            ),
            Load,
            Field(
                Field {
                    offset: 8,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(8),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001010c0",
            cs_tag: Some(
                Tid {
                    id: "blk_001017f9",
                    address: "001017f9",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(2),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_0010175b",
                    address: "0010175b",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
            Load,
            Field(
                Field {
                    offset: 0,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(7),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_0010175b",
                    address: "0010175b",
                },
            ),
        },
        labels: [
            Out(
                0,
            ),
            Load,
        ],
    }: NodeIndex(4),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker339",
            cs_tag: None,
        },
        labels: [
            Load,
            Field(
                Field {
                    offset: 0,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(2),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker340",
            cs_tag: None,
        },
        labels: [
            Field(
                Field {
                    offset: 40,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(7),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker495",
            cs_tag: None,
        },
        labels: [],
    }: NodeIndex(12),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001010c0",
            cs_tag: Some(
                Tid {
                    id: "blk_00101818",
                    address: "00101818",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(7),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101728",
            cs_tag: None,
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(12),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker339",
            cs_tag: None,
        },
        labels: [
            Load,
        ],
    }: NodeIndex(4),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker495",
            cs_tag: None,
        },
        labels: [
            Store,
        ],
    }: NodeIndex(5),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: Some(
                Tid {
                    id: "blk_0010175b",
                    address: "0010175b",
                },
            ),
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(7),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    12 [ label = "12:[bottom,T]" ]
    9 -> 3 [ label = "0:out" ]
    1 -> 3 [ label = "1:in_2" ]
    7 -> 4 [ label = "2:load" ]
    4 -> 2 [ label = "3:σ64@0" ]
    4 -> 7 [ label = "4:σ64@40" ]
    1 -> 7 [ label = "5:out" ]
    6 -> 7 [ label = "6:in_0" ]
    0 -> 2 [ label = "7:in_0" ]
    4 -> 8 [ label = "8:σ64@8" ]
    10 -> 8 [ label = "9:in_0" ]
    12 -> 5 [ label = "10:store" ]
    5 -> 7 [ label = "11:σ64@0" ]
    11 -> 12 [ label = "12:in_0" ]
    12 -> 5 [ label = "13:load" ]
}

Looking at nd 2
1
Looking at nd 4
2
3
4
4
Looking at nd 5
5
5
Looking at nd 7
5
5
Looking at nd 8
5
Looking at nd 12
6
6
6
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    12 [ label = "12:[bottom,T]" ]
    9 -> 3 [ label = "0:out" ]
    1 -> 3 [ label = "1:in_2" ]
    11 -> 2 [ label = "2:in_0" ]
    0 -> 12 [ label = "3:in_0" ]
    6 -> 5 [ label = "4:in_0" ]
    8 -> 12 [ label = "5:σ64@0" ]
    4 -> 5 [ label = "6:σ64@0" ]
    10 -> 7 [ label = "7:in_0" ]
    1 -> 5 [ label = "8:out" ]
    8 -> 5 [ label = "9:σ64@40" ]
    5 -> 8 [ label = "10:load" ]
    2 -> 4 [ label = "11:store" ]
    8 -> 7 [ label = "12:σ64@8" ]
    2 -> 4 [ label = "13:load" ]
}

trying to find out sub_001011e9:blk_0010134a.out
trying to find out sub_001014fb:blk_0010175b.out.load.σ64@40
trying to find out loop_breaker340
trying to find out sub_00101728.in_0
trying to find out sub_001014fb:blk_0010175b.out.load.σ64@8
trying to find out sub_001014fb:blk_0010175b.in_0
trying to find out sub_001012ed:blk_0010172c.out
trying to find out sub_00101060:blk_00101318.in_1
trying to find out loop_breaker495.store
trying to find out loop_breaker339
trying to find out sub_001014fb:blk_0010175b
trying to find out sub_001010c0:blk_001017f9.in_0
trying to find out sub_00101728
trying to find out sub_001010c0:blk_00101818
trying to find out sub_001010c0:blk_00101808
trying to find out loop_breaker339.load
trying to find out loop_breaker495.store.σ64@0
trying to find out sub_001013db:blk_001014ff.in_1
trying to find out sub_001010c0:blk_001017f9
trying to find out sub_001014fb:blk_0010175b.out
trying to find out sub_001011e9:blk_0010134a.in_1
trying to find out loop_breaker340.σ64@40
trying to find out loop_breaker339.load.σ64@0
trying to find out sub_001014fb:blk_0010175b.out.load.σ64@0
trying to find out sub_001014fb:blk_0010175b.in_0.load
trying to find out sub_00101080:blk_00101569.in_1
trying to find out sub_001010c0:blk_00101808.in_0
trying to find out loop_breaker495
trying to find out sub_00101080:blk_00101569.in_2
trying to find out sub_001012ed:blk_0010172c
trying to find out sub_001010c0:blk_00101818.in_0
trying to find out sub_001014fb:blk_0010175b.out.load
trying to find out int
trying to find out sub_001014fb:blk_0010175b.in_0.load.σ64@0
trying to find out sub_001014fb:blk_0010175b.in_2
Working on group [Tid { id: "sub_001012ed", address: "001012ed" }]
Refining: sub_001012ed.in_0
Found at idx: 2
Orig repr digraph {
    0 [ label = "0:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    2 -> 4 [ label = "4:load" ]
    4 -> 0 [ label = "5:σ64@0" ]
}

[Tid { id: "sub_00101728", address: "00101728" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    12 [ label = "12:[bottom,T]" ]
    9 -> 3 [ label = "0:out" ]
    1 -> 3 [ label = "1:in_2" ]
    11 -> 2 [ label = "2:in_0" ]
    0 -> 12 [ label = "3:in_0" ]
    6 -> 5 [ label = "4:in_0" ]
    8 -> 12 [ label = "5:σ64@0" ]
    4 -> 5 [ label = "6:σ64@0" ]
    10 -> 7 [ label = "7:in_0" ]
    1 -> 5 [ label = "8:out" ]
    8 -> 5 [ label = "9:σ64@40" ]
    5 -> 8 [ label = "10:load" ]
    2 -> 4 [ label = "11:store" ]
    8 -> 7 [ label = "12:σ64@8" ]
    2 -> 4 [ label = "13:load" ]
}

[Tid { id: "sub_00101677", address: "00101677" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[int,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    5 -> 9 [ label = "0:out" ]
    1 -> 9 [ label = "1:in_2" ]
    10 -> 11 [ label = "2:load" ]
    2 -> 3 [ label = "3:in_0" ]
    1 -> 10 [ label = "4:out" ]
    11 -> 8 [ label = "5:σ64@24" ]
    7 -> 6 [ label = "6:in_0" ]
    11 -> 4 [ label = "7:σ64@0" ]
    3 -> 0 [ label = "8:load" ]
    11 -> 10 [ label = "9:σ64@40" ]
    7 -> 8 [ label = "10:in_1" ]
    0 -> 10 [ label = "11:σ64@0" ]
    11 -> 6 [ label = "12:σ64@8" ]
}

[Tid { id: "sub_001015a7", address: "001015a7" }]
Fetching type from digraph {
    0 [ label = "0:[int,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    1 -> 0 [ label = "0:out" ]
    2 -> 0 [ label = "1:in_1" ]
}

Merged param type for: sub_001012ed.in_0 digraph {
    0 [ label = "0:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    2 -> 4 [ label = "4:load" ]
    4 -> 0 [ label = "5:σ64@0" ]
}

2
sub_001012ed.in_0
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001012ed",
            cs_tag: None,
        },
        labels: [
            In(
                0,
            ),
            Load,
        ],
    }: NodeIndex(4),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001012ed",
            cs_tag: None,
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(2),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001012ed",
            cs_tag: None,
        },
        labels: [
            In(
                0,
            ),
            Load,
            Field(
                Field {
                    offset: 0,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001011e9",
            cs_tag: Some(
                Tid {
                    id: "blk_0010134a",
                    address: "0010134a",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(0),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    6 -> 3 [ label = "0:in_1" ]
    1 -> 3 [ label = "1:in_1" ]
    5 -> 3 [ label = "2:out" ]
    5 -> 2 [ label = "3:in_0" ]
    2 -> 4 [ label = "4:load" ]
    4 -> 0 [ label = "5:σ64@0" ]
    1 -> 0 [ label = "6:in_0" ]
}

Looking at nd 0
1
Looking at nd 2
2
3
Looking at nd 4
3
3
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    6 -> 3 [ label = "0:in_1" ]
    1 -> 3 [ label = "1:in_1" ]
    5 -> 3 [ label = "2:out" ]
    2 -> 0 [ label = "3:load" ]
    0 -> 4 [ label = "4:σ64@0" ]
    5 -> 2 [ label = "5:in_0" ]
    1 -> 4 [ label = "6:in_0" ]
}

trying to find out sub_001011e9:blk_0010134a.in_0
trying to find out sub_001011e9:blk_0010134a
trying to find out sub_001011e9:blk_0010134a.out
trying to find out sub_001012ed
trying to find out sub_00101060:blk_00101318.in_1
trying to find out sub_001011e9:blk_0010134a.in_1
trying to find out sub_001012ed.in_0.load.σ64@0
trying to find out sub_001012ed.in_0
trying to find out sub_00101060:blk_00101318
trying to find out sub_001012ed.out
trying to find out sub_001012ed.in_0.load
trying to find out int
Refining: sub_001012ed.out
Found at idx: 3
Orig repr digraph {
    3 [ label = "3:[int,T]" ]
}

[Tid { id: "sub_00101728", address: "00101728" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    12 [ label = "12:[bottom,T]" ]
    9 -> 3 [ label = "0:out" ]
    1 -> 3 [ label = "1:in_2" ]
    11 -> 2 [ label = "2:in_0" ]
    0 -> 12 [ label = "3:in_0" ]
    6 -> 5 [ label = "4:in_0" ]
    8 -> 12 [ label = "5:σ64@0" ]
    4 -> 5 [ label = "6:σ64@0" ]
    10 -> 7 [ label = "7:in_0" ]
    1 -> 5 [ label = "8:out" ]
    8 -> 5 [ label = "9:σ64@40" ]
    5 -> 8 [ label = "10:load" ]
    2 -> 4 [ label = "11:store" ]
    8 -> 7 [ label = "12:σ64@8" ]
    2 -> 4 [ label = "13:load" ]
}

Found at idx: 3
[Tid { id: "sub_00101677", address: "00101677" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[int,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    5 -> 9 [ label = "0:out" ]
    1 -> 9 [ label = "1:in_2" ]
    10 -> 11 [ label = "2:load" ]
    2 -> 3 [ label = "3:in_0" ]
    1 -> 10 [ label = "4:out" ]
    11 -> 8 [ label = "5:σ64@24" ]
    7 -> 6 [ label = "6:in_0" ]
    11 -> 4 [ label = "7:σ64@0" ]
    3 -> 0 [ label = "8:load" ]
    11 -> 10 [ label = "9:σ64@40" ]
    7 -> 8 [ label = "10:in_1" ]
    0 -> 10 [ label = "11:σ64@0" ]
    11 -> 6 [ label = "12:σ64@8" ]
}

Found at idx: 9
[Tid { id: "sub_001015a7", address: "001015a7" }]
Fetching type from digraph {
    0 [ label = "0:[int,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    1 -> 0 [ label = "0:out" ]
    2 -> 0 [ label = "1:in_1" ]
}

Found at idx: 0
Unlabeled dfa: digraph {
    0 [ label = "[bottom,T]" ]
}

Unlabeled dfa: digraph {
    0 [ label = "[bottom,T]" ]
}

Unlabeled dfa: digraph {
    0 [ label = "[bottom,T]" ]
}

Merged param type for: sub_001012ed.out digraph {
    0 [ label = "0:[int,T]" ]
}

0
sub_001012ed:blk_0010172c.out
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101060",
            cs_tag: Some(
                Tid {
                    id: "blk_00101318",
                    address: "00101318",
                },
            ),
        },
        labels: [
            In(
                1,
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "int",
            cs_tag: None,
        },
        labels: [],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001011e9",
            cs_tag: Some(
                Tid {
                    id: "blk_0010134a",
                    address: "0010134a",
                },
            ),
        },
        labels: [
            In(
                1,
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001011e9",
            cs_tag: Some(
                Tid {
                    id: "blk_0010134a",
                    address: "0010134a",
                },
            ),
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001012ed",
            cs_tag: None,
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(0),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    6 -> 3 [ label = "0:in_1" ]
    1 -> 3 [ label = "1:in_1" ]
    5 -> 3 [ label = "2:out" ]
    2 -> 0 [ label = "3:load" ]
    0 -> 4 [ label = "4:σ64@0" ]
    5 -> 2 [ label = "5:in_0" ]
    1 -> 4 [ label = "6:in_0" ]
}

Looking at nd 0
1
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    5 -> 3 [ label = "0:out" ]
    1 -> 3 [ label = "1:in_1" ]
    6 -> 3 [ label = "2:in_1" ]
    2 -> 0 [ label = "3:load" ]
    0 -> 4 [ label = "4:σ64@0" ]
    5 -> 2 [ label = "5:in_0" ]
    1 -> 4 [ label = "6:in_0" ]
}

Working on subty: digraph {
    3 [ label = "3:[int,T]" ]
}

{
    0: SketchSCCInfo {
        entry_paths: {
            [],
        },
        successors: {},
    },
}
Working on 0 
About to check entry path  0
has subsketches
cex lang digraph {
}

Working on subty: digraph {
    9 [ label = "9:[int,T]" ]
}

{
    0: SketchSCCInfo {
        entry_paths: {
            [],
        },
        successors: {},
    },
}
Working on 0 
About to check entry path  0
has subsketches
cex lang digraph {
}

Working on subty: digraph {
    0 [ label = "0:[int,T]" ]
}

{
    0: SketchSCCInfo {
        entry_paths: {
            [],
        },
        successors: {},
    },
}
Working on 0 
About to check entry path  0
has subsketches
cex lang digraph {
}

Working on group [Tid { id: "sub_00101364", address: "00101364" }]
Refining: sub_00101364.in_0
Found at idx: 3
Orig repr digraph {
    0 [ label = "0:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    3 -> 4 [ label = "4:load" ]
    4 -> 0 [ label = "5:σ64@0" ]
}

[Tid { id: "sub_001015a7", address: "001015a7" }]
Fetching type from digraph {
    0 [ label = "0:[int,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    1 -> 0 [ label = "0:out" ]
    2 -> 0 [ label = "1:in_1" ]
}

Merged param type for: sub_00101364.in_0 digraph {
    0 [ label = "0:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    3 -> 4 [ label = "4:load" ]
    4 -> 0 [ label = "5:σ64@0" ]
}

3
sub_00101364.in_0
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101364",
            cs_tag: None,
        },
        labels: [
            In(
                0,
            ),
            Load,
        ],
    }: NodeIndex(4),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101364",
            cs_tag: None,
        },
        labels: [
            In(
                0,
            ),
            Load,
            Field(
                Field {
                    offset: 0,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101364",
            cs_tag: None,
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(3),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001011e9",
            cs_tag: Some(
                Tid {
                    id: "blk_001013c1",
                    address: "001013c1",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(0),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[int,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    5 -> 1 [ label = "0:in_1" ]
    6 -> 1 [ label = "1:in_1" ]
    2 -> 1 [ label = "2:out" ]
    2 -> 3 [ label = "3:in_0" ]
    3 -> 4 [ label = "4:load" ]
    4 -> 0 [ label = "5:σ64@0" ]
    6 -> 0 [ label = "6:in_0" ]
}

Looking at nd 0
1
Looking at nd 3
2
3
Looking at nd 4
3
3
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[int,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    5 -> 1 [ label = "0:in_1" ]
    6 -> 1 [ label = "1:in_1" ]
    2 -> 1 [ label = "2:out" ]
    3 -> 0 [ label = "3:load" ]
    0 -> 4 [ label = "4:σ64@0" ]
    2 -> 3 [ label = "5:in_0" ]
    6 -> 4 [ label = "6:in_0" ]
}

trying to find out sub_00101364.in_0.load
trying to find out sub_00101060:blk_0010138f
trying to find out sub_00101060:blk_0010138f.in_1
trying to find out sub_00101364.in_0
trying to find out sub_00101364.out
trying to find out sub_001011e9:blk_001013c1
trying to find out sub_00101364
trying to find out sub_00101364.in_0.load.σ64@0
trying to find out sub_001011e9:blk_001013c1.in_0
trying to find out int
trying to find out sub_001011e9:blk_001013c1.in_1
trying to find out sub_001011e9:blk_001013c1.out
Refining: sub_00101364.out
Found at idx: 1
Orig repr digraph {
    1 [ label = "1:[int,T]" ]
}

[Tid { id: "sub_001015a7", address: "001015a7" }]
Fetching type from digraph {
    0 [ label = "0:[int,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    1 -> 0 [ label = "0:out" ]
    2 -> 0 [ label = "1:in_1" ]
}

Merged param type for: sub_00101364.out digraph {
    1 [ label = "1:[int,T]" ]
}

1
sub_00101364.out
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101060",
            cs_tag: Some(
                Tid {
                    id: "blk_0010138f",
                    address: "0010138f",
                },
            ),
        },
        labels: [
            In(
                1,
            ),
        ],
    }: NodeIndex(1),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001011e9",
            cs_tag: Some(
                Tid {
                    id: "blk_001013c1",
                    address: "001013c1",
                },
            ),
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(1),
    DerivedTypeVar {
        var: TypeVariable {
            name: "int",
            cs_tag: None,
        },
        labels: [],
    }: NodeIndex(1),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001011e9",
            cs_tag: Some(
                Tid {
                    id: "blk_001013c1",
                    address: "001013c1",
                },
            ),
        },
        labels: [
            In(
                1,
            ),
        ],
    }: NodeIndex(1),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101364",
            cs_tag: None,
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(1),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[int,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    5 -> 1 [ label = "0:in_1" ]
    6 -> 1 [ label = "1:in_1" ]
    2 -> 1 [ label = "2:out" ]
    3 -> 0 [ label = "3:load" ]
    0 -> 4 [ label = "4:σ64@0" ]
    2 -> 3 [ label = "5:in_0" ]
    6 -> 4 [ label = "6:in_0" ]
}

Looking at nd 1
1
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[int,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    2 -> 1 [ label = "0:out" ]
    6 -> 1 [ label = "1:in_1" ]
    5 -> 1 [ label = "2:in_1" ]
    3 -> 0 [ label = "3:load" ]
    0 -> 4 [ label = "4:σ64@0" ]
    2 -> 3 [ label = "5:in_0" ]
    6 -> 4 [ label = "6:in_0" ]
}

Working on group [Tid { id: "sub_0010128f", address: "0010128f" }]
Working on group [Tid { id: "sub_001011e9", address: "001011e9" }]
Refining: sub_001011e9.in_1
Found at idx: 1
Orig repr digraph {
    1 [ label = "1:[int,T]" ]
}

[Tid { id: "sub_00101364", address: "00101364" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[int,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    2 -> 1 [ label = "0:out" ]
    6 -> 1 [ label = "1:in_1" ]
    5 -> 1 [ label = "2:in_1" ]
    3 -> 0 [ label = "3:load" ]
    0 -> 4 [ label = "4:σ64@0" ]
    2 -> 3 [ label = "5:in_0" ]
    6 -> 4 [ label = "6:in_0" ]
}

Found at idx: 1
[Tid { id: "sub_001012ed", address: "001012ed" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    5 -> 3 [ label = "0:out" ]
    1 -> 3 [ label = "1:in_1" ]
    6 -> 3 [ label = "2:in_1" ]
    2 -> 0 [ label = "3:load" ]
    0 -> 4 [ label = "4:σ64@0" ]
    5 -> 2 [ label = "5:in_0" ]
    1 -> 4 [ label = "6:in_0" ]
}

Found at idx: 3
[Tid { id: "sub_0010128f", address: "0010128f" }]
Fetching type from digraph {
}

Unlabeled dfa: digraph {
    0 [ label = "[bottom,T]" ]
}

Unlabeled dfa: digraph {
    0 [ label = "[bottom,T]" ]
}

Merged param type for: sub_001011e9.in_1 digraph {
    0 [ label = "0:[int,T]" ]
}

0
sub_001011e9:blk_001013c1.in_1
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "int",
            cs_tag: None,
        },
        labels: [],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001011e9",
            cs_tag: None,
        },
        labels: [
            In(
                1,
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001011e9",
            cs_tag: None,
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(0),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[int,T]" ]
    0 -> 1 [ label = "0:out" ]
    0 -> 1 [ label = "1:in_1" ]
}

Looking at nd 0
1
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[int,T]" ]
    0 -> 1 [ label = "0:in_1" ]
    0 -> 1 [ label = "1:out" ]
}

Working on subty: digraph {
    1 [ label = "1:[int,T]" ]
}

{
    0: SketchSCCInfo {
        entry_paths: {
            [],
        },
        successors: {},
    },
}
Working on 0 
About to check entry path  0
has subsketches
cex lang digraph {
}

Working on subty: digraph {
    3 [ label = "3:[int,T]" ]
}

{
    0: SketchSCCInfo {
        entry_paths: {
            [],
        },
        successors: {},
    },
}
Working on 0 
About to check entry path  0
has subsketches
cex lang digraph {
}

trying to find out int
trying to find out sub_001011e9
trying to find out sub_001011e9.in_1
trying to find out sub_001011e9.out
Refining: sub_001011e9.out
Found at idx: 1
Orig repr digraph {
    1 [ label = "1:[int,T]" ]
}

[Tid { id: "sub_00101364", address: "00101364" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[int,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    2 -> 1 [ label = "0:out" ]
    6 -> 1 [ label = "1:in_1" ]
    5 -> 1 [ label = "2:in_1" ]
    3 -> 0 [ label = "3:load" ]
    0 -> 4 [ label = "4:σ64@0" ]
    2 -> 3 [ label = "5:in_0" ]
    6 -> 4 [ label = "6:in_0" ]
}

Found at idx: 1
[Tid { id: "sub_001012ed", address: "001012ed" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    5 -> 3 [ label = "0:out" ]
    1 -> 3 [ label = "1:in_1" ]
    6 -> 3 [ label = "2:in_1" ]
    2 -> 0 [ label = "3:load" ]
    0 -> 4 [ label = "4:σ64@0" ]
    5 -> 2 [ label = "5:in_0" ]
    1 -> 4 [ label = "6:in_0" ]
}

Found at idx: 3
[Tid { id: "sub_0010128f", address: "0010128f" }]
Fetching type from digraph {
}

Unlabeled dfa: digraph {
    0 [ label = "[bottom,T]" ]
}

Unlabeled dfa: digraph {
    0 [ label = "[bottom,T]" ]
}

Merged param type for: sub_001011e9.out digraph {
    0 [ label = "0:[int,T]" ]
}

0
sub_001011e9:blk_001013c1.out
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001011e9",
            cs_tag: None,
        },
        labels: [
            In(
                1,
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001011e9",
            cs_tag: None,
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "int",
            cs_tag: None,
        },
        labels: [],
    }: NodeIndex(0),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[int,T]" ]
    0 -> 1 [ label = "0:in_1" ]
    0 -> 1 [ label = "1:out" ]
}

Looking at nd 0
1
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[int,T]" ]
    0 -> 1 [ label = "0:out" ]
    0 -> 1 [ label = "1:in_1" ]
}

Working on subty: digraph {
    1 [ label = "1:[int,T]" ]
}

{
    0: SketchSCCInfo {
        entry_paths: {
            [],
        },
        successors: {},
    },
}
Working on 0 
About to check entry path  0
has subsketches
cex lang digraph {
}

Working on subty: digraph {
    3 [ label = "3:[int,T]" ]
}

{
    0: SketchSCCInfo {
        entry_paths: {
            [],
        },
        successors: {},
    },
}
Working on 0 
About to check entry path  0
has subsketches
cex lang digraph {
}

Working on group [Tid { id: "sub_001014fb", address: "001014fb" }]
Refining: sub_001014fb.in_1
Found at idx: 1
Orig repr digraph {
    1 [ label = "1:[bottom,T]" ]
}

[Tid { id: "sub_00101728", address: "00101728" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    12 [ label = "12:[bottom,T]" ]
    9 -> 3 [ label = "0:out" ]
    1 -> 3 [ label = "1:in_2" ]
    11 -> 2 [ label = "2:in_0" ]
    0 -> 12 [ label = "3:in_0" ]
    6 -> 5 [ label = "4:in_0" ]
    8 -> 12 [ label = "5:σ64@0" ]
    4 -> 5 [ label = "6:σ64@0" ]
    10 -> 7 [ label = "7:in_0" ]
    1 -> 5 [ label = "8:out" ]
    8 -> 5 [ label = "9:σ64@40" ]
    5 -> 8 [ label = "10:load" ]
    2 -> 4 [ label = "11:store" ]
    8 -> 7 [ label = "12:σ64@8" ]
    2 -> 4 [ label = "13:load" ]
}

[Tid { id: "sub_00101677", address: "00101677" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[int,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    5 -> 9 [ label = "0:out" ]
    1 -> 9 [ label = "1:in_2" ]
    10 -> 11 [ label = "2:load" ]
    2 -> 3 [ label = "3:in_0" ]
    1 -> 10 [ label = "4:out" ]
    11 -> 8 [ label = "5:σ64@24" ]
    7 -> 6 [ label = "6:in_0" ]
    11 -> 4 [ label = "7:σ64@0" ]
    3 -> 0 [ label = "8:load" ]
    11 -> 10 [ label = "9:σ64@40" ]
    7 -> 8 [ label = "10:in_1" ]
    0 -> 10 [ label = "11:σ64@0" ]
    11 -> 6 [ label = "12:σ64@8" ]
}

Merged param type for: sub_001014fb.in_1 digraph {
    1 [ label = "1:[bottom,T]" ]
}

1
sub_001014fb.in_1
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101080",
            cs_tag: Some(
                Tid {
                    id: "blk_00101569",
                    address: "00101569",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(1),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: None,
        },
        labels: [
            In(
                1,
            ),
        ],
    }: NodeIndex(1),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001013db",
            cs_tag: Some(
                Tid {
                    id: "blk_001014ff",
                    address: "001014ff",
                },
            ),
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(1),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    2 -> 6 [ label = "0:out" ]
    6 -> 5 [ label = "1:load" ]
    5 -> 4 [ label = "2:σ64@0" ]
    3 -> 4 [ label = "3:in_1" ]
    5 -> 6 [ label = "4:σ64@40" ]
    2 -> 0 [ label = "5:in_0" ]
    0 -> 7 [ label = "6:load" ]
    7 -> 6 [ label = "7:σ64@0" ]
    2 -> 1 [ label = "8:in_1" ]
    3 -> 1 [ label = "9:in_0" ]
    8 -> 1 [ label = "10:in_0" ]
    2 -> 9 [ label = "11:in_2" ]
    3 -> 9 [ label = "12:in_2" ]
    8 -> 9 [ label = "13:in_1" ]
}

Looking at nd 1
1
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    2 -> 6 [ label = "0:out" ]
    6 -> 5 [ label = "1:load" ]
    5 -> 4 [ label = "2:σ64@0" ]
    3 -> 4 [ label = "3:in_1" ]
    5 -> 6 [ label = "4:σ64@40" ]
    2 -> 0 [ label = "5:in_0" ]
    0 -> 7 [ label = "6:load" ]
    7 -> 6 [ label = "7:σ64@0" ]
    8 -> 1 [ label = "8:in_0" ]
    3 -> 1 [ label = "9:in_0" ]
    2 -> 1 [ label = "10:in_1" ]
    2 -> 9 [ label = "11:in_2" ]
    3 -> 9 [ label = "12:in_2" ]
    8 -> 9 [ label = "13:in_1" ]
}

Refining: sub_001014fb.in_0
Found at idx: 0
Orig repr digraph {
    0 [ label = "0:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    6 -> 5 [ label = "1:load" ]
    5 -> 4 [ label = "2:σ64@0" ]
    5 -> 6 [ label = "4:σ64@40" ]
    0 -> 7 [ label = "6:load" ]
    7 -> 6 [ label = "7:σ64@0" ]
}

[Tid { id: "sub_00101728", address: "00101728" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    12 [ label = "12:[bottom,T]" ]
    9 -> 3 [ label = "0:out" ]
    1 -> 3 [ label = "1:in_2" ]
    11 -> 2 [ label = "2:in_0" ]
    0 -> 12 [ label = "3:in_0" ]
    6 -> 5 [ label = "4:in_0" ]
    8 -> 12 [ label = "5:σ64@0" ]
    4 -> 5 [ label = "6:σ64@0" ]
    10 -> 7 [ label = "7:in_0" ]
    1 -> 5 [ label = "8:out" ]
    8 -> 5 [ label = "9:σ64@40" ]
    5 -> 8 [ label = "10:load" ]
    2 -> 4 [ label = "11:store" ]
    8 -> 7 [ label = "12:σ64@8" ]
    2 -> 4 [ label = "13:load" ]
}

Found at idx: 2
[Tid { id: "sub_00101677", address: "00101677" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[int,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    5 -> 9 [ label = "0:out" ]
    1 -> 9 [ label = "1:in_2" ]
    10 -> 11 [ label = "2:load" ]
    2 -> 3 [ label = "3:in_0" ]
    1 -> 10 [ label = "4:out" ]
    11 -> 8 [ label = "5:σ64@24" ]
    7 -> 6 [ label = "6:in_0" ]
    11 -> 4 [ label = "7:σ64@0" ]
    3 -> 0 [ label = "8:load" ]
    11 -> 10 [ label = "9:σ64@40" ]
    7 -> 8 [ label = "10:in_1" ]
    0 -> 10 [ label = "11:σ64@0" ]
    11 -> 6 [ label = "12:σ64@8" ]
}

Found at idx: 3
Unlabeled dfa: digraph {
    0 [ label = "[bottom,T]" ]
    1 [ label = "[bottom,T]" ]
    3 [ label = "[bottom,T]" ]
    4 [ label = "[bottom,T]" ]
    5 [ label = "[bottom,T]" ]
    0 -> 1 [ label = "load" ]
    1 -> 3 [ label = "σ64@0" ]
    3 -> 4 [ label = "load" ]
    4 -> 5 [ label = "σ64@0" ]
    4 -> 5 [ label = "σ64@8" ]
    4 -> 3 [ label = "σ64@40" ]
}

Unlabeled dfa: digraph {
    0 [ label = "[bottom,T]" ]
    2 [ label = "[bottom,T]" ]
    3 [ label = "[bottom,T]" ]
    4 [ label = "[bottom,T]" ]
    5 [ label = "[bottom,T]" ]
    2 -> 3 [ label = "load" ]
    3 -> 0 [ label = "σ64@0" ]
    3 -> 0 [ label = "σ64@8" ]
    3 -> 2 [ label = "σ64@40" ]
    4 -> 5 [ label = "load" ]
    5 -> 2 [ label = "σ64@0" ]
}

Merged param type for: sub_001014fb.in_0 digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    2 -> 0 [ label = "0:load" ]
    0 -> 4 [ label = "1:σ64@0" ]
    0 -> 4 [ label = "2:σ64@8" ]
    0 -> 2 [ label = "3:σ64@40" ]
    3 -> 1 [ label = "4:load" ]
    1 -> 2 [ label = "5:σ64@0" ]
}

3
sub_001014fb:blk_0010175b.in_0
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: None,
        },
        labels: [
            In(
                0,
            ),
            Load,
        ],
    }: NodeIndex(1),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker339",
            cs_tag: None,
        },
        labels: [],
    }: NodeIndex(2),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: None,
        },
        labels: [
            In(
                0,
            ),
        ],
    }: NodeIndex(3),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: None,
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(2),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker340",
            cs_tag: None,
        },
        labels: [],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker340",
            cs_tag: None,
        },
        labels: [
            Field(
                Field {
                    offset: 40,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(2),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker339",
            cs_tag: None,
        },
        labels: [
            Load,
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker339",
            cs_tag: None,
        },
        labels: [
            Load,
            Field(
                Field {
                    offset: 0,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(4),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: None,
        },
        labels: [
            In(
                0,
            ),
            Load,
            Field(
                Field {
                    offset: 0,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(2),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101080",
            cs_tag: Some(
                Tid {
                    id: "blk_00101569",
                    address: "00101569",
                },
            ),
        },
        labels: [
            In(
                1,
            ),
        ],
    }: NodeIndex(4),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    2 -> 6 [ label = "0:out" ]
    6 -> 5 [ label = "1:load" ]
    5 -> 4 [ label = "2:σ64@0" ]
    3 -> 4 [ label = "3:in_1" ]
    5 -> 6 [ label = "4:σ64@40" ]
    2 -> 0 [ label = "5:in_0" ]
    0 -> 7 [ label = "6:load" ]
    7 -> 6 [ label = "7:σ64@0" ]
    8 -> 1 [ label = "8:in_0" ]
    3 -> 1 [ label = "9:in_0" ]
    2 -> 1 [ label = "10:in_1" ]
    2 -> 9 [ label = "11:in_2" ]
    3 -> 9 [ label = "12:in_2" ]
    8 -> 9 [ label = "13:in_1" ]
}

Looking at nd 0
1
2
3
3
Looking at nd 1
4
4
Looking at nd 2
4
4
Looking at nd 3
5
5
Looking at nd 4
5
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    7 -> 6 [ label = "0:σ64@40" ]
    7 -> 5 [ label = "1:σ64@0" ]
    6 -> 7 [ label = "2:load" ]
    0 -> 4 [ label = "3:load" ]
    4 -> 6 [ label = "4:σ64@0" ]
    2 -> 0 [ label = "5:in_0" ]
    2 -> 6 [ label = "6:out" ]
    7 -> 5 [ label = "7:σ64@8" ]
    8 -> 1 [ label = "8:in_0" ]
    3 -> 1 [ label = "9:in_0" ]
    2 -> 1 [ label = "10:in_1" ]
    2 -> 9 [ label = "11:in_2" ]
    3 -> 9 [ label = "12:in_2" ]
    8 -> 9 [ label = "13:in_1" ]
    3 -> 5 [ label = "14:in_1" ]
}

Working on subty: digraph {
    2 [ label = "2:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    12 [ label = "12:[bottom,T]" ]
    8 -> 12 [ label = "5:σ64@0" ]
    4 -> 5 [ label = "6:σ64@0" ]
    8 -> 5 [ label = "9:σ64@40" ]
    5 -> 8 [ label = "10:load" ]
    2 -> 4 [ label = "11:store" ]
    8 -> 7 [ label = "12:σ64@8" ]
    2 -> 4 [ label = "13:load" ]
}

{
    4: SketchSCCInfo {
        entry_paths: {
            [
                Store,
                Field(
                    Field {
                        offset: 0,
                        size: 64,
                    },
                ),
                Load,
                Field(
                    Field {
                        offset: 0,
                        size: 64,
                    },
                ),
            ],
        },
        successors: {},
    },
    0: SketchSCCInfo {
        entry_paths: {
            [],
        },
        successors: {
            1,
        },
    },
    3: SketchSCCInfo {
        entry_paths: {
            [
                Store,
                Field(
                    Field {
                        offset: 0,
                        size: 64,
                    },
                ),
                Load,
                Field(
                    Field {
                        offset: 8,
                        size: 64,
                    },
                ),
            ],
        },
        successors: {},
    },
    1: SketchSCCInfo {
        entry_paths: {
            [
                Load,
            ],
        },
        successors: {
            2,
        },
    },
    2: SketchSCCInfo {
        entry_paths: {
            [
                Store,
                Field(
                    Field {
                        offset: 0,
                        size: 64,
                    },
                ),
            ],
        },
        successors: {
            3,
            4,
        },
    },
}
Working on 0 
About to check entry path  0
has subsketches
cex lang digraph {
    0 [ label = "[bottom,T]" ]
    2 [ label = "[bottom,T]" ]
    3 [ label = "[bottom,T]" ]
    4 [ label = "[bottom,T]" ]
    2 -> 3 [ label = "σ64@0" ]
    3 -> 4 [ label = "load" ]
    4 -> 0 [ label = "σ64@0" ]
    4 -> 0 [ label = "σ64@8" ]
    4 -> 3 [ label = "σ64@40" ]
}

Working on 1 
About to check entry path  1
has subsketches
cex lang digraph {
}

Working on subty: digraph {
    0 [ label = "0:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    10 -> 11 [ label = "2:load" ]
    11 -> 8 [ label = "5:σ64@24" ]
    11 -> 4 [ label = "7:σ64@0" ]
    3 -> 0 [ label = "8:load" ]
    11 -> 10 [ label = "9:σ64@40" ]
    0 -> 10 [ label = "11:σ64@0" ]
    11 -> 6 [ label = "12:σ64@8" ]
}

{
    3: SketchSCCInfo {
        entry_paths: {
            [
                Load,
                Field(
                    Field {
                        offset: 0,
                        size: 64,
                    },
                ),
                Load,
                Field(
                    Field {
                        offset: 0,
                        size: 64,
                    },
                ),
            ],
        },
        successors: {},
    },
    5: SketchSCCInfo {
        entry_paths: {
            [
                Load,
                Field(
                    Field {
                        offset: 0,
                        size: 64,
                    },
                ),
                Load,
                Field(
                    Field {
                        offset: 24,
                        size: 64,
                    },
                ),
            ],
        },
        successors: {},
    },
    4: SketchSCCInfo {
        entry_paths: {
            [
                Load,
                Field(
                    Field {
                        offset: 0,
                        size: 64,
                    },
                ),
                Load,
                Field(
                    Field {
                        offset: 8,
                        size: 64,
                    },
                ),
            ],
        },
        successors: {},
    },
    1: SketchSCCInfo {
        entry_paths: {
            [
                Load,
            ],
        },
        successors: {
            2,
        },
    },
    0: SketchSCCInfo {
        entry_paths: {
            [],
        },
        successors: {
            1,
        },
    },
    2: SketchSCCInfo {
        entry_paths: {
            [
                Load,
                Field(
                    Field {
                        offset: 0,
                        size: 64,
                    },
                ),
            ],
        },
        successors: {
            5,
            4,
            3,
        },
    },
}
Working on 0 
About to check entry path  0
has subsketches
cex lang digraph {
    0 [ label = "[bottom,T]" ]
}

Working on 1 
About to check entry path  1
has subsketches
cex lang digraph {
    0 [ label = "[bottom,T]" ]
}

Working on 2 
About to check entry path  2
Uhoh no subsketch
Working on 3 
About to check entry path  3
has subsketches
cex lang digraph {
}

Working on 4 
About to check entry path  4
has subsketches
cex lang digraph {
}

Working on 5 
About to check entry path  5
Uhoh no subsketch
Refining: sub_001014fb.in_2
Found at idx: 9
Orig repr digraph {
    9 [ label = "9:[bottom,T]" ]
}

[Tid { id: "sub_00101728", address: "00101728" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    12 [ label = "12:[bottom,T]" ]
    9 -> 3 [ label = "0:out" ]
    1 -> 3 [ label = "1:in_2" ]
    11 -> 2 [ label = "2:in_0" ]
    0 -> 12 [ label = "3:in_0" ]
    6 -> 5 [ label = "4:in_0" ]
    8 -> 12 [ label = "5:σ64@0" ]
    4 -> 5 [ label = "6:σ64@0" ]
    10 -> 7 [ label = "7:in_0" ]
    1 -> 5 [ label = "8:out" ]
    8 -> 5 [ label = "9:σ64@40" ]
    5 -> 8 [ label = "10:load" ]
    2 -> 4 [ label = "11:store" ]
    8 -> 7 [ label = "12:σ64@8" ]
    2 -> 4 [ label = "13:load" ]
}

Found at idx: 3
[Tid { id: "sub_00101677", address: "00101677" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[int,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    5 -> 9 [ label = "0:out" ]
    1 -> 9 [ label = "1:in_2" ]
    10 -> 11 [ label = "2:load" ]
    2 -> 3 [ label = "3:in_0" ]
    1 -> 10 [ label = "4:out" ]
    11 -> 8 [ label = "5:σ64@24" ]
    7 -> 6 [ label = "6:in_0" ]
    11 -> 4 [ label = "7:σ64@0" ]
    3 -> 0 [ label = "8:load" ]
    11 -> 10 [ label = "9:σ64@40" ]
    7 -> 8 [ label = "10:in_1" ]
    0 -> 10 [ label = "11:σ64@0" ]
    11 -> 6 [ label = "12:σ64@8" ]
}

Found at idx: 9
Unlabeled dfa: digraph {
    0 [ label = "[bottom,T]" ]
}

Unlabeled dfa: digraph {
    0 [ label = "[bottom,T]" ]
}

Merged param type for: sub_001014fb.in_2 digraph {
    0 [ label = "0:[bottom,T]" ]
}

0
sub_001014fb:blk_0010175b.in_2
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001013db",
            cs_tag: Some(
                Tid {
                    id: "blk_001014ff",
                    address: "001014ff",
                },
            ),
        },
        labels: [
            In(
                1,
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101080",
            cs_tag: Some(
                Tid {
                    id: "blk_00101569",
                    address: "00101569",
                },
            ),
        },
        labels: [
            In(
                2,
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: None,
        },
        labels: [
            In(
                2,
            ),
        ],
    }: NodeIndex(0),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    7 -> 6 [ label = "0:σ64@40" ]
    7 -> 5 [ label = "1:σ64@0" ]
    6 -> 7 [ label = "2:load" ]
    0 -> 4 [ label = "3:load" ]
    4 -> 6 [ label = "4:σ64@0" ]
    2 -> 0 [ label = "5:in_0" ]
    2 -> 6 [ label = "6:out" ]
    7 -> 5 [ label = "7:σ64@8" ]
    8 -> 1 [ label = "8:in_0" ]
    3 -> 1 [ label = "9:in_0" ]
    2 -> 1 [ label = "10:in_1" ]
    2 -> 9 [ label = "11:in_2" ]
    3 -> 9 [ label = "12:in_2" ]
    8 -> 9 [ label = "13:in_1" ]
    3 -> 5 [ label = "14:in_1" ]
}

Looking at nd 0
1
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    7 -> 6 [ label = "0:σ64@40" ]
    7 -> 5 [ label = "1:σ64@0" ]
    6 -> 7 [ label = "2:load" ]
    0 -> 4 [ label = "3:load" ]
    4 -> 6 [ label = "4:σ64@0" ]
    2 -> 0 [ label = "5:in_0" ]
    2 -> 6 [ label = "6:out" ]
    7 -> 5 [ label = "7:σ64@8" ]
    8 -> 1 [ label = "8:in_0" ]
    3 -> 1 [ label = "9:in_0" ]
    2 -> 1 [ label = "10:in_1" ]
    8 -> 9 [ label = "11:in_1" ]
    3 -> 9 [ label = "12:in_2" ]
    2 -> 9 [ label = "13:in_2" ]
    3 -> 5 [ label = "14:in_1" ]
}

Working on subty: digraph {
    3 [ label = "3:[int,T]" ]
}

{
    0: SketchSCCInfo {
        entry_paths: {
            [],
        },
        successors: {},
    },
}
Working on 0 
About to check entry path  0
has subsketches
cex lang digraph {
}

Working on subty: digraph {
    9 [ label = "9:[int,T]" ]
}

{
    0: SketchSCCInfo {
        entry_paths: {
            [],
        },
        successors: {},
    },
}
Working on 0 
About to check entry path  0
has subsketches
cex lang digraph {
}

trying to find out sub_001013db:blk_001014ff
trying to find out sub_001014fb.out
trying to find out sub_00101080:blk_00101569.in_1
trying to find out loop_breaker339.load.σ64@0
trying to find out sub_00101080:blk_00101569.in_2
trying to find out sub_00101080:blk_00101569
trying to find out sub_001013db:blk_001014ff.in_0
trying to find out sub_001014fb.in_1
trying to find out sub_001013db:blk_001014ff.in_1
trying to find out sub_001014fb
trying to find out sub_00101080:blk_00101569.in_0
trying to find out sub_001014fb.in_0
trying to find out loop_breaker339.load
trying to find out loop_breaker340
trying to find out loop_breaker339
trying to find out sub_001014fb.in_0.load
trying to find out sub_001014fb.in_2
trying to find out loop_breaker340.σ64@40
trying to find out sub_001014fb.in_0.load.σ64@0
Refining: sub_001014fb.out
Found at idx: 6
Orig repr digraph {
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    7 -> 6 [ label = "0:σ64@40" ]
    7 -> 5 [ label = "1:σ64@0" ]
    6 -> 7 [ label = "2:load" ]
    7 -> 5 [ label = "7:σ64@8" ]
}

[Tid { id: "sub_00101728", address: "00101728" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[int,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    12 [ label = "12:[bottom,T]" ]
    9 -> 3 [ label = "0:out" ]
    1 -> 3 [ label = "1:in_2" ]
    11 -> 2 [ label = "2:in_0" ]
    0 -> 12 [ label = "3:in_0" ]
    6 -> 5 [ label = "4:in_0" ]
    8 -> 12 [ label = "5:σ64@0" ]
    4 -> 5 [ label = "6:σ64@0" ]
    10 -> 7 [ label = "7:in_0" ]
    1 -> 5 [ label = "8:out" ]
    8 -> 5 [ label = "9:σ64@40" ]
    5 -> 8 [ label = "10:load" ]
    2 -> 4 [ label = "11:store" ]
    8 -> 7 [ label = "12:σ64@8" ]
    2 -> 4 [ label = "13:load" ]
}

Found at idx: 5
[Tid { id: "sub_00101677", address: "00101677" }]
Fetching type from digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[int,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    5 -> 9 [ label = "0:out" ]
    1 -> 9 [ label = "1:in_2" ]
    10 -> 11 [ label = "2:load" ]
    2 -> 3 [ label = "3:in_0" ]
    1 -> 10 [ label = "4:out" ]
    11 -> 8 [ label = "5:σ64@24" ]
    7 -> 6 [ label = "6:in_0" ]
    11 -> 4 [ label = "7:σ64@0" ]
    3 -> 0 [ label = "8:load" ]
    11 -> 10 [ label = "9:σ64@40" ]
    7 -> 8 [ label = "10:in_1" ]
    0 -> 10 [ label = "11:σ64@0" ]
    11 -> 6 [ label = "12:σ64@8" ]
}

Found at idx: 10
Unlabeled dfa: digraph {
    0 [ label = "[bottom,T]" ]
    2 [ label = "[bottom,T]" ]
    3 [ label = "[bottom,T]" ]
    0 -> 2 [ label = "σ64@0" ]
    0 -> 2 [ label = "σ64@8" ]
    0 -> 2 [ label = "σ64@24" ]
    0 -> 3 [ label = "σ64@40" ]
    3 -> 0 [ label = "load" ]
}

Unlabeled dfa: digraph {
    0 [ label = "[bottom,T]" ]
    1 [ label = "[bottom,T]" ]
    3 [ label = "[bottom,T]" ]
    0 -> 1 [ label = "load" ]
    1 -> 3 [ label = "σ64@0" ]
    1 -> 3 [ label = "σ64@8" ]
    1 -> 3 [ label = "σ64@24" ]
    1 -> 0 [ label = "σ64@40" ]
}

Merged param type for: sub_001014fb.out digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    0 -> 2 [ label = "0:load" ]
    2 -> 1 [ label = "1:σ64@0" ]
    2 -> 1 [ label = "2:σ64@8" ]
    2 -> 1 [ label = "3:σ64@24" ]
    2 -> 0 [ label = "4:σ64@40" ]
}

0
sub_001014fb:blk_0010175b.out
mapping: {
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker340",
            cs_tag: None,
        },
        labels: [],
    }: NodeIndex(2),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker340",
            cs_tag: None,
        },
        labels: [
            Field(
                Field {
                    offset: 40,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker339",
            cs_tag: None,
        },
        labels: [
            Load,
            Field(
                Field {
                    offset: 0,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(1),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: None,
        },
        labels: [
            Out(
                0,
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker339",
            cs_tag: None,
        },
        labels: [
            Load,
        ],
    }: NodeIndex(2),
    DerivedTypeVar {
        var: TypeVariable {
            name: "loop_breaker339",
            cs_tag: None,
        },
        labels: [],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_001014fb",
            cs_tag: None,
        },
        labels: [
            In(
                0,
            ),
            Load,
            Field(
                Field {
                    offset: 0,
                    size: 64,
                },
            ),
        ],
    }: NodeIndex(0),
    DerivedTypeVar {
        var: TypeVariable {
            name: "sub_00101080",
            cs_tag: Some(
                Tid {
                    id: "blk_00101569",
                    address: "00101569",
                },
            ),
        },
        labels: [
            In(
                1,
            ),
        ],
    }: NodeIndex(1),
}
Target digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    7 -> 6 [ label = "0:σ64@40" ]
    7 -> 5 [ label = "1:σ64@0" ]
    6 -> 7 [ label = "2:load" ]
    0 -> 4 [ label = "3:load" ]
    4 -> 6 [ label = "4:σ64@0" ]
    2 -> 0 [ label = "5:in_0" ]
    2 -> 6 [ label = "6:out" ]
    7 -> 5 [ label = "7:σ64@8" ]
    8 -> 1 [ label = "8:in_0" ]
    3 -> 1 [ label = "9:in_0" ]
    2 -> 1 [ label = "10:in_1" ]
    8 -> 9 [ label = "11:in_1" ]
    3 -> 9 [ label = "12:in_2" ]
    2 -> 9 [ label = "13:in_2" ]
    3 -> 5 [ label = "14:in_1" ]
}

Looking at nd 0
1
2
Looking at nd 1
3
Looking at nd 2
3
3
3
3
3
After replace digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    3 [ label = "3:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    7 -> 6 [ label = "0:load" ]
    2 -> 7 [ label = "1:out" ]
    6 -> 5 [ label = "2:σ64@8" ]
    0 -> 4 [ label = "3:load" ]
    6 -> 7 [ label = "4:σ64@40" ]
    2 -> 0 [ label = "5:in_0" ]
    6 -> 5 [ label = "6:σ64@24" ]
    6 -> 5 [ label = "7:σ64@0" ]
    8 -> 1 [ label = "8:in_0" ]
    3 -> 1 [ label = "9:in_0" ]
    2 -> 1 [ label = "10:in_1" ]
    8 -> 9 [ label = "11:in_1" ]
    3 -> 9 [ label = "12:in_2" ]
    2 -> 9 [ label = "13:in_2" ]
    4 -> 7 [ label = "14:σ64@0" ]
    3 -> 5 [ label = "15:in_1" ]
}

Working on subty: digraph {
    5 [ label = "5:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    12 [ label = "12:[bottom,T]" ]
    8 -> 12 [ label = "5:σ64@0" ]
    8 -> 5 [ label = "9:σ64@40" ]
    5 -> 8 [ label = "10:load" ]
    8 -> 7 [ label = "12:σ64@8" ]
}

{
    2: SketchSCCInfo {
        entry_paths: {
            [
                Load,
                Field(
                    Field {
                        offset: 0,
                        size: 64,
                    },
                ),
            ],
        },
        successors: {},
    },
    1: SketchSCCInfo {
        entry_paths: {
            [
                Load,
                Field(
                    Field {
                        offset: 8,
                        size: 64,
                    },
                ),
            ],
        },
        successors: {},
    },
    0: SketchSCCInfo {
        entry_paths: {
            [],
        },
        successors: {
            1,
            2,
        },
    },
}
Working on 0 
About to check entry path  0
Uhoh no subsketch
Working on 1 
About to check entry path  1
has subsketches
cex lang digraph {
}

Working on 2 
About to check entry path  2
has subsketches
cex lang digraph {
}

Working on subty: digraph {
    4 [ label = "4:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    8 [ label = "8:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[bottom,T]" ]
    10 -> 11 [ label = "2:load" ]
    11 -> 8 [ label = "5:σ64@24" ]
    11 -> 4 [ label = "7:σ64@0" ]
    11 -> 10 [ label = "9:σ64@40" ]
    11 -> 6 [ label = "12:σ64@8" ]
}

{
    1: SketchSCCInfo {
        entry_paths: {
            [
                Load,
                Field(
                    Field {
                        offset: 0,
                        size: 64,
                    },
                ),
            ],
        },
        successors: {},
    },
    2: SketchSCCInfo {
        entry_paths: {
            [
                Load,
                Field(
                    Field {
                        offset: 8,
                        size: 64,
                    },
                ),
            ],
        },
        successors: {},
    },
    0: SketchSCCInfo {
        entry_paths: {
            [],
        },
        successors: {
            2,
            1,
            3,
        },
    },
    3: SketchSCCInfo {
        entry_paths: {
            [
                Load,
                Field(
                    Field {
                        offset: 24,
                        size: 64,
                    },
                ),
            ],
        },
        successors: {},
    },
}
Working on 0 
About to check entry path  0
Uhoh no subsketch
Working on 1 
About to check entry path  1
has subsketches
cex lang digraph {
}

Working on 2 
About to check entry path  2
has subsketches
cex lang digraph {
}

Working on 3 
About to check entry path  3
has subsketches
cex lang digraph {
}

Working on group [Tid { id: "sub_001013db", address: "001013db" }]
Working on group [Tid { id: "sub_00101436", address: "00101436" }]
Working on group [Tid { id: "sub_001014af", address: "001014af" }]
Working on group [Tid { id: "sub_0010198c", address: "0010198c" }]
Working on group [Tid { id: "sub_00101020", address: "00101020" }]
Working on group [Tid { id: "sub_00101030", address: "00101030" }]
Working on group [Tid { id: "sub_00101040", address: "00101040" }]
Working on group [Tid { id: "sub_00101050", address: "00101050" }]
Working on group [Tid { id: "sub_00101060", address: "00101060" }]
Working on group [Tid { id: "sub_00101070", address: "00101070" }]
Working on group [Tid { id: "sub_00101080", address: "00101080" }]
Working on group [Tid { id: "sub_00101090", address: "00101090" }]
Working on group [Tid { id: "sub_001010a0", address: "001010a0" }]
Working on group [Tid { id: "sub_001010c0", address: "001010c0" }]
Working on group [Tid { id: "sub_001010d0", address: "001010d0" }]
Working on group [Tid { id: "sub_00105030", address: "00105030" }]
Working on group [Tid { id: "sub_00105048", address: "00105048" }]
Working on group [Tid { id: "sub_00105068", address: "00105068" }]
digraph {
    0 [ label = "0:[bottom,T]" ]
    1 [ label = "1:[bottom,T]" ]
    2 [ label = "2:[bottom,T]" ]
    4 [ label = "4:[bottom,T]" ]
    5 [ label = "5:[bottom,T]" ]
    6 [ label = "6:[bottom,T]" ]
    7 [ label = "7:[bottom,T]" ]
    9 [ label = "9:[bottom,T]" ]
    10 [ label = "10:[bottom,T]" ]
    11 [ label = "11:[int,T]" ]
    12 [ label = "12:[bottom,T]" ]
    14 [ label = "14:[bottom,T]" ]
    15 [ label = "15:[bottom,T]" ]
    16 [ label = "16:[bottom,T]" ]
    19 [ label = "19:[bottom,T]" ]
    21 [ label = "21:[bottom,T]" ]
    23 [ label = "23:[bottom,T]" ]
    24 [ label = "24:[bottom,T]" ]
    28 [ label = "28:[bottom,T]" ]
    37 [ label = "37:[bottom,T]" ]
    39 [ label = "39:[bottom,T]" ]
    41 [ label = "41:[bottom,T]" ]
    42 [ label = "42:[bottom,T]" ]
    49 [ label = "49:[bottom,T]" ]
    50 [ label = "50:[bottom,T]" ]
    54 [ label = "54:[bottom,T]" ]
    55 [ label = "55:[bottom,T]" ]
    57 [ label = "57:[bottom,T]" ]
    58 [ label = "58:[bottom,T]" ]
    7 -> 6 [ label = "0:load" ]
    2 -> 7 [ label = "1:out" ]
    6 -> 5 [ label = "2:σ64@8" ]
    0 -> 4 [ label = "3:load" ]
    6 -> 7 [ label = "4:σ64@40" ]
    2 -> 0 [ label = "5:in_0" ]
    6 -> 5 [ label = "6:σ64@24" ]
    6 -> 5 [ label = "7:σ64@0" ]
    2 -> 1 [ label = "10:in_1" ]
    2 -> 9 [ label = "13:in_2" ]
    4 -> 7 [ label = "14:σ64@0" ]
    10 -> 11 [ label = "16:out" ]
    10 -> 11 [ label = "17:in_1" ]
    14 -> 11 [ label = "18:out" ]
    15 -> 12 [ label = "21:load" ]
    12 -> 16 [ label = "22:σ64@0" ]
    14 -> 15 [ label = "23:in_0" ]
    24 -> 11 [ label = "25:out" ]
    21 -> 19 [ label = "28:load" ]
    19 -> 23 [ label = "29:σ64@0" ]
    24 -> 21 [ label = "30:in_0" ]
    37 -> 28 [ label = "34:in_0" ]
    28 -> 4 [ label = "43:store" ]
    28 -> 4 [ label = "45:load" ]
    49 -> 50 [ label = "48:load" ]
    41 -> 42 [ label = "49:in_0" ]
    50 -> 5 [ label = "51:σ64@24" ]
    50 -> 5 [ label = "53:σ64@0" ]
    42 -> 39 [ label = "54:load" ]
    50 -> 49 [ label = "55:σ64@40" ]
    39 -> 49 [ label = "57:σ64@0" ]
    50 -> 5 [ label = "58:σ64@8" ]
    55 -> 54 [ label = "61:out" ]
    57 -> 58 [ label = "63:out" ]
}

Dtv: loop_breaker340 Group: 50
Dtv: sub_001011e9 Group: 10
Dtv: sub_00101364 Group: 14
Dtv: loop_breaker495 Group: 28
Dtv: sub_001014fb Group: 2
Dtv: loop_breaker339 Group: 49
Dtv: sub_001011e0 Group: 55
Dtv: sub_00101728 Group: 37
Dtv: sub_001012ed Group: 24
Dtv: sub_00101677 Group: 41
Dtv: sub_001011a0 Group: 57
test tests::test_mooosl_full_constraint_gen ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 26 filtered out; finished in 7.44s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

