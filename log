   Compiling binary_type_inference v0.1.0 (/Users/ian/Code/BTIGhidra/binary_type_inference)
warning: unused imports: `Graph`, `Node`
  --> src/analysis/fixup_returns.rs:15:23
   |
15 |     analysis::graph::{Graph, Node},
   |                       ^^^^^  ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `petgraph::graph::NodeIndex`
  --> src/analysis/fixup_returns.rs:18:5
   |
18 | use petgraph::graph::NodeIndex;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `cwe_checker_lib::analysis::pointer_inference::PointerInference`
 --> src/lowering/mod.rs:2:5
  |
2 | use cwe_checker_lib::analysis::pointer_inference::PointerInference;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `BTreeMap`
 --> src/inference_job/mod.rs:2:19
  |
2 |     collections::{BTreeMap, BTreeSet, HashMap, HashSet},
  |                   ^^^^^^^^

warning: unused import: `ExternSymbol`
  --> src/inference_job/mod.rs:13:35
   |
13 |     intermediate_representation::{ExternSymbol, Project, Tid},
   |                                   ^^^^^^^^^^^^

warning: unused import: `dot::Dot`
  --> src/inference_job/mod.rs:16:16
   |
16 | use petgraph::{dot::Dot, graph::NodeIndex};
   |                ^^^^^^^^

warning: unused variable: `v`
  --> src/analysis/fixup_returns.rs:59:31
   |
59 |                     .filter(|(v, tset)| {
   |                               ^ help: if this is intentional, prefix it with an underscore: `_v`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: associated function is never used: `set_expec_constraint_gen`
   --> src/lib.rs:213:12
    |
213 |         fn set_expec_constraint_gen(&mut self, v: String) -> &mut Self {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function is never used: `set_expec_ctype_mapping`
   --> src/lib.rs:228:12
    |
228 |         fn set_expec_ctype_mapping(&mut self, v: String) -> &mut Self {
    |            ^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
  --> src/node_context/register_map.rs:81:5
   |
81 |     pub fn get_register_context(&self) -> &BTreeMap<Variable, TermSet> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:5:9
   |
5  | #![warn(missing_docs)]
   |         ^^^^^^^^^^^^

warning: missing documentation for an enum
  --> src/lowering/mod.rs:41:1
   |
41 | pub enum CType {
   | ^^^^^^^^^^^^^^

warning: missing documentation for a variant
  --> src/lowering/mod.rs:44:5
   |
44 |     Pointer {
   |     ^^^^^^^

warning: missing documentation for a struct field
  --> src/lowering/mod.rs:45:9
   |
45 |         target: NodeIndex,
   |         ^^^^^^^^^^^^^^^^^

warning: missing documentation for a variant
  --> src/lowering/mod.rs:47:5
   |
47 |     Alias(NodeIndex),
   |     ^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> src/lowering/mod.rs:52:9
   |
52 |         params: Vec<Parameter>,
   |         ^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> src/lowering/mod.rs:53:9
   |
53 |         return_ty: Option<NodeIndex>,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a function
   --> src/lowering/mod.rs:630:1
    |
630 | pub fn produce_inner_types(ct: CType) -> ctypes::c_type::InnerType {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a function
   --> src/lowering/mod.rs:679:1
    |
679 | pub fn convert_mapping_to_profobuf(mp: HashMap<NodeIndex, CType>) -> CTypeMapping {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
 --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:2:1
  |
2 | pub struct Tid {
  | ^^^^^^^^^^^^^^

warning: missing documentation for a struct field
 --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:4:5
  |
4 |     pub name: ::prost::alloc::string::String,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
 --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:6:5
  |
6 |     pub address: ::prost::alloc::string::String,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
 --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:9:1
  |
9 | pub struct TidToNodeIndex {
  | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:11:5
   |
11 |     pub tid: ::core::option::Option<Tid>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:13:5
   |
13 |     pub node_index: u32,
   |     ^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:16:1
   |
16 | pub struct CTypeMapping {
   | ^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:18:5
   |
18 |     pub node_types: ::std::collections::HashMap<u32, CType>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:20:5
   |
20 |     pub type_variable_repr_nodes: ::prost::alloc::vec::Vec<TidToNodeIndex>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:23:1
   |
23 | pub struct Parameter {
   | ^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:25:5
   |
25 |     pub parameter_index: u32,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:27:5
   |
27 |     pub r#type: u32,
   |     ^^^^^^^^^^^^^^^

warning: missing documentation for a struct
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:30:1
   |
30 | pub struct Function {
   | ^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:32:5
   |
32 |     pub parameters: ::prost::alloc::vec::Vec<Parameter>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:34:5
   |
34 |     pub return_type: u32,
   |     ^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:36:5
   |
36 |     pub has_return: bool,
   |     ^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:39:1
   |
39 | pub struct Field {
   | ^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:41:5
   |
41 |     pub bit_size: u32,
   |     ^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:43:5
   |
43 |     pub byte_offset: u32,
   |     ^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:45:5
   |
45 |     pub r#type: u32,
   |     ^^^^^^^^^^^^^^^

warning: missing documentation for a struct
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:48:1
   |
48 | pub struct Structure {
   | ^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:50:5
   |
50 |     pub fields: ::prost::alloc::vec::Vec<Field>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:53:1
   |
53 | pub struct Alias {
   | ^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:55:5
   |
55 |     pub to_type: u32,
   |     ^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:58:1
   |
58 | pub struct Primitive {
   | ^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:60:5
   |
60 |     pub type_constant: ::prost::alloc::string::String,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:63:1
   |
63 | pub struct Pointer {
   | ^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:65:5
   |
65 |     pub to_type: u32,
   |     ^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:68:1
   |
68 | pub struct CType {
   | ^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:70:5
   |
70 |     pub inner_type: ::core::option::Option<c_type::InnerType>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an enum
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:75:5
   |
75 |     pub enum InnerType {
   |     ^^^^^^^^^^^^^^^^^^

warning: missing documentation for a variant
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:77:9
   |
77 |         Function(super::Function),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a variant
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:79:9
   |
79 |         Structure(super::Structure),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a variant
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:81:9
   |
81 |         Alias(super::Alias),
   |         ^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a variant
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:83:9
   |
83 |         Primitive(super::Primitive),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a variant
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:85:9
   |
85 |         Pointer(super::Pointer),
   |         ^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/ctypes.rs:74:32
   |
74 |     #[derive(Clone, PartialEq, ::prost::Oneof)]
   |                                ^^^^^^^^^^^^^^
   |
   = note: this warning originates in the derive macro `::prost::Oneof` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: missing documentation for a struct
 --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:2:1
  |
2 | pub struct Field {
  | ^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
 --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:4:5
  |
4 |     pub bit_size: u32,
  |     ^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
 --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:6:5
  |
6 |     pub byte_offset: u32,
  |     ^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
 --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:9:1
  |
9 | pub struct FieldLabel {
  | ^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:11:5
   |
11 |     pub inner_type: ::core::option::Option<field_label::InnerType>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an enum
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:16:5
   |
16 |     pub enum InnerType {
   |     ^^^^^^^^^^^^^^^^^^

warning: missing documentation for a variant
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:18:9
   |
18 |         Ptr(i32),
   |         ^^^^^^^^

warning: missing documentation for a variant
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:20:9
   |
20 |         InParam(u32),
   |         ^^^^^^^^^^^^

warning: missing documentation for a variant
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:22:9
   |
22 |         OutParam(u32),
   |         ^^^^^^^^^^^^^

warning: missing documentation for a variant
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:24:9
   |
24 |         Field(super::Field),
   |         ^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:15:32
   |
15 |     #[derive(Clone, PartialEq, ::prost::Oneof)]
   |                                ^^^^^^^^^^^^^^
   |
   = note: this warning originates in the derive macro `::prost::Oneof` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: missing documentation for a struct
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:28:1
   |
28 | pub struct DerivedTypeVariable {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:30:5
   |
30 |     pub base_var: ::prost::alloc::string::String,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:32:5
   |
32 |     pub field_labels: ::prost::alloc::vec::Vec<FieldLabel>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:35:1
   |
35 | pub struct SubtypingConstraint {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:37:5
   |
37 |     pub lhs: ::core::option::Option<DerivedTypeVariable>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:39:5
   |
39 |     pub rhs: ::core::option::Option<DerivedTypeVariable>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an enum
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:43:1
   |
43 | pub enum Pointer {
   | ^^^^^^^^^^^^^^^^

warning: missing documentation for a variant
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:44:5
   |
44 |     LoadUnspecified = 0,
   |     ^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a variant
  --> /Users/ian/Code/BTIGhidra/binary_type_inference/target/debug/build/binary_type_inference-2b177eb9be83fd05/out/constraints.rs:45:5
   |
45 |     Store = 1,
   |     ^^^^^^^^^

warning: missing documentation for a struct
  --> src/inference_job/mod.rs:57:1
   |
57 | pub struct JobDefinition {
   | ^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> src/inference_job/mod.rs:58:5
   |
58 |     pub binary_path: String,
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> src/inference_job/mod.rs:59:5
   |
59 |     pub ir_json_path: String,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> src/inference_job/mod.rs:60:5
   |
60 |     pub lattice_json: String,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> src/inference_job/mod.rs:61:5
   |
61 |     pub additional_constraints_file: String,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> src/inference_job/mod.rs:62:5
   |
62 |     pub interesting_tids: String,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> src/inference_job/mod.rs:63:5
   |
63 |     pub function_filter_file: Option<String>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
  --> src/inference_job/mod.rs:66:1
   |
66 | pub struct InferenceJob {
   | ^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a trait
  --> src/inference_job/mod.rs:75:1
   |
75 | pub trait InferenceParsing<T> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
  --> src/inference_job/mod.rs:76:5
   |
76 |     fn parse_collection<R: Read>(rdr: R) -> anyhow::Result<Vec<T>>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
  --> src/inference_job/mod.rs:99:1
   |
99 | pub struct ProtobufDef {}
   | ^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
   --> src/inference_job/mod.rs:123:1
    |
123 | pub struct JsonDef {}
    | ^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/inference_job/mod.rs:208:5
    |
208 |     pub fn get_graph(&self) -> Graph {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/inference_job/mod.rs:274:5
    |
274 |     pub fn generate_constraints<'a>(&self, grph: &Graph<'a>) -> anyhow::Result<ConstraintSet> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/inference_job/mod.rs:281:5
    |
281 | /     pub fn get_all_constraints_to_solve<'a>(
282 | |         &self,
283 | |         grph: &Graph<'a>,
284 | |     ) -> anyhow::Result<ConstraintSet> {
...   |
287 | |         Ok(genned)
288 | |     }
    | |_____^

warning: missing documentation for an associated function
   --> src/inference_job/mod.rs:297:5
    |
297 |     pub fn recover_additional_shared_returns<'a>(&mut self) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/inference_job/mod.rs:314:5
    |
314 | /     pub fn get_simplified_constraints(
315 | |         &self,
316 | |         orig_constraints: &ConstraintSet,
317 | |     ) -> anyhow::Result<ConstraintSet> {
...   |
343 | |         Ok(new_cons)
344 | |     }
    | |_____^

warning: missing documentation for an associated function
   --> src/inference_job/mod.rs:346:5
    |
346 | /     pub fn get_labeled_sketch_graph(
347 | |         &self,
348 | |         constraints: &ConstraintSet,
349 | |     ) -> SketchGraph<CustomLatticeElement> {
...   |
355 | |         labeled_graph
356 | |     }
    | |_____^

warning: missing documentation for an associated function
   --> src/inference_job/mod.rs:358:5
    |
358 | /     pub fn lower_labeled_sketch_graph(
359 | |         sg: &SketchGraph<CustomLatticeElement>,
360 | |     ) -> anyhow::Result<HashMap<NodeIndex, CType>> {
361 | |         let facts_in_path = TempDir::new("facts_in")?;
362 | |         let facts_out_path = TempDir::new("facts_out")?;
363 | |         crate::lowering::collect_ctypes(&sg, facts_in_path, facts_out_path)
364 | |     }
    | |_____^

warning: missing documentation for an associated function
   --> src/inference_job/mod.rs:366:5
    |
366 | /     pub fn infer_ctypes(
367 | |         &mut self,
368 | |     ) -> anyhow::Result<(SketchGraph<CustomLatticeElement>, HashMap<NodeIndex, CType>)> {
369 | |         self.recover_additional_shared_returns();
...   |
374 | |         Ok((labeled_graph, lowered))
375 | |     }
    | |_____^

warning: missing documentation for an associated function
   --> src/inference_job/mod.rs:377:5
    |
377 |     pub fn get_interesting_tids(&self) -> &HashSet<Tid> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/inference_job/mod.rs:381:5
    |
381 | /     pub fn parse<T: InferenceParsing<SubtypeConstraint> + InferenceParsing<Tid>>(
382 | |         def: &JobDefinition,
383 | |     ) -> anyhow::Result<InferenceJob> {
384 | |         let bin = Self::parse_binary(&def.binary_path)?;
...   |
404 | |         })
405 | |     }
    | |_____^

warning: `binary_type_inference` (lib) generated 95 warnings (2 duplicates)
warning: unused imports: `ConstraintSet`, `DerivedTypeVar`, `FSA`, `LabelingContext`, `LatticeDefinition`, `NamedLatticeElement`, `RuleContext`, `SketchGraph`, `SubtypeConstraint`, `TyConstraint`, `TypeVariable`, `constraint_generation`, `node_context`, `parse_constraint_set`, `self`, `self`, `util`
  --> src/bin/json_to_constraints.rs:2:5
   |
2  |     constraint_generation,
   |     ^^^^^^^^^^^^^^^^^^^^^
3  |     constraints::{
4  |         parse_constraint_set, ConstraintSet, DerivedTypeVar, SubtypeConstraint, TyConstraint,
   |         ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^
5  |         TypeVariable,
   |         ^^^^^^^^^^^^
6  |     },
7  |     ctypes::{self},
   |              ^^^^
8  |     inference_job::{InferenceJob, JobDefinition, JsonDef, ProtobufDef},
9  |     node_context,
   |     ^^^^^^^^^^^^
10 |     pb_constraints::{self},
   |                      ^^^^
11 |     solver::{
12 |         constraint_graph::{RuleContext, FSA},
   |                            ^^^^^^^^^^^  ^^^
13 |         type_lattice::{LatticeDefinition, NamedLatticeElement},
   |                        ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^
14 |         type_sketch::{LabelingContext, SketchGraph},
   |                       ^^^^^^^^^^^^^^^  ^^^^^^^^^^^
15 |     },
16 |     util,
   |     ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Tid`, `analysis::pointer_inference::Config`, `self`, `utils::binary::RuntimeMemoryImage`
  --> src/bin/json_to_constraints.rs:21:5
   |
21 |     analysis::pointer_inference::Config,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
22 |     intermediate_representation::{self, Tid},
   |                                   ^^^^  ^^^
23 |     utils::binary::RuntimeMemoryImage,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `petgraph::dot::Dot`
  --> src/bin/json_to_constraints.rs:25:5
   |
25 | use petgraph::dot::Dot;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `regex::Regex`
  --> src/bin/json_to_constraints.rs:27:5
   |
27 | use regex::Regex;
   |     ^^^^^^^^^^^^

warning: unused imports: `any`, `collections::BTreeSet`, `convert::TryFrom`
  --> src/bin/json_to_constraints.rs:29:5
   |
29 |     any,
   |     ^^^
30 |     collections::BTreeSet,
   |     ^^^^^^^^^^^^^^^^^^^^^
31 |     convert::TryFrom,
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `collections::HashSet`
  --> src/bin/json_to_constraints.rs:34:11
   |
34 | use std::{collections::HashSet, convert::TryInto};
   |           ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `tempdir::TempDir`
  --> src/bin/json_to_constraints.rs:35:5
   |
35 | use tempdir::TempDir;
   |     ^^^^^^^^^^^^^^^^

warning: function is never used: `parse_collection_from_file`
  --> src/bin/json_to_constraints.rs:37:4
   |
37 | fn parse_collection_from_file<T: Message + Default>(filename: &str) -> anyhow::Result<Vec<T>> {
   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `binary_type_inference` (bin "json_to_constraints" test) generated 8 warnings
warning: `binary_type_inference` (lib test) generated 9 warnings (5 duplicates)
    Finished test [unoptimized + debuginfo] target(s) in 2.67s
     Running unittests (target/debug/deps/binary_type_inference-85885c4cefc77de5)
[2022-02-02T21:31:58Z INFO  binary_type_inference::inference_job] Retrieved IR
[2022-02-02T21:31:58Z INFO  binary_type_inference::inference_job] Normalized IR
[2022-02-02T21:31:59Z INFO  binary_type_inference::inference_job] Created RuntimeMemoryImage
[2022-02-02T21:32:00Z WARN  binary_type_inference::node_context::points_to] Address not contained in runtime memory image
[2022-02-02T21:32:00Z WARN  binary_type_inference::node_context::points_to] Address not contained in runtime memory image
[2022-02-02T21:32:00Z INFO  binary_type_inference::node_context::points_to] {AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_0010128f", address: "0010128f" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -48, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_00101010", address: "00101010" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -8, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_00101436", address: "00101436" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -48, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_00101928", address: "00101928" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -8, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_00101364", address: "00101364" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -48, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_00101000", address: "00101000" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -8, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_00101160", address: "00101160" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): 0, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_00101100", address: "00101100" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): 0, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_001011a0", address: "001011a0" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -16, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_001011e9", address: "001011e9" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -48, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_001012ed", address: "001012ed" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -48, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_001014fb", address: "001014fb" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -48, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_001015a4", address: "001015a4" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -48, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_00101672", address: "00101672" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -48, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_00101841", address: "00101841" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -48, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_001013db", address: "001013db" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -8, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_0010171b", address: "0010171b" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -64, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_001010e0", address: "001010e0" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): 0, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_00101130", address: "00101130" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): 0, AbstractIdentifier(AbstractIdentifierData { time: Tid { id: "sub_001014af", address: "001014af" }, location: Register(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }): -16}
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] entry formals, ConstraintSet({SubTy(SubtypeConstraint { lhs: DerivedTypeVar { var: TypeVariable { name: "instr_001015c7_0_RDI" }, labels: [] }, rhs: DerivedTypeVar { var: TypeVariable { name: "τ0" }, labels: [] } }), SubTy(SubtypeConstraint { lhs: DerivedTypeVar { var: TypeVariable { name: "instr_00101699_0_RDI" }, labels: [] }, rhs: DerivedTypeVar { var: TypeVariable { name: "τ0" }, labels: [] } }), SubTy(SubtypeConstraint { lhs: DerivedTypeVar { var: TypeVariable { name: "instr_00101742_0_RDI" }, labels: [] }, rhs: DerivedTypeVar { var: TypeVariable { name: "τ0" }, labels: [] } }), SubTy(SubtypeConstraint { lhs: DerivedTypeVar { var: TypeVariable { name: "sub_001012ed" }, labels: [In(0)] }, rhs: DerivedTypeVar { var: TypeVariable { name: "τ0" }, labels: [] } })})
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_001012ed
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: 
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_001012f1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001012f1_1 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001012f1_2 Store { address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), value: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001012f2_0 Assign { var: Variable { name: "RBP", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001012f5_0 Assign { var: Variable { name: "CF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntLess, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001012f5_1 Assign { var: Variable { name: "OF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntSBorrow, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001012f5_2 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001012f5_3 Assign { var: Variable { name: "SF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntSLess, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001012f5_4 Assign { var: Variable { name: "ZF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntEqual, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001012f5_8 Assign { var: Variable { name: "PF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntEqual, lhs: BinOp { op: IntAnd, lhs: Cast { op: PopCount, size: ByteSize(1), arg: BinOp { op: IntAnd, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(255)] }) } }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(1)] }) }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001012f9_2 Store { address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551592)] }) }, value: Var(Variable { name: "RDI", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001012fd_0 Assign { var: Variable { name: "RDI", size: ByteSize(8), is_temp: false }, value: Const(ApInt { len: BitWidth(64), digits: [Digit(1056768)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101304_0 Assign { var: Variable { name: "RAX", size: ByteSize(8), is_temp: false }, value: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101309_0 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101309_1 Store { address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), value: Const(ApInt { len: BitWidth(64), digits: [Digit(1053454)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001012f1_1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } representing with τ4
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ5
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001015ca_0_RSP ⊑ τ2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_0010169c_0_RSP ⊑ τ2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_00101745_0_RSP ⊑ τ2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(τ2,τ4,τ5)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_001012f1_1_RSP.store.σ64@0 ⊑ sub_001012ed@RSP.σ64@40
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001012f2_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) to Variable { name: "RBP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001012f1_1_RSP
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001012f5_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntLess, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } to Variable { name: "CF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntLess, representing with τ10
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ10
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001012f5_1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSBorrow, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } to Variable { name: "OF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntSBorrow, representing with τ11
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ11
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001012f5_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } representing with τ13
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ14
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(instr_001012f1_1_RSP,τ13,τ14)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001012f5_3
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSLess, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) } to Variable { name: "SF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntSLess, representing with τ15
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ15
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001012f5_4
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntEqual, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) } to Variable { name: "ZF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntEqual, representing with τ16
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ16
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001012f5_8
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntEqual, lhs: BinOp { op: IntAnd, lhs: Cast { op: PopCount, size: ByteSize(1), arg: BinOp { op: IntAnd, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(255)] }) } }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(1)] }) }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) } to Variable { name: "PF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntEqual, representing with τ17
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ17
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551592)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_001012f2_0_RBP.store.σ64@-24 ⊑ sub_001012ed@RSP.σ64@16
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001012fd_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Const(ApInt { len: BitWidth(64), digits: [Digit(1056768)] }) to Variable { name: "RDI", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1056768)] }) representing with τ21
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ21
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101304_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) to Variable { name: "RAX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) representing with τ22
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ22
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101309_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } representing with τ24
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ25
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(instr_001012f5_2_RSP,τ24,τ25)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_00101309_0_RSP.store.σ64@0 ⊑ sub_001012ed@RSP.σ64@0
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1053454)] }) representing with τ27
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: instr_001012fd_0_RDI ⊑ sub_00101020.in_0
    
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_0010130e
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010130e_0 Assign { var: Variable { name: "RAX", size: ByteSize(8), is_temp: false }, value: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101313_0 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101313_1 Store { address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), value: Const(ApInt { len: BitWidth(64), digits: [Digit(1053464)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010130e_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) to Variable { name: "RAX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) representing with τ30
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ30
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101313_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } representing with τ32
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ33
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(instr_00101309_0_RSP,τ32,τ33)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_00101313_0_RSP.store.σ64@0 ⊑ sub_001012ed@RSP.σ64@0
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1053464)] }) representing with τ35
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: 
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_00101318
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101318_0 Assign { var: Variable { name: "RAX", size: ByteSize(8), is_temp: false }, value: Cast { op: IntSExt, size: ByteSize(8), arg: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) } } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010131a_2 Store { address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551608)] }) }, value: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010131e_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551608)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010131e_2 Assign { var: Variable { name: "RAX", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101322_0 Assign { var: Variable { name: "RSI", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101325_0 Assign { var: Variable { name: "RDI", size: ByteSize(8), is_temp: false }, value: Const(ApInt { len: BitWidth(64), digits: [Digit(1)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010132a_0 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010132a_1 Store { address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), value: Const(ApInt { len: BitWidth(64), digits: [Digit(1053487)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101318_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Cast { op: IntSExt, size: ByteSize(8), arg: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) } } to Variable { name: "RAX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Cast { op: IntSExt, size: ByteSize(8), arg: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) } } representing with τ36
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ36
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551608)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_001011ee_0_RBP ⊑ τ37
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_0010128d_1_RBP ⊑ τ37
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_001012eb_1_RBP ⊑ τ37
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons τ37.store.σ64@-8 ⊑ sub_001012ed@RSP.σ64@32
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010131e_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RAX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_0010131e_1_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101322_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RSI", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_0010131e_1_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101325_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Const(ApInt { len: BitWidth(64), digits: [Digit(1)] }) to Variable { name: "RDI", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1)] }) representing with τ44
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ44
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010132a_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } representing with τ47
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ48
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001012e6_0_RSP ⊑ τ45
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001012ec_1_RSP ⊑ τ45
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(τ45,τ47,τ48)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_0010132a_0_RSP.store.σ64@0 ⊑ sub_001012ed@RSP.σ64@0
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1053487)] }) representing with τ50
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: instr_00101322_0_RSI ⊑ sub_00101060.in_1
    instr_00101325_0_RDI ⊑ sub_00101060.in_0
    
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_0010132f
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010132f_0 Assign { var: Variable { name: "RDX", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101332_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551592)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101332_2 Assign { var: Variable { name: "RAX", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101336_1 Store { address: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }), value: Var(Variable { name: "RDX", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101339_0 Assign { var: Variable { name: "RDI", size: ByteSize(8), is_temp: false }, value: Const(ApInt { len: BitWidth(64), digits: [Digit(1056779)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101340_0 Assign { var: Variable { name: "RAX", size: ByteSize(8), is_temp: false }, value: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101345_0 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101345_1 Store { address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), value: Const(ApInt { len: BitWidth(64), digits: [Digit(1053514)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010132f_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) to Variable { name: "RDX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_0010132a_2_RAX
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101332_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RAX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_00101332_1_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_00101332_2_RAX.store.σ64@0 ⊑ instr_001015ba_2@RAX.σ64@0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_00101332_2_RAX.store.σ64@0 ⊑ instr_0010169c_2@RSP.σ64@8
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_00101332_2_RAX.store.σ64@0 ⊑ instr_00101745_2@RSP.σ64@16
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101339_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Const(ApInt { len: BitWidth(64), digits: [Digit(1056779)] }) to Variable { name: "RDI", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1056779)] }) representing with τ60
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ60
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101340_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) to Variable { name: "RAX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) representing with τ61
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ61
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101345_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } representing with τ63
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ64
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(instr_0010132a_0_RSP,τ63,τ64)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_00101345_0_RSP.store.σ64@0 ⊑ sub_001012ed@RSP.σ64@0
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1053514)] }) representing with τ66
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: instr_00101339_0_RDI ⊑ sub_00101020.in_0
    
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_0010134a
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010134a_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551592)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010134e_0 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010134e_1 Assign { var: Variable { name: "RAX", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101351_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551608)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101351_2 Assign { var: Variable { name: "RDX", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101355_0 Assign { var: Variable { name: "RSI", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101358_0 Assign { var: Variable { name: "RDI", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010135b_0 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010135b_1 Store { address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), value: Const(ApInt { len: BitWidth(64), digits: [Digit(1053536)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010134e_1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RAX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_0010134e_0_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101351_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RDX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_00101351_1_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101355_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RSI", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_00101351_1_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101358_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) to Variable { name: "RDI", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_0010134e_1_RAX
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010135b_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } representing with τ79
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ80
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(instr_00101345_0_RSP,τ79,τ80)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_0010135b_0_RSP.store.σ64@0 ⊑ sub_001012ed@RSP.σ64@0
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1053536)] }) representing with τ82
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: 
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_00101360
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101360_0 Assign { var: Variable { name: "RAX", size: ByteSize(8), is_temp: false }, value: Cast { op: IntSExt, size: ByteSize(8), arg: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) } } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101362_0 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101362_1 Load { var: Variable { name: "RBP", size: ByteSize(8), is_temp: false }, address: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101362_2 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntAdd, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101363_0 Load { var: Variable { name: "RIP", size: ByteSize(8), is_temp: false }, address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101363_1 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntAdd, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101360_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Cast { op: IntSExt, size: ByteSize(8), arg: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) } } to Variable { name: "RAX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Cast { op: IntSExt, size: ByteSize(8), arg: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) } } representing with τ83
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ83
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101362_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }) to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ84
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001011ee_0_RBP ⊑ τ84
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_0010128d_1_RBP ⊑ τ84
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101362_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntAdd, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_00101362_0_RSP.+8
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101363_1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntAdd, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_00101362_2_RSP.+8
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: 
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] entry formals, ConstraintSet({})
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_001015a4
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: 
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_001015a8
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015a8_1 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015a8_2 Store { address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), value: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015a9_0 Assign { var: Variable { name: "RBP", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015ac_0 Assign { var: Variable { name: "CF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntLess, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015ac_1 Assign { var: Variable { name: "OF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntSBorrow, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015ac_2 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015ac_3 Assign { var: Variable { name: "SF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntSLess, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015ac_4 Assign { var: Variable { name: "ZF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntEqual, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015ac_8 Assign { var: Variable { name: "PF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntEqual, lhs: BinOp { op: IntAnd, lhs: Cast { op: PopCount, size: ByteSize(1), arg: BinOp { op: IntAnd, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(255)] }) } }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(1)] }) }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015b0_0 Assign { var: Variable { name: "RSI", size: ByteSize(8), is_temp: false }, value: Const(ApInt { len: BitWidth(64), digits: [Digit(48)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015b5_0 Assign { var: Variable { name: "RDI", size: ByteSize(8), is_temp: false }, value: Const(ApInt { len: BitWidth(64), digits: [Digit(1)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015ba_0 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015ba_1 Store { address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), value: Const(ApInt { len: BitWidth(64), digits: [Digit(1054143)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015a8_1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } representing with τ93
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ94
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(instr_001018d8_0_RSP,τ93,τ94)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_001015a8_1_RSP.store.σ64@0 ⊑ sub_001015a4@RSP.σ64@40
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015a9_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) to Variable { name: "RBP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001015a8_1_RSP
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015ac_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntLess, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } to Variable { name: "CF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntLess, representing with τ99
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ99
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015ac_1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSBorrow, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } to Variable { name: "OF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntSBorrow, representing with τ100
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ100
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015ac_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } representing with τ102
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ103
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(instr_001015a8_1_RSP,τ102,τ103)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015ac_3
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSLess, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) } to Variable { name: "SF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntSLess, representing with τ104
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ104
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015ac_4
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntEqual, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) } to Variable { name: "ZF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntEqual, representing with τ105
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ105
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015ac_8
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntEqual, lhs: BinOp { op: IntAnd, lhs: Cast { op: PopCount, size: ByteSize(1), arg: BinOp { op: IntAnd, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(255)] }) } }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(1)] }) }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) } to Variable { name: "PF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntEqual, representing with τ106
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ106
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015b0_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Const(ApInt { len: BitWidth(64), digits: [Digit(48)] }) to Variable { name: "RSI", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(48)] }) representing with τ107
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ107
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015b5_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Const(ApInt { len: BitWidth(64), digits: [Digit(1)] }) to Variable { name: "RDI", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1)] }) representing with τ108
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ108
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015ba_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } representing with τ110
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ111
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(instr_001015ac_2_RSP,τ110,τ111)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_001015ba_0_RSP.store.σ64@0 ⊑ sub_001015a4@RSP.σ64@0
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1054143)] }) representing with τ113
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: instr_001015b0_0_RSI ⊑ sub_00101060.in_1
    instr_001015b5_0_RDI ⊑ sub_00101060.in_0
    
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_001015bf
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015bf_2 Store { address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551600)] }) }, value: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015c3_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551600)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015c3_2 Assign { var: Variable { name: "RAX", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015c7_0 Assign { var: Variable { name: "RDI", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015ca_0 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015ca_1 Store { address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), value: Const(ApInt { len: BitWidth(64), digits: [Digit(1054159)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551600)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_001015a9_0_RBP.store.σ64@-16 ⊑ sub_001015a4@RSP.σ64@24
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015c3_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RAX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001015c3_1_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015c7_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RDI", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001015c3_1_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015ca_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } representing with τ123
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ124
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(instr_001015ba_0_RSP,τ123,τ124)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_001015ca_0_RSP.store.σ64@0 ⊑ sub_001015a4@RSP.σ64@0
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1054159)] }) representing with τ126
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: 
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_001015cf
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015cf_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551600)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015cf_2 Assign { var: Variable { name: "RDX", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015d3_0 Assign { var: Variable { name: "$U3100", size: ByteSize(8), is_temp: true }, value: BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(16)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015d3_2 Store { address: Var(Variable { name: "$U3100", size: ByteSize(8), is_temp: true }), value: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015d7_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551600)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015db_0 Assign { var: Variable { name: "CF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntCarry, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015db_1 Assign { var: Variable { name: "OF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntSCarry, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015db_2 Assign { var: Variable { name: "RAX", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015db_3 Assign { var: Variable { name: "SF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntSLess, lhs: BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) }, rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015db_4 Assign { var: Variable { name: "ZF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntEqual, lhs: BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) }, rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015db_8 Assign { var: Variable { name: "PF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntEqual, lhs: BinOp { op: IntAnd, lhs: Cast { op: PopCount, size: ByteSize(1), arg: BinOp { op: IntAnd, lhs: BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) }, rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(255)] }) } }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(1)] }) }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015df_0 Assign { var: Variable { name: "RDI", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015e2_0 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015e2_1 Store { address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), value: Const(ApInt { len: BitWidth(64), digits: [Digit(1054183)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015cf_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RDX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001015cf_1_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015d3_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(16)] }) } to Variable { name: "$U3100", size: ByteSize(8), is_temp: true }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001015cf_1_$Uc000.+16
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "$U3100", size: ByteSize(8), is_temp: true })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_001015d3_0_$U3100.store.σ64@0 ⊑ instr_001015ba_2@RAX.σ64@16
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015db_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntCarry, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "CF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntCarry, representing with τ133
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ133
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015db_1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSCarry, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "OF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntSCarry, representing with τ134
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ134
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015db_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RAX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001015d7_1_$Uc000.+8
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015db_3
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSLess, lhs: BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) }, rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) } to Variable { name: "SF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntSLess, representing with τ136
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ136
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015db_4
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntEqual, lhs: BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) }, rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(0)] }) } to Variable { name: "ZF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntEqual, representing with τ137
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ137
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015db_8
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntEqual, lhs: BinOp { op: IntAnd, lhs: Cast { op: PopCount, size: ByteSize(1), arg: BinOp { op: IntAnd, lhs: BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) }, rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(255)] }) } }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(1)] }) }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) } to Variable { name: "PF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntEqual, representing with τ138
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ138
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015df_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RDI", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001015d7_1_$Uc000.+8
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015e2_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } representing with τ141
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ142
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(instr_00101363_1_RSP,τ141,τ142)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_001015e2_0_RSP.store.σ64@0 ⊑ sub_001015a4@RSP.σ64@0
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1054183)] }) representing with τ144
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: 
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_001015e7
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015e7_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551600)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015eb_0 Assign { var: Variable { name: "$U3100", size: ByteSize(8), is_temp: true }, value: BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(24)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015eb_2 Store { address: Var(Variable { name: "$U3100", size: ByteSize(8), is_temp: true }), value: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015ef_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551600)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015f3_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(16)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015f3_2 Assign { var: Variable { name: "RDX", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015f7_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551600)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015fb_0 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015fb_1 Assign { var: Variable { name: "RAX", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_001015fe_0 Assign { var: Variable { name: "RSI", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "RDX", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101601_0 Assign { var: Variable { name: "RDI", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101604_0 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101604_1 Store { address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), value: Const(ApInt { len: BitWidth(64), digits: [Digit(1054217)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015eb_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(24)] }) } to Variable { name: "$U3100", size: ByteSize(8), is_temp: true }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001015e7_1_$Uc000.+24
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "$U3100", size: ByteSize(8), is_temp: true })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_001015eb_0_$U3100.store.σ64@0 ⊑ instr_001015ba_2@RAX.σ64@24
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015f3_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RDX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001015f3_1_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015fb_1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RAX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001015fb_0_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_001015fe_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "RDX", size: ByteSize(8), is_temp: false }) to Variable { name: "RSI", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001015f3_2_RDX
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101601_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RDI", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_001015fb_0_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101604_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } representing with τ158
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ159
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(instr_001013da_1_RSP,τ158,τ159)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_00101604_0_RSP.store.σ64@0 ⊑ sub_001015a4@RSP.σ64@0
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1054217)] }) representing with τ161
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: 
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_00101609
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101609_0 Assign { var: Variable { name: "RDX", size: ByteSize(8), is_temp: false }, value: Cast { op: IntZExt, size: ByteSize(8), arg: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) } } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010160b_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551600)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010160f_0 Assign { var: Variable { name: "$U3100", size: ByteSize(8), is_temp: true }, value: BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010160f_2 Store { address: Var(Variable { name: "$U3100", size: ByteSize(8), is_temp: true }), value: Var(Variable { name: "RDX", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101613_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551600)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101617_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010161b_0 Assign { var: Variable { name: "CF", size: ByteSize(1), is_temp: false }, value: Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010161b_1 Assign { var: Variable { name: "OF", size: ByteSize(1), is_temp: false }, value: Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010161b_4 Assign { var: Variable { name: "SF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntSLess, lhs: BinOp { op: IntAnd, lhs: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }, rhs: Const(ApInt { len: BitWidth(32), digits: [Digit(4095)] }) }, rhs: Const(ApInt { len: BitWidth(32), digits: [Digit(0)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010161b_5 Assign { var: Variable { name: "ZF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntEqual, lhs: BinOp { op: IntAnd, lhs: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }, rhs: Const(ApInt { len: BitWidth(32), digits: [Digit(4095)] }) }, rhs: Const(ApInt { len: BitWidth(32), digits: [Digit(0)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010161b_9 Assign { var: Variable { name: "PF", size: ByteSize(1), is_temp: false }, value: BinOp { op: IntEqual, lhs: BinOp { op: IntAnd, lhs: Cast { op: PopCount, size: ByteSize(1), arg: BinOp { op: IntAnd, lhs: BinOp { op: IntAnd, lhs: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }, rhs: Const(ApInt { len: BitWidth(32), digits: [Digit(4095)] }) }, rhs: Const(ApInt { len: BitWidth(32), digits: [Digit(255)] }) } }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(1)] }) }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101620_2 Store { address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551596)] }) }, value: BinOp { op: IntAnd, lhs: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }, rhs: Const(ApInt { len: BitWidth(32), digits: [Digit(4095)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101623_1 Load { var: Variable { name: "$Ubf00", size: ByteSize(4), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551596)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101635_2 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: BinOp { op: IntMult, lhs: Cast { op: IntZExt, size: ByteSize(8), arg: Var(Variable { name: "$Ubf00", size: ByteSize(4), is_temp: true }) }, rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) }, rhs: BinOp { op: IntMult, lhs: Const(ApInt { len: BitWidth(64), digits: [Digit(1065024)] }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(1)] }) } } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101639_1 Assign { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101639_2 Store { address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551608)] }) }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010163d_1 Load { var: Variable { name: "$Ubf00", size: ByteSize(4), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551596)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101640_1 Assign { var: Variable { name: "RCX", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntMult, lhs: Cast { op: IntZExt, size: ByteSize(8), arg: Var(Variable { name: "$Ubf00", size: ByteSize(4), is_temp: true }) }, rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010164f_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551600)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101653_2 Assign { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101653_3 Store { address: BinOp { op: IntAdd, lhs: BinOp { op: IntMult, lhs: Cast { op: IntZExt, size: ByteSize(8), arg: Var(Variable { name: "$Ubf00", size: ByteSize(4), is_temp: true }) }, rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) }, rhs: BinOp { op: IntMult, lhs: Const(ApInt { len: BitWidth(64), digits: [Digit(1065024)] }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(1)] }) } }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101657_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551600)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101657_2 Assign { var: Variable { name: "RAX", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010165b_1 Load { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551608)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010165b_2 Assign { var: Variable { name: "RDX", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010165f_1 Assign { var: Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010165f_2 Store { address: BinOp { op: IntAdd, lhs: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(40)] }) }, value: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101663_0 Assign { var: Variable { name: "RDI", size: ByteSize(8), is_temp: false }, value: Const(ApInt { len: BitWidth(64), digits: [Digit(1056879)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010166a_0 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_0010166a_1 Store { address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), value: Const(ApInt { len: BitWidth(64), digits: [Digit(1054319)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101609_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Cast { op: IntZExt, size: ByteSize(8), arg: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) } } to Variable { name: "RDX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Cast { op: IntZExt, size: ByteSize(8), arg: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }) } } representing with τ162
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ162
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010160f_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntAdd, lhs: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(32)] }) } to Variable { name: "$U3100", size: ByteSize(8), is_temp: true }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_0010160b_1_$Uc000.+32
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "$U3100", size: ByteSize(8), is_temp: true })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_0010160f_0_$U3100.store.σ64@0 ⊑ instr_001015ba_2@RAX.σ64@32
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010161b_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) to Variable { name: "CF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) representing with τ169
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ169
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010161b_1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) to Variable { name: "OF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) representing with τ170
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ170
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010161b_4
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSLess, lhs: BinOp { op: IntAnd, lhs: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }, rhs: Const(ApInt { len: BitWidth(32), digits: [Digit(4095)] }) }, rhs: Const(ApInt { len: BitWidth(32), digits: [Digit(0)] }) } to Variable { name: "SF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntSLess, representing with τ171
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ171
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010161b_5
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntEqual, lhs: BinOp { op: IntAnd, lhs: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }, rhs: Const(ApInt { len: BitWidth(32), digits: [Digit(4095)] }) }, rhs: Const(ApInt { len: BitWidth(32), digits: [Digit(0)] }) } to Variable { name: "ZF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntEqual, representing with τ172
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ172
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010161b_9
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntEqual, lhs: BinOp { op: IntAnd, lhs: Cast { op: PopCount, size: ByteSize(1), arg: BinOp { op: IntAnd, lhs: BinOp { op: IntAnd, lhs: Subpiece { low_byte: ByteSize(0), size: ByteSize(4), arg: Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) }, rhs: Const(ApInt { len: BitWidth(32), digits: [Digit(4095)] }) }, rhs: Const(ApInt { len: BitWidth(32), digits: [Digit(255)] }) } }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(1)] }) }, rhs: Const(ApInt { len: BitWidth(8), digits: [Digit(0)] }) } to Variable { name: "PF", size: ByteSize(1), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntEqual, representing with τ173
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ173
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551596)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_00101434_0_RBP.store.σ32@-20 ⊑ sub_001015a4@RSP.σ32@20
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntAnd, representing with τ175
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntMult, representing with τ177
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntMult, representing with τ178
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101639_1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_00101635_2_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: BinOp { op: IntAdd, lhs: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(18446744073709551608)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_00101434_0_RBP.store.σ64@-8 ⊑ sub_001015a4@RSP.σ64@32
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101640_1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntMult, lhs: Cast { op: IntZExt, size: ByteSize(8), arg: Var(Variable { name: "$Ubf00", size: ByteSize(4), is_temp: true }) }, rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RCX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntMult, representing with τ184
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ184
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101653_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_0010164f_1_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: BinOp { op: IntAdd, lhs: BinOp { op: IntMult, lhs: Cast { op: IntZExt, size: ByteSize(8), arg: Var(Variable { name: "$Ubf00", size: ByteSize(4), is_temp: true }) }, rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) }, rhs: BinOp { op: IntMult, lhs: Const(ApInt { len: BitWidth(64), digits: [Digit(1065024)] }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(1)] }) } }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntMult, representing with τ187
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled binop type: IntMult, representing with τ188
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101657_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RAX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_00101657_1_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010165b_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "RDX", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_0010165b_1_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010165f_1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }) to Variable { name: "$Uc000", size: ByteSize(8), is_temp: true }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_0010165b_1_$Uc000
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: BinOp { op: IntAdd, lhs: Var(Variable { name: "RAX", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(40)] }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_00101657_2_RAX.store.σ64@40 ⊑ instr_001015ba_2@RAX.σ64@40
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101663_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Const(ApInt { len: BitWidth(64), digits: [Digit(1056879)] }) to Variable { name: "RDI", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1056879)] }) representing with τ198
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ198
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_0010166a_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntSub, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: UnOp { op: IntNegate, arg: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } representing with τ200
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] τ201
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Add(instr_00101435_1_RSP,τ200,τ201)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Addressing: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false })
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] update cons instr_0010166a_0_RSP.store.σ64@0 ⊑ sub_001015a4@RSP.σ64@0
[2022-02-02T21:32:00Z WARN  binary_type_inference::constraint_generation] Unhandled expression: Const(ApInt { len: BitWidth(64), digits: [Digit(1054319)] }) representing with τ203
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: instr_00101663_0_RDI ⊑ sub_00101040.in_0
    
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_0010166f
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: 
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Starting block blk_00101670
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101670_0 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101670_1 Load { var: Variable { name: "RBP", size: ByteSize(8), is_temp: false }, address: Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101670_2 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntAdd, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101671_0 Load { var: Variable { name: "RIP", size: ByteSize(8), is_temp: false }, address: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }) }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Has instr_00101671_1 Assign { var: Variable { name: "RSP", size: ByteSize(8), is_temp: false }, value: BinOp { op: IntAdd, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101670_0
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning Var(Variable { name: "RBP", size: ByteSize(8), is_temp: false }) to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_00101434_0_RBP
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101670_2
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntAdd, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_00101670_0_RSP.+8
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Working on tid instr_00101671_1
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Assigning BinOp { op: IntAdd, lhs: Var(Variable { name: "RSP", size: ByteSize(8), is_temp: false }), rhs: Const(ApInt { len: BitWidth(64), digits: [Digit(8)] }) } to Variable { name: "RSP", size: ByteSize(8), is_temp: false }
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] instr_00101670_2_RSP.+8
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Extern cons: 
    
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_001010e0  retrun sub_00101100, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_001011a0  retrun sub_00101130, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_001011a0  retrun sub_00101130, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_001011e0  retrun sub_00101160, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_001011e0  retrun sub_00101160, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101364  retrun sub_001011e9, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_001012ed  retrun sub_001011e9, 
     Call-return Some(true)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return caller: sub_001012ed, return sub_001011e9
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_0010128f  retrun sub_001011e9, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101364  retrun sub_001011e9, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_001012ed  retrun sub_001011e9, 
     Call-return Some(true)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return caller: sub_001012ed, return sub_001011e9
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_0010128f  retrun sub_001011e9, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101841  retrun sub_0010128f, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101364  retrun sub_0010128f, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_001012ed  retrun sub_0010128f, 
     Call-return Some(true)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return caller: sub_001012ed, return sub_0010128f
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101841  retrun sub_0010128f, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101364  retrun sub_0010128f, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_001012ed  retrun sub_0010128f, 
     Call-return Some(true)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return caller: sub_001012ed, return sub_0010128f
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_0010171b  retrun sub_001012ed, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101672  retrun sub_001012ed, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_001015a4  retrun sub_001012ed, 
     Call-return Some(true)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return caller: sub_001015a4, return sub_001012ed
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_001015a4  retrun sub_00101364, 
     Call-return Some(true)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return caller: sub_001015a4, return sub_00101364
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_001015a4  retrun sub_001013db, 
     Call-return Some(true)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return caller: sub_001015a4, return sub_001013db
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_001014fb  retrun sub_001013db, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101672  retrun sub_00101436, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101841  retrun sub_001014af, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_0010171b  retrun sub_001014fb, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101672  retrun sub_001014fb, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101841  retrun sub_001015a4, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101841  retrun sub_00101672, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101841  retrun sub_00101672, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101841  retrun sub_0010171b, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::constraint_generation] Call-return pre caller sub_00101841  retrun sub_0010171b, 
     Call-return Some(false)
[2022-02-02T21:32:00Z INFO  binary_type_inference::solver::type_sketch] Node 0: sub_001012ed in group 0
[2022-02-02T21:32:00Z INFO  binary_type_inference::solver::type_sketch] Node 1: sub_001012ed.out in group 1
     Running unittests (target/debug/deps/json_to_constraints-ab35c64af5f74bec)
